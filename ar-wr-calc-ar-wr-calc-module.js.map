{"version":3,"sources":["./client/app/ar-wr-calc/ar-wr-calc-routing.module.ts","./client/app/ar-wr-calc/ar-wr-calc.component.ts","./client/app/ar-wr-calc/ar-wr-calc.component.html","./client/app/ar-wr-calc/ar-wr-calc.module.ts","./client/app/ar-wr-calc/ar-wr-calc.service.ts","./client/app/ar-wr-calc/header/header.component.ts","./client/app/ar-wr-calc/header/header.component.html","./client/app/models/pressInDTO.ts","./client/app/models/wrArMaterialCteDTO.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAe;AAC0B;AACc;AACO;AAE9D,sBAAsB;AACqC;;;AAE3D,IAAM,MAAM,GAAW;IACnB;QACI,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,uEAAiB,EAAE,QAAQ,EAAE;YAC9C;gBACI,IAAI,EAAE,SAAS;gBACf,IAAI,EAAE;oBACF,cAAc,EAAE,yEAAe,CAAC,WAAW;iBAC9C;gBACD,YAAY,EAAE,cAAM,iRAAgD,CAAC,IAAI,CAAC,WAAC,IAAI,QAAC,CAAC,iBAAiB,EAAnB,CAAmB,CAAC,EAA/E,CAA+E;aACtG;YACD;gBACI,IAAI,EAAE,UAAU;gBAChB,IAAI,EAAE;oBACF,cAAc,EAAE,yEAAe,CAAC,YAAY;iBAC/C;gBACD,YAAY,EAAE,cAAM,iRAAgD,CAAC,IAAI,CAAC,WAAC,IAAI,QAAC,CAAC,kBAAkB,EAApB,CAAoB,CAAC,EAAhF,CAAgF;aACvG;SACJ;KACJ;CACJ,CAAC;AAEF;IAAA;KAMsC;wGAAzB,qBAAqB;wKAArB,qBAAqB,kBALrB;gBACL,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC;aAChC;YACS,4DAAY;gCAjC1B;CAmCsC;AAAJ;mIAArB,qBAAqB,uFAFpB,4DAAY;6FAEb,qBAAqB;cANjC,sDAAQ;eAAC;gBACN,OAAO,EAAE;oBACL,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC;iBAChC;gBACD,OAAO,EAAE,CAAC,4DAAY,CAAC;aAC1B;;;;;;;;;;;;;;AClCD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAe;AACiE;AAER;AAKhC;AAExC,sBAAsB;AAC2C;AAUP;;;;;;;;;;;;AAG1D;IA2BE,2BACmB,eAAgC,EAChC,MAAc,EACd,kBAAsC,EACtC,cAA8B,EAC9B,uBAAgD,EAChD,iBAAoC,EACpC,wBAAkD,EAClD,aAA4B;QAR/C,iBAyBC;QAxBkB,oBAAe,GAAf,eAAe,CAAiB;QAChC,WAAM,GAAN,MAAM,CAAQ;QACd,uBAAkB,GAAlB,kBAAkB,CAAoB;QACtC,mBAAc,GAAd,cAAc,CAAgB;QAC9B,4BAAuB,GAAvB,uBAAuB,CAAyB;QAChD,sBAAiB,GAAjB,iBAAiB,CAAmB;QACpC,6BAAwB,GAAxB,wBAAwB,CAA0B;QAClD,kBAAa,GAAb,aAAa,CAAe;QA3BtC,4CAAuC,GAAG,sBAAsB,CAAC;QAC1E,iCAA4B,GAAG,CAAC,CAAC;QACjC,iCAA4B,GAAG,CAAC,CAAC;QACjC,wBAAmB,GAAG,KAAK,CAAC;QAE5B,0BAAqB,GAAuB,EAAE,CAAC;QAC/C,gBAAW,GAAG,qEAAW,CAAC;QAC1B,aAAQ,GAAe;YACrB,EAAE,SAAS,EAAE,UAAU,EAAE,eAAe,EAAE,SAAS,EAAE,mBAAmB,EAAE,eAAe,EAAE,cAAc,EAAE,IAAI,EAAE;YACjH,EAAE,SAAS,EAAE,UAAU,EAAE,eAAe,EAAE,UAAU,EAAE,mBAAmB,EAAE,gBAAgB,EAAE,cAAc,EAAE,IAAI,EAAE;SAAC,CAAC;QAKvH,+CAA+C;QAC/C,mBAAc,GAAsB,IAAI,CAAC;QAcvC,iBAAiB;QACjB,IAAI,CAAC,0BAA0B,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CACvD,6DAAM,CAAC,eAAK,IAAI,YAAK,YAAY,6DAAa,EAA9B,CAA8B,CAAC,CAChD,CAAC,SAAS,CAAC;YACV,IAAI,YAAY,GAAG,CAAC,CAAC;YACrB,IAAI,KAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,UAAU,IAAI,KAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,EAAE;gBAC3F,YAAY,GAAG,KAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,cAAc,CAAC;aAC5E;YAED,IAAI,YAAY,EAAE;gBAChB,KAAI,CAAC,4BAA4B,GAAG,KAAI,CAAC,4BAA4B,CAAC;gBACtE,KAAI,CAAC,4BAA4B,GAAG,YAAY,CAAC;gBACjD,KAAI,CAAC,cAAc,GAAG,KAAI,CAAC,aAAa,CAAC,iBAAiB,EAAE,CAAC;aAC9D;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,4BAA4B;IAC5B,uCAAW,GAAX;QACE,IAAI,IAAI,CAAC,0BAA0B,EAAE;YACnC,IAAI,CAAC,0BAA0B,CAAC,WAAW,EAAE,CAAC;SAC/C;IACH,CAAC;IAED,oCAAQ,GAAR;QACE,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAC3B,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACxB,IAAI,CAAC,qBAAqB,EAAE,CAAC;IAC/B,CAAC;IAED,+CAAmB,GAAnB;QAAA,iBA8CC;QA7CC,8BAA8B;QAC9B,IAAI,CAAC,eAAe,CAAC,wBAAwB,EAAE,CAAC,SAAS,CACvD,UAAC,IAAI;YACH,KAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;YAChC,KAAI,CAAC,iBAAiB,GAAG,IAAiB,CAAC;YAC3C,4BAA4B;YAC5B,iIAAiI;YACjI,+CAA+C;YAC/C,4GAA4G;YAC5G,IAAM,sBAAsB,GAAuB,EAAE,CAAC;YACtD,6EAA6E;YAC7E,wEAAwE;YACxE,qFAAqF;YAErF,wCAAwC;YACxC,wFAAwF;YACxF,wEAAwE;YACxE,qBAAqB;YACrB,QAAQ;YACR,QAAQ;YAER,uDAAuD;YACvD,+BAA+B;YAC/B,yEAAyE;YACzE,MAAM;YACN,WAAW;YACX,yDAAyD;YACzD,uDAAuD;YACvD,MAAM;YACN,IAAI;YACJ,SAAS;YACT,uDAAuD;YACvD,qDAAqD;YACrD,IAAI;YAEJ,kDAAkD;YAClD,8DAA8D;YAC9D,oBAAoB;YACpB,0CAA0C;YAC1C,KAAI,CAAC,eAAe,CAAC,mBAAmB,CAAC,KAAI,CAAC,iBAAiB,CAAC,CAAC;QACnE,CAAC,EACD,UAAC,KAAwB;YACvB,MAAM,IAAI,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QACjC,CAAC,CACF,CAAC;IACJ,CAAC;IAED,sBAAsB;IACtB,4CAAgB,GAAhB;QAAA,iBAIC;QAHC,IAAI,CAAC,uBAAuB,CAAC,gBAAgB,EAAE,CAAC,SAAS,CAAC,UAAC,IAAW;YACpE,KAAI,CAAC,uBAAuB,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;IACL,CAAC;IAED,2EAA2E;IAC3E,iDAAqB,GAArB;QACE,IAAM,WAAW,GAAsB,IAAI,CAAC,iBAAiB,CAAC,mBAAmB,CAAC;QAClF,IAAM,WAAW,GAAsB,IAAI,CAAC,wBAAwB,CAAC,0BAA0B,CAAC;QAChG,IAAI,WAAW,IAAI,WAAW,CAAC,EAAE,GAAG,CAAC,IAAI,WAAW,CAAC,EAAE,KAAK,+DAAK,CAAC,IAAI,EAAE;YACtE,IAAI,WAAW,IAAI,WAAW,CAAC,EAAE,GAAG,CAAC,IAAI,WAAW,CAAC,EAAE,KAAK,qEAAW,CAAC,UAAU,EAAE;gBAClF,IAAI,CAAC,aAAa,CAAC,6BAA6B,CAAC,qEAAW,CAAC,UAAU,CAAC,CAAC;aAC1E;SACF;aACI,IAAI,WAAW,IAAI,WAAW,CAAC,EAAE,GAAG,CAAC,IAAI,WAAW,CAAC,EAAE,KAAK,+DAAK,CAAC,WAAW,EAAE;YAClF,IAAI,WAAW,IAAI,WAAW,CAAC,EAAE,GAAG,CAAC,IAAI,WAAW,CAAC,EAAE,KAAK,qEAAW,CAAC,OAAO,EAAE;gBAC/E,IAAI,CAAC,aAAa,CAAC,6BAA6B,CAAC,qEAAW,CAAC,OAAO,CAAC,CAAC;aACvE;SACF;aACI;YACH,IAAI,CAAC,aAAa,CAAC,6BAA6B,CAAC,qEAAW,CAAC,OAAO,CAAC,CAAC;SACvE;IACH,CAAC;sFArIU,iBAAiB;qGAAjB,iBAAiB;YC9B9B,wEAAyB;YACzB,6EACI;YAAA,6EACI;YAAA,oEAA4B;YAC5B,4EAAkE;YAClE,yEACI;YAAA,yEACI;YAAA,yEACI;YAAA,uEAAyB;YAAA,oaAI8C;YAAA,4DAAI;YAC/E,4DAAM;YACN,0EACI;YAAA,0EACI;YAAA,2EACI;YAAA,0EACI;YAAA,2EACI;YAAA,2EAA2C;YAAA,oEAAQ;YAAA,4DAAM;YAC7D,4DAAM;YACN,2EACI;YAAA,iFAAmE;YACvE,4DAAM;YACV,4DAAM;YACV,4DAAM;YACV,4DAAM;YACV,4DAAM;YACV,4DAAM;YACN,0EACI;YAAA,2EACI;YAAA,4EAA+B;YACnC,4DAAM;YACV,4DAAM;YACV,4DAAM;YACV,4DAAU;YACd,4DAAU;;YAhC6B,0DAAoB;YAApB,iFAAoB;YAkBP,2DAAiC;YAAjC,8FAAiC;;4BDtBrF;CAoKC;AAtI6B;6FAAjB,iBAAiB;cAN7B,uDAAS;eAAC;gBACT,QAAQ,EAAE,gBAAgB;gBAC1B,WAAW,EAAE,6BAA6B;gBAC1C,SAAS,EAAE,CAAC,4BAA4B,CAAC;gBACzC,aAAa,EAAE,+DAAiB,CAAC,IAAI;aACtC;;;;;;;;;;;;;;AE7BD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAe;AACf,iCAAiC;AACQ;AACM;AACmB;AAElE,sBAAsB;AACiC;AACiB;AACZ;AACQ;AACT;AACJ;;AAEvD;IAAA;KAe+B;iGAAlB,cAAc;0JAAd,cAAc,mBAFd,CAAC,mEAAe,CAAC,YARnB;gBACP,4DAAY;gBACZ,0DAAW;gBACX,kEAAmB;gBACnB,gFAAqB;gBACrB,kEAAY;gBACZ,mFAAiB;aAClB;yBA1BH;CA6B+B;AAAJ;mIAAd,cAAc,mBAbvB,uEAAiB;QACjB,wEAAe,aAGf,4DAAY;QACZ,0DAAW;QACX,kEAAmB;QACnB,gFAAqB;QACrB,kEAAY;QACZ,mFAAiB;6FAIR,cAAc;cAf1B,sDAAQ;eAAC;gBACR,YAAY,EAAE;oBACZ,uEAAiB;oBACjB,wEAAe;iBAChB;gBACD,OAAO,EAAE;oBACP,4DAAY;oBACZ,0DAAW;oBACX,kEAAmB;oBACnB,gFAAqB;oBACrB,kEAAY;oBACZ,mFAAiB;iBAClB;gBACD,SAAS,EAAE,CAAC,mEAAe,CAAC;aAC7B;;;;;;;;;;;;;;AC5BD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAe;AAC4B;AAEJ;AAEvC,sBAAsB;AAC4B;AAIA;AACmB;AACH;AAIiE;AAE9F;;;;;AAGrC;IAgCE,kBAAkB;IAClB,yBACmB,KAAiB,EACjB,iBAAoC,EACpC,aAA4B;QAF5B,UAAK,GAAL,KAAK,CAAY;QACjB,sBAAiB,GAAjB,iBAAiB,CAAmB;QACpC,kBAAa,GAAb,aAAa,CAAe;QAhC/C,0BAA0B;QAET,YAAO,GAAG,6DAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC;QAEtD,uDAAuD;QACtC,uBAAkB,GAA+B,IAAI,oDAAe,CAAY,IAAI,CAAC,CAAC;QACvG,0EAA0E;QACjE,gBAAW,GAAG,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC;IA2B9D,CAAC;IAvBD,sBAAY,uCAAU;QAFtB,iDAAiD;QACjD,2EAA2E;aAC3E;YACE,OAAO,IAAI,CAAC,kBAAkB,CAAC,QAAQ,EAAE,CAAC;QAC5C,CAAC;QAED,yEAAyE;QACzE,+DAA+D;aAC/D,UAAuB,GAAc;YACnC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACpC,CAAC;;;OANA;IAWD,sBAAW,sDAAyB;QAHpC,yBAAyB;QAEzB,oDAAoD;aACpD;YACE,OAAO,IAAI,CAAC,UAAU,CAAC;QACzB,CAAC;;;OAAA;IAUD,oBAAoB;IACpB,oBAAoB;IACpB,yEAAyE;IACzE,+DAA+D;IAC/D,6CAAmB,GAAnB,UAAoB,GAAc;QAChC,IAAI,CAAC,UAAU,GAAG,GAAG,CAAC;IACxB,CAAC;IAED,uBAAuB;IAEvB,gCAAgC;IAChC,kDAAwB,GAAxB;QACE,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAI,IAAI,CAAC,OAAO,uBAAoB,CAAC,CAAC;IAC7D,CAAC;IAEM,yCAAe,GAAtB,UAAuB,IAAe,EAAE,IAAuB,EAAE,QAA2B;QAC1F,IAAM,IAAI,GAAe,IAAI,6DAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACpD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC;QAC/B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC;QACvC,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAI,IAAI,CAAC,OAAO,yBAAsB,EAAE,IAAI,CAAC,CAAC;IACtE,CAAC;IAEM,sCAAY,GAAnB,UAAoB,IAAe,EAAE,IAAuB,EAAE,QAA2B,EAAE,cAAoD;QAApD,kDAAyB,yEAAe,CAAC,WAAW;QAC7I,IAAM,IAAI,GAAe,IAAI,6DAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACpD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC;QAC/B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC;QACvC,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QACrC,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAI,IAAI,CAAC,OAAO,sBAAmB,EAAE,IAAI,CAAC,CAAC;IACnE,CAAC;IAED,wBAAwB;IACjB,wCAAc,GAArB,UAAsB,IAAuB,EAAE,QAAa;QAC1D,IAAM,IAAI,GAAuB,IAAI,6EAAkB,EAAE,CAAC;QAC1D,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC;QAC/B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAI,IAAI,CAAC,OAAO,8BAA2B,EAAE,IAAI,CAAC,CAAC;IAC3E,CAAC;IAED,wCAAwC;IACjC,8CAAoB,GAA3B,UAA4B,IAAe,EAAE,UAAkB,EAAE,cAAsB,EAAE,YAAiB;QAA1G,iBAUC;QATC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,iBAAiB,CAAC,mBAAmB,EAAE,YAAY,CAAC,CAAC,SAAS,CAAC,UAAC,CAAe;YACtG,YAAY;YACZ,IAAI,UAAU,KAAK,kBAAkB,EAAE;gBACrC,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC,QAAQ,CAAC,KAAI,CAAC,aAAa,CAAC,6BAA6B,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;aACjH;iBACI,IAAI,UAAU,KAAK,oBAAoB,EAAE,EAAE,aAAa;gBAC3D,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC,QAAQ,CAAC,KAAI,CAAC,aAAa,CAAC,6BAA6B,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;aAClH;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,mDAAmD;IAC5C,qDAA2B,GAAlC,UAAmC,cAAkC,EAAE,IAAe,EAAE,cAAsB;QAC5G,IAAI,CAAC,IAAI,EAAE;YACT,OAAO;SACR;QAED,IAAM,mBAAmB,GAAsB,IAAI,CAAC,iBAAiB,CAAC,mBAAmB,CAAC;QAC1F,WAAW;QACX,IAAM,IAAI,GAAe,IAAI,6DAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACpD,IAAI,CAAC,IAAI,GAAG,mBAAmB,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC;QAC9C,yBAAyB;QACzB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAI,IAAI,CAAC,OAAO,sBAAmB,EAAE,IAAI,CAAC,CAAC,SAAS,CAAC,UAAC,QAAa;YAChF,IAAI,oBAAoB,GAAG,EAAE,CAAC;YAC9B,IAAI,CAAC,CAAC,mBAAmB,CAAC,EAAE,CAAC,KAAK,+DAAK,CAAC,WAAW,EAAE;gBACnD,cAAc;gBACd,oBAAoB,GAAG,SAAO,QAAQ,CAAC,mCAAmC,sBAAe,QAAQ,CAAC,mCAAmC,YAAO,CAAC;aAC9I;iBACI;gBACH,kBAAkB;gBAClB,oBAAoB,GAAG,SAAO,QAAQ,CAAC,mCAAmC,sBAAe,QAAQ,CAAC,mCAAmC,YAAO,CAAC;aAC9I;YAED,gCAAgC;YAChC,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,cAAc,CAAC,WAAW,CAAC,eAAe,CAAC,MAAM,EAAE,GAAG,EAAE,EAAE;gBAChF,mCAAmC;gBACnC,KAAK,IAAI,MAAM,GAAG,CAAC,EAAE,MAAM,GAAG,cAAc,CAAC,WAAW,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,mBAAmB,CAAC,MAAM,EAAE,MAAM,EAAE,EAAE;oBAClH,+BAA+B;oBAC/B,KAAK,IAAI,OAAO,GAAG,CAAC,EAAE,OAAO,GAAG,cAAc,CAAC,WAAW,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC,aAAa,CAAC,MAAM,EAAE,OAAO,EAAE,EAAE;wBAC3I,qEAAqE;wBACrE,IAAI,cAAc,CAAC,WAAW,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,GAAG,KAAK,cAAc,EAAE;4BAC7H,wCAAwC;4BACxC,cAAc,CAAC,WAAW,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,KAAK,GAAG,oBAAoB,CAAC;yBACjI;qBACF;iBACF;aACF;QACH,CAAC,EAAE,UAAC,KAAU,IAAO,CAAC,CAAC,CAAC;IAC1B,CAAC;IAED,gDAAgD;IAChD,0DAAgC,GAAhC;QAAA,iBA0BC;QAzBC,OAAO,UAAC,OAAkB;YACxB,IAAM,6BAA6B,GAAG,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;YAC5E,IAAM,6BAA6B,GAAG,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;YAC5E,IAAM,mBAAmB,GAAsB,KAAI,CAAC,iBAAiB,CAAC,mBAAmB,CAAC;YAE1F,IAAI,UAAU,GAAG,CAAC,CAAC,CAAC,6BAA6B,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,OAAO;YAC1E,IAAI,CAAC,CAAC,mBAAmB,CAAC,EAAE,CAAC,KAAK,+DAAK,CAAC,WAAW,EAAE;gBACnD,UAAU,GAAG,CAAC,CAAC,CAAC,6BAA6B,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;aAC9D;YAED,IAAI,KAAK,GAAG,IAAI,CAAC;YAEjB,IAAI,6BAA6B,IAAI,6BAA6B,CAAC,KAAK,IAAI,6BAA6B,IAAI,6BAA6B,CAAC,KAAK,EAAE;gBAChJ,IAAM,OAAO,GAAG,mEAAgE,CAAC,CAAC,mBAAmB,CAAC,EAAE,CAAC,KAAK,+DAAK,CAAC,WAAW,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,QAAQ,YAAQ,CAAC;gBAC/J,uDAAuD;gBACvD,KAAK,GAAG,gIAAkB,CAAC,6BAA6B,CAAC,KAAK,EAAE,6BAA6B,CAAC,KAAK,EAAE,wBAAwB,EAAE,2BAA2B,EAAE,OAAO,CAAC,CAAC;gBACrK,IAAI,CAAC,KAAK,EAAE;oBACV,2BAA2B;oBAC3B,KAAK,GAAG,gIAAkB,CAAC,UAAU,CAAC,QAAQ,EAAE,EAAE,6BAA6B,CAAC,KAAK,EAAE,wBAAwB,EAAE,2BAA2B,EAAE,OAAO,CAAC,CAAC;iBACxJ;aACF;YAED,KAAI,CAAC,aAAa,CAAC,+BAA+B,CAAC,6BAA6B,EAAE,KAAK,EAAE,wBAAwB,CAAC,CAAC;YACnH,OAAO,KAAK,CAAC;QACf,CAAC,CAAC;IACJ,CAAC;IAED,kDAAkD;IAClD,wDAA8B,GAA9B;QAAA,iBAwBC;QAvBC,OAAO,UAAC,OAAkB;YACxB,IAAM,2BAA2B,GAAG,OAAO,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC;YACxE,IAAM,2BAA2B,GAAG,OAAO,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC;YACxE,IAAM,mBAAmB,GAAsB,KAAI,CAAC,iBAAiB,CAAC,mBAAmB,CAAC;YAE1F,IAAI,UAAU,GAAG,CAAC,CAAC,CAAC,2BAA2B,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,OAAO;YACxE,IAAI,CAAC,CAAC,mBAAmB,CAAC,EAAE,CAAC,KAAK,+DAAK,CAAC,WAAW,EAAE;gBACnD,UAAU,GAAG,CAAC,CAAC,CAAC,2BAA2B,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;aAC5D;YAED,IAAI,KAAK,GAAG,IAAI,CAAC;YACjB,IAAI,2BAA2B,IAAI,2BAA2B,CAAC,KAAK,IAAI,2BAA2B,IAAI,2BAA2B,CAAC,KAAK,EAAE;gBACxI,IAAM,OAAO,GAAG,oEAAiE,CAAC,CAAC,mBAAmB,CAAC,EAAE,CAAC,KAAK,+DAAK,CAAC,WAAW,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,QAAQ,YAAQ,CAAC;gBAChK,KAAK,GAAG,gIAAkB,CAAC,2BAA2B,CAAC,KAAK,EAAE,2BAA2B,CAAC,KAAK,EAAE,sBAAsB,EAAE,yBAAyB,EAAE,OAAO,CAAC,CAAC;gBAC7J,IAAI,CAAC,KAAK,EAAE;oBACV,2BAA2B;oBAC3B,KAAK,GAAG,gIAAkB,CAAC,UAAU,CAAC,QAAQ,EAAE,EAAE,2BAA2B,CAAC,KAAK,EAAE,sBAAsB,EAAE,yBAAyB,EAAE,OAAO,CAAC,CAAC;iBAClJ;aACF;YAED,KAAI,CAAC,aAAa,CAAC,+BAA+B,CAAC,2BAA2B,EAAE,KAAK,EAAE,sBAAsB,CAAC,CAAC;YAC/G,OAAO,KAAK,CAAC;QACf,CAAC,CAAC;IACJ,CAAC;IAED,sGAAsG;IACtG,oEAA0C,GAA1C;QAAA,iBAeC;QAdC,OAAO,UAAC,OAAkB;YACxB,IAAM,6BAA6B,GAAG,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;YAC5E,IAAM,2BAA2B,GAAG,OAAO,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC;YAExE,IAAI,KAAK,GAAG,IAAI,CAAC;YAEjB,IAAI,6BAA6B,IAAI,6BAA6B,CAAC,KAAK,IAAI,2BAA2B,IAAI,2BAA2B,CAAC,KAAK,EAAE;gBAC5I,IAAM,OAAO,GAAG,kGAAkG,CAAC;gBACnH,KAAK,GAAG,gIAAkB,CAAC,6BAA6B,CAAC,KAAK,EAAE,2BAA2B,CAAC,KAAK,EAAE,wBAAwB,EAAE,2BAA2B,EAAE,OAAO,CAAC,CAAC;aACpK;YAED,KAAI,CAAC,aAAa,CAAC,+BAA+B,CAAC,6BAA6B,EAAE,KAAK,EAAE,4DAA4D,CAAC,CAAC;YACvJ,OAAO,KAAK,CAAC;QACf,CAAC,CAAC;IACJ,CAAC;IAED,0GAA0G;IAC1G,oEAA0C,GAA1C;QAAA,iBAeC;QAdC,OAAO,UAAC,OAAkB;YACxB,IAAM,6BAA6B,GAAG,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;YAC5E,IAAM,2BAA2B,GAAG,OAAO,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC;YAExE,IAAI,KAAK,GAAG,IAAI,CAAC;YAEjB,IAAI,6BAA6B,IAAI,6BAA6B,CAAC,KAAK,IAAI,2BAA2B,IAAI,2BAA2B,CAAC,KAAK,EAAE;gBAC5I,IAAM,OAAO,GAAG,kGAAkG,CAAC;gBACnH,KAAK,GAAG,gIAAkB,CAAC,6BAA6B,CAAC,KAAK,EAAE,2BAA2B,CAAC,KAAK,EAAE,wBAAwB,EAAE,2BAA2B,EAAE,OAAO,CAAC,CAAC;aACpK;YAED,KAAI,CAAC,aAAa,CAAC,+BAA+B,CAAC,6BAA6B,EAAE,KAAK,EAAE,4DAA4D,CAAC,CAAC;YACvJ,OAAO,KAAK,CAAC;QACf,CAAC,CAAC;IACJ,CAAC;IAED,0DAA0D;IAC1D,qEAA2C,GAA3C;QAAA,iBAgCC;QA/BC,OAAO,UAAC,OAAkB;YACxB,IAAM,gBAAgB,GAAG,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;YAClD,IAAM,6CAA6C,GAAG,OAAO,CAAC,GAAG,CAAC,wCAAwC,CAAC,CAAC;YAC5G,IAAM,mBAAmB,GAAsB,KAAI,CAAC,iBAAiB,CAAC,mBAAmB,CAAC;YAE1F,IAAI,gBAAgB,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE;gBAC/C,OAAO,IAAI,CAAC;aACb;YAED,WAAW;YACX,IAAI,IAAI,GAAe,IAAI,6DAAU,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YACrD,IAAI,CAAC,IAAI,GAAG,mBAAmB,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC;YAE9C,aAAa;YACb,IAAM,GAAG,GAAG,KAAI,CAAC,KAAK,CAAC,IAAI,CAAI,KAAI,CAAC,OAAO,sBAAmB,EAAE,IAAI,CAAC,CAAC,IAAI,CACxE,0DAAG,CAAC,UAAC,QAAa;gBAChB,IAAI,KAAK,GAAG,IAAI,CAAC;gBACjB,IAAI,6CAA6C;uBAC5C,6CAA6C,CAAC,KAAK,IAAI,QAAQ,EAAE;oBACpE,KAAK,GAAG,gIAAkB,CAAC,6CAA6C,CAAC,KAAK,EAC5E,QAAQ,CAAC,mCAAmC,CAAC,QAAQ,EAAE,EACvD,qCAAqC,EACrC,yCAAyC,EACzC,4FAA0F,QAAQ,CAAC,QAAQ,cAAS,QAAQ,CAAC,mCAAmC,MAAG,CAAC,CAAC;oBACvK,KAAI,CAAC,aAAa,CAAC,+BAA+B,CAAC,6CAA6C,EAAE,KAAK,EAAE,qCAAqC,CAAC,CAAC;iBACjJ;gBACD,OAAO,KAAK,CAAC;YACf,CAAC,CAAC,CACH,CAAC;YACF,OAAO,GAAG,CAAC;QACb,CAAC,CAAC;IACJ,CAAC;IAED,0DAA0D;IAC1D,qEAA2C,GAA3C;QAAA,iBAiCC;QAhCC,OAAO,UAAC,OAAkB;YACxB,IAAM,gBAAgB,GAAG,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;YAClD,IAAM,6CAA6C,GAAG,OAAO,CAAC,GAAG,CAAC,wCAAwC,CAAC,CAAC;YAC5G,IAAM,mBAAmB,GAAsB,KAAI,CAAC,iBAAiB,CAAC,mBAAmB,CAAC;YAE1F,IAAI,gBAAgB,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE;gBAC/C,OAAO,IAAI,CAAC;aACb;YAED,WAAW;YACX,IAAI,IAAI,GAAe,IAAI,6DAAU,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YACrD,IAAI,CAAC,IAAI,GAAG,mBAAmB,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC;YAE9C,aAAa;YACb,IAAM,GAAG,GAAG,KAAI,CAAC,KAAK,CAAC,IAAI,CAAI,KAAI,CAAC,OAAO,sBAAmB,EAAE,IAAI,CAAC,CAAC,IAAI,CACxE,0DAAG,CAAC,UAAC,QAAa;gBAChB,IAAI,KAAK,GAAG,IAAI,CAAC;gBACjB,IAAI,6CAA6C,IAAI,6CAA6C,CAAC,KAAK,IAAI,QAAQ,IAAI,QAAQ,CAAC,mCAAmC,EAAE;oBACpK,KAAK,GAAG,kIAAoB,CAAC,6CAA6C,CAAC,KAAK,EAC9E,QAAQ,CAAC,mCAAmC,CAAC,QAAQ,EAAE,EACvD,qCAAqC,EACrC,yCAAyC,EACzC,4FAA0F,QAAQ,CAAC,QAAQ,cAAS,QAAQ,CAAC,mCAAmC,MAAG,CAAC,CAAC;oBACvK,KAAI,CAAC,aAAa,CAAC,+BAA+B,CAAC,6CAA6C,EAC9F,KAAK,EACL,qCAAqC,CAAC,CAAC;iBAC1C;gBACD,OAAO,KAAK,CAAC;YACf,CAAC,CAAC,CACH,CAAC;YACF,OAAO,GAAG,CAAC;QACb,CAAC,CAAC;IACJ,CAAC;kFAhSU,eAAe;sGAAf,eAAe,WAAf,eAAe,mBAFd,MAAM;0BAtBpB;CAyTC;AAjS2B;6FAAf,eAAe;cAH3B,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;;;;;;ACvBD;AAAA;AAAA;AAAkD;;AAElD;IAOE;IAAgB,CAAC;IAEjB,kCAAQ,GAAR;IACA,CAAC;kFALU,eAAe;mGAAf,eAAe;YCP5B,yEACI;YAAA,yEACI;YAAA,oEAAqC;YACrC,yEACI;YAAA,2FACJ;YAAA,4DAAM;YACN,oEAAkC;YACtC,4DAAM;YACV,4DAAM;;0BDRN;CAcC;AAP2B;6FAAf,eAAe;cAL3B,uDAAS;eAAC;gBACT,QAAQ,EAAE,YAAY;gBACtB,WAAW,EAAE,yBAAyB;gBACtC,SAAS,EAAE,CAAC,wBAAwB,CAAC;aACtC;;;;;;;;;;;;;;AEND;AAAA;AAAA;IAuBI,oBAAY,OAsBN;QAtBM,sCAsBN;QACF,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;QACzB,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;QACjC,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;QACjC,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC,aAAa,CAAC;QAC3C,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC;QACnC,IAAI,CAAC,kBAAkB,GAAG,OAAO,CAAC,kBAAkB,CAAC;QACrD,IAAI,CAAC,wBAAwB,GAAG,OAAO,CAAC,wBAAwB,CAAC;QACjE,IAAI,CAAC,eAAe,GAAG,OAAO,CAAC,eAAe,CAAC;QAC/C,IAAI,CAAC,qBAAqB,GAAG,OAAO,CAAC,qBAAqB,CAAC;QAC3D,IAAI,CAAC,oBAAoB,GAAG,OAAO,CAAC,oBAAoB,CAAC;QACzD,IAAI,CAAC,oBAAoB,GAAG,OAAO,CAAC,oBAAoB,CAAC;QACzD,IAAI,CAAC,gBAAgB,GAAG,OAAO,CAAC,gBAAgB,CAAC;QACjD,IAAI,CAAC,sBAAsB,GAAG,OAAO,CAAC,sBAAsB,CAAC;QAC7D,IAAI,CAAC,sBAAsB,GAAG,OAAO,CAAC,sBAAsB,CAAC;QAC7D,IAAI,CAAC,sBAAsB,GAAG,OAAO,CAAC,sBAAsB,CAAC;QAC7D,IAAI,CAAC,kBAAkB,GAAG,OAAO,CAAC,kBAAkB,CAAC;QACrD,IAAI,CAAC,wBAAwB,GAAG,OAAO,CAAC,wBAAwB,CAAC;QACjE,IAAI,CAAC,sBAAsB,GAAG,OAAO,CAAC,sBAAsB,CAAC;QAC7D,IAAI,CAAC,sCAAsC,GAAG,OAAO,CAAC,sCAAsC,CAAC;QAC7F,IAAI,CAAC,sCAAsC,GAAG,OAAO,CAAC,sCAAsC,CAAC;QAC7F,IAAI,CAAC,cAAc,GAAG,OAAO,CAAC,cAAc,CAAC;IACjD,CAAC;IACL,iBAAC;AAAD,CAAC;;;;;;;;;;;;;;ACpED;AAAA;AAAA;IAII,4BAAY,OAIN;QAJM,sCAIN;QACF,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;QACzB,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;IACrC,CAAC;IACL,yBAAC;AAAD,CAAC","file":"ar-wr-calc-ar-wr-calc-module.js","sourcesContent":["// core imports\r\nimport { NgModule } from \"@angular/core\";\r\nimport { Routes, RouterModule } from \"@angular/router\";\r\nimport { CalculatorTypes } from '../shared/helpers/constants';\r\n\r\n// application imports\r\nimport { ArWrCalcComponent } from \"./ar-wr-calc.component\";\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '', component: ArWrCalcComponent, children: [\r\n            {\r\n                path: 'pressin',\r\n                data: {\r\n                    calculatorType: CalculatorTypes.WrArPressIn\r\n                },\r\n                loadChildren: () => import('./ar-wr-press-in/ar-wr-press-in.module').then(m => m.ArWrPressInModule)\r\n            },\r\n            {\r\n                path: 'floating',\r\n                data: {\r\n                    calculatorType: CalculatorTypes.WrArFloating\r\n                },\r\n                loadChildren: () => import('./ar-wr-floating/ar-wr-floating.module').then(m => m.ArWrFloatingModule)\r\n            }\r\n        ]\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [\r\n        RouterModule.forChild(routes)\r\n    ],\r\n    exports: [RouterModule]\r\n})\r\nexport class ArWrCalcRoutingModule { }\r\n","// core imports\nimport { Component, OnInit, OnDestroy, ViewEncapsulation } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Router, ActivatedRoute, NavigationEnd } from \"@angular/router\";\nimport { FormGroup } from '@angular/forms';\n\n// third party imports\nimport { Subscription } from 'rxjs';\nimport { filter } from \"rxjs/operators\";\n\n// application imports\nimport { ControlType, Units } from '../shared/helpers/constants';\nimport { BaseModel } from \"../models/base.model\";\nimport { FormControlModel } from '../models/form-control.model';\nimport { ArWrCalcService } from \"./ar-wr-calc.service\";\nimport { TabModel } from '../models/tab.model';\nimport { SwitchButtonModel } from '../models/switch-button.model';\nimport { ControlBaseService } from \"../shared/services/control-base.service\";\nimport { ArWrDropDownDataService } from '../shared/services/ar-wr-drop-down-data.service';\nimport { UnitButtonService } from \"../shared/components/unit-button/unit-button.service\";\nimport { TemperatureButtonService } from \"../shared/components/temperature-button/temperature-button.service\";\nimport { Temperature } from '../shared/helpers/constants';\nimport { HelperService } from \"../shared/services/helper.service\";\n\n@Component({\n  selector: 'app-ar-wr-calc',\n  templateUrl: './ar-wr-calc.component.html',\n  styleUrls: ['./ar-wr-calc.component.css'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class ArWrCalcComponent implements OnInit, OnDestroy {\n\n  readonly O_RING_CALCULATOR_TYPE_FORM_CONTROL_KEY = \"WrAr_CALCULATOR_TYPE\";\n  previuosSelectedCalculatorId = 0;\n  currrentSelectedCalculatorId = 0;\n  isJSONConfigFetched = false;\n  jsonConfiguration: BaseModel;\n  flattenedFormControls: FormControlModel[] = [];\n  controlType = ControlType;\n  wrArTabs: TabModel[] = [\n    { linkLabel: \"Press-In\", rootModuleRoute: \"pressin\", childrenModuleRoute: \"/wrar/pressin\", pathExactmatch: true },\n    { linkLabel: \"Floating\", rootModuleRoute: \"floating\", childrenModuleRoute: \"/wrar/floating\", pathExactmatch: true }];\n\n  // calculator dropdown formgroup\n  calculatorTypeDDLFormGroup: FormGroup;\n  calculatorTypeDDl: FormControlModel[];\n  // currentSelectedCalculator: FormControlModel;\n  defaultMeasure: SwitchButtonModel = null;\n  // subscription\n  activatedRouteSubscription: Subscription;\n\n  constructor(\n    private readonly arWrCalcService: ArWrCalcService,\n    private readonly router: Router,\n    private readonly controlBaseService: ControlBaseService,\n    private readonly activatedRoute: ActivatedRoute,\n    private readonly arWrDropDownDataService: ArWrDropDownDataService,\n    private readonly unitButtonService: UnitButtonService,\n    private readonly temperatureButtonService: TemperatureButtonService,\n    private readonly helperService: HelperService\n  ) {\n    // get route data\n    this.activatedRouteSubscription = this.router.events.pipe(\n      filter(event => event instanceof NavigationEnd)\n    ).subscribe(() => {\n      let calculatorId = 0;\n      if (this.activatedRoute.snapshot.firstChild && this.activatedRoute.snapshot.firstChild.data) {\n        calculatorId = this.activatedRoute.snapshot.firstChild.data.calculatorType;\n      }\n\n      if (calculatorId) {\n        this.previuosSelectedCalculatorId = this.currrentSelectedCalculatorId;\n        this.currrentSelectedCalculatorId = calculatorId;\n        this.defaultMeasure = this.helperService.setDefaultMeasure();\n      }\n    });\n  }\n\n  // component destroy handler\n  ngOnDestroy(): void {\n    if (this.activatedRouteSubscription) {\n      this.activatedRouteSubscription.unsubscribe();\n    }\n  }\n\n  ngOnInit(): void {\n    this.initializeComponent();\n    this.getDropdownItems();\n    this.setInitialTemperature();\n  }\n\n  initializeComponent() {\n    // get JSON config from server\n    this.arWrCalcService.getArWrPressInCalcConfig().subscribe(\n      (resp) => {\n        this.isJSONConfigFetched = true;\n        this.jsonConfiguration = resp as BaseModel;\n        // bind calculator type ddl \n        // // const calculatorTypes: FormControlModel[] = [...this.getCalculatorTypeArray(this.O_RING_CALCULATOR_TYPE_FORM_CONTROL_KEY)];\n        // // this.calculatorTypeDDl = calculatorTypes;\n        // create form group for calculator dropdown - to handle the dropdown model binding using reactiveform model\n        const calculatorTypeDDLGroup: FormControlModel[] = [];\n        // below calculatorTypeDDLGroup.push also sets the default dropdown selection\n        // create form groupd with initial value of control \"calculatorTypes[0]\"\n        // if (this.currrentSelectedCalculatorId && this.currrentSelectedCalculatorId >= 0) {\n\n        // get calculator index by calculator id\n        //   const getCalcuilatorindex = calculatorTypes.findIndex((calc: FormControlModel) => {\n        //     if (calc.form_control_id === this.currrentSelectedCalculatorId) {\n        //       return calc;\n        //     }\n        //   });\n\n        //   // set selected calcalcutor in calculator dropdown\n        //   if (getCalcuilatorindex) {\n        //     calculatorTypeDDLGroup.push(calculatorTypes[getCalcuilatorindex]);\n        //   }\n        //   else {\n        //     // set selected calcalcutor in calculator dropdown\n        //     calculatorTypeDDLGroup.push(calculatorTypes[0]);\n        //   }\n        // }\n        // else {\n        //   // set selected calcalcutor in calculator dropdown\n        //   calculatorTypeDDLGroup.push(calculatorTypes[0]);\n        // }\n\n        // create form group with default option selection\n        // this.createCalculatorTypeFormGroup(calculatorTypeDDLGroup);\n        // calculator change\n        // send o-ring config value to subscribers\n        this.arWrCalcService.sendArWrConfigValue(this.jsonConfiguration);\n      },\n      (error: HttpErrorResponse) => {\n        throw new Error(error.message);\n      }\n    );\n  }\n\n  // get material choice\n  getDropdownItems() {\n    this.arWrDropDownDataService.getDropdownItems().subscribe((resp: any[]) => {\n      this.arWrDropDownDataService.sendDropdownItems(resp);\n    });\n  }\n\n  // set initial temperature for currently selected Unit => Imperial / Metric\n  setInitialTemperature() {\n    const currentUnit: SwitchButtonModel = this.unitButtonService.getCurrentUnitValue;\n    const currentTemp: SwitchButtonModel = this.temperatureButtonService.getCurrentTemperatureValue;\n    if (currentUnit && currentUnit.id > 0 && currentUnit.id === Units.INCH) {\n      if (currentTemp && currentTemp.id > 0 && currentTemp.id !== Temperature.FAHRENHEIT) {\n        this.helperService.setAndSendTemperatureManually(Temperature.FAHRENHEIT);\n      }\n    }\n    else if (currentUnit && currentUnit.id > 0 && currentUnit.id === Units.MILLI_METER) {\n      if (currentTemp && currentTemp.id > 0 && currentTemp.id !== Temperature.CELCIUS) {\n        this.helperService.setAndSendTemperatureManually(Temperature.CELCIUS);\n      }\n    }\n    else {\n      this.helperService.setAndSendTemperatureManually(Temperature.CELCIUS);\n    }\n  }\n}\n","<app-header></app-header>\n<section class=\"content\">\n    <section class=\"container p-0\">\n        <div class=\"clearfix\"></div>\n        <app-tab-nav class=\"ignorePdf\" [tabMenu]=\"wrArTabs\"></app-tab-nav>\n        <div class=\"container\">\n            <div class=\"row ignorePdf\">\n                <div class=\"col-12 col-sm-12 col-md-9 col-lg-9 col-xl-9 p-1\">\n                    <p class=\"info-tab pt-0\">Use this tool for designing Greene Tweed’s composites wear components.\n                        Engineer, sales, channel\n                        partners etc. can use this tool and user should input data in all the required field to get the\n                        final dimensions and design notes. Please contact Greene Tweed engineering for help or advice if\n                        required as some applications are difficult to optimize the design.</p>\n                </div>\n                <div class=\"col-12 col-sm-12 col-md-3 col-lg-3 col-xl-3 p-1\">\n                    <div class=\"row\">\n                        <div class=\"col-12 col-sm-12 col-md-12 col-lg-12 col-xl-12 p-0\">\n                            <div class=\"row\">\n                                <div class=\"col-12 col-sm-12 col-md-6 col-lg-6 col-xl-6 p-0\">\n                                    <div class=\"pull-left unit-section__label\">Measure:</div>\n                                </div>\n                                <div class=\"col-12 col-sm-12 col-md-6 col-lg-6 col-xl-6 p-0\">\n                                    <measure-button [defaultMeasure]=\"defaultMeasure\"></measure-button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"row\">\n                <div class=\"col-12 col-sm-12 col-md-12 col-lg-12 col-xl-12 p-0\">\n                    <router-outlet></router-outlet>\n                </div>\n            </div>\n        </div>\n    </section>\n</section>","// core imports\n// o-ring tool calculators module\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\n\n// application imports\nimport { SharedModule } from \"../shared/shared.module\";\nimport { DynamicFormModule } from \"../dynamic-form/dynamic-form.module\";\nimport { HeaderComponent } from \"./header/header.component\";\nimport { ArWrCalcRoutingModule } from \"./ar-wr-calc-routing.module\";\nimport { ArWrCalcComponent } from './ar-wr-calc.component';\nimport { ArWrCalcService } from \"./ar-wr-calc.service\";\n\n@NgModule({\n  declarations: [\n    ArWrCalcComponent,\n    HeaderComponent\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    ArWrCalcRoutingModule,\n    SharedModule,\n    DynamicFormModule\n  ],\n  providers: [ArWrCalcService]\n})\nexport class ArWrCalcModule { }\n","// core imports\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from \"@angular/common/http\";\nimport { BehaviorSubject } from 'rxjs';\n\n// application imports\nimport { AppConfig } from '../app.config.service';\nimport { BaseModel } from \"../models/base.model\";\nimport { AsyncValidatorFn, FormGroup, ValidationErrors, ValidatorFn } from '@angular/forms';\nimport { SwitchButtonModel } from '../models/switch-button.model';\nimport { PressInDTO } from '../models/pressInDTO';\nimport { CalculatorTypes, Units } from '../shared/helpers/constants';\nimport { WrArMaterialCteDTO } from '../models/wrArMaterialCteDTO';\nimport { WrArMaterial } from '../models/wrArMaterial.model';\nimport { UnitButtonService } from \"../shared/components/unit-button/unit-button.service\";\nimport { HelperService } from \"../shared/services/helper.service\";\nimport { largerThanValidation, lessThanValidation } from '../shared/directives/custom-validations/comparison-validation.directive';\nimport { Observable } from 'rxjs/internal/Observable';\nimport { map } from 'rxjs/operators';\nimport { TwoColumnFormModel } from '../models/two_column_form.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ArWrCalcService {\n  /* Private Properties   */\n\n  private readonly baseUrl = AppConfig.settings.env.api;\n\n  // oRing config state management subject and observable\n  private readonly oRingConfigSubject: BehaviorSubject<BaseModel> = new BehaviorSubject<BaseModel>(null);\n  // Expose the observable part of the arWrConfig subject (read only stream)\n  readonly arWrConfig$ = this.oRingConfigSubject.asObservable();\n\n  // service state management property \"arWrConfig\"\n  // the getter will return the last value emitted oRingConfigSubject subject\n  private get arWrConfig(): BaseModel {\n    return this.oRingConfigSubject.getValue();\n  }\n\n  // assigning a value to this.arWrConfig will push it onto the observable \n  // and down to all of its subsribers (ex: this.arWrConfig = {})\n  private set arWrConfig(val: BaseModel) {\n    this.oRingConfigSubject.next(val);\n  }\n\n  /* Public Properties   */\n\n  // get config value directly using behaviour subject\n  public get getCurrentArWrConfigValue(): BaseModel {\n    return this.arWrConfig;\n  }\n\n  /*  Constructor */\n  constructor(\n    private readonly _http: HttpClient,\n    private readonly unitButtonService: UnitButtonService,\n    private readonly helperService: HelperService\n  ) {\n  }\n\n  // Methods/functions\n  // send oring config\n  // assigning a value to this.arWrConfig will push it onto the observable \n  // and down to all of its subsribers (ex: this.arWrConfig = {})\n  sendArWrConfigValue(val: BaseModel) {\n    this.arWrConfig = val;\n  }\n\n  /*  Public Methods   */\n\n  // get o-ring config from server\n  getArWrPressInCalcConfig() {\n    return this._http.get(`${this.baseUrl}wrar/getjsonconfig`);\n  }\n\n  public getInterference(form: FormGroup, unit: SwitchButtonModel, unitTemp: SwitchButtonModel) {\n    const body: PressInDTO = new PressInDTO(form.value);\n    body.unit = unit.id.toString();\n    body.unitTemp = unitTemp.id.toString();\n    return this._http.post(`${this.baseUrl}wrar/getInterference`, body);\n  }\n\n  public getClearance(form: FormGroup, unit: SwitchButtonModel, unitTemp: SwitchButtonModel, calculatorType: number = CalculatorTypes.WrArPressIn) {\n    const body: PressInDTO = new PressInDTO(form.value);\n    body.unit = unit.id.toString();\n    body.unitTemp = unitTemp.id.toString();\n    body.calculatorType = calculatorType;\n    return this._http.post(`${this.baseUrl}wrar/getClearance`, body);\n  }\n\n  // get material cte data\n  public getMaterialCTE(unit: SwitchButtonModel, material: any) {\n    const body: WrArMaterialCteDTO = new WrArMaterialCteDTO();\n    body.unit = unit.id.toString();\n    body.material = material;\n    return this._http.post(`${this.baseUrl}wrar/getCTEMaterialDetail`, body);\n  }\n\n  // get and set rotor and stator CTE only\n  public getAndSetMaterialCTE(form: FormGroup, controlKey: string, bindControlKey: string, controlValue: any) {\n    this.getMaterialCTE(this.unitButtonService.getCurrentUnitValue, controlValue).subscribe((x: WrArMaterial) => {\n      // rotor CTE\n      if (controlKey === \"rotatingMaterial\") {\n        form.controls[bindControlKey].setValue(this.helperService.convertFromNegetivePowerOfSix(x.rotorCTE).toFixed(2));\n      }\n      else if (controlKey === \"stationaryMaterial\") { // stator CTE\n        form.controls[bindControlKey].setValue(this.helperService.convertFromNegetivePowerOfSix(x.statorCTE).toFixed(2));\n      }\n    });\n  }\n\n  // get and set composite material temperature range\n  public getSetCompositeMaterialData(calculatorData: TwoColumnFormModel, form: FormGroup, bindControlKey: string) {\n    if (!form) {\n      return;\n    }\n\n    const currentSelectedUnit: SwitchButtonModel = this.unitButtonService.getCurrentUnitValue;\n    // call API\n    const body: PressInDTO = new PressInDTO(form.value);\n    body.unit = currentSelectedUnit.id.toString();\n    // API call and subscribe\n    this._http.post(`${this.baseUrl}wrar/getMatlCheck`, body).subscribe((response: any) => {\n      let temperatureRangeData = \"\";\n      if ((+currentSelectedUnit.id) === Units.MILLI_METER) {\n        // Metric / MM\n        temperatureRangeData = `Min ${response.serviceStorageTemperatureAmbientMin}\\xB0C / Max ${response.serviceStorageTemperatureAmbientMax}\\xB0C`;\n      }\n      else {\n        // Imperial / Inch\n        temperatureRangeData = `Min ${response.serviceStorageTemperatureAmbientMin}\\xB0F / Max ${response.serviceStorageTemperatureAmbientMax}\\xB0F`;\n      }\n\n      // iterate over left column rows\n      for (let row = 0; row < calculatorData.left_column.form_layout_row.length; row++) {\n        // iterate over left column columns\n        for (let column = 0; column < calculatorData.left_column.form_layout_row[row].form_layout_columns.length; column++) {\n          // iterate over column controls\n          for (let control = 0; control < calculatorData.left_column.form_layout_row[row].form_layout_columns[column].form_controls.length; control++) {\n            // check control sub-type is unitLabel and update the label and value\n            if (calculatorData.left_column.form_layout_row[row].form_layout_columns[column].form_controls[control].key === bindControlKey) {\n              // set display label value              \n              calculatorData.left_column.form_layout_row[row].form_layout_columns[column].form_controls[control].label = temperatureRangeData;\n            }\n          }\n        }\n      }\n    }, (error: any) => { });\n  }\n\n  // Function stationary element id max validation\n  stationaryElementIDMaxValidation(): ValidatorFn {\n    return (control: FormGroup): ValidationErrors | null => {\n      const stationaryElementIDMinControl = control.get('stationaryElementIDMin');\n      const stationaryElementIDMaxControl = control.get('stationaryElementIDMax');\n      const currentSelectedUnit: SwitchButtonModel = this.unitButtonService.getCurrentUnitValue;\n\n      let maxAllowed = ((+stationaryElementIDMinControl.value) + 0.005); // Inch\n      if ((+currentSelectedUnit.id) === Units.MILLI_METER) {\n        maxAllowed = ((+stationaryElementIDMinControl.value) + 0.127)\n      }\n\n      let error = null;\n\n      if (stationaryElementIDMinControl && stationaryElementIDMinControl.value && stationaryElementIDMaxControl && stationaryElementIDMaxControl.value) {\n        const message = `Value should be equal to minimum stationary bore ID or up to ${(+currentSelectedUnit.id) === Units.MILLI_METER ? \".127 mm\" : \".005''\"} over.`;\n        // validate = max value should not be less than the min\n        error = lessThanValidation(stationaryElementIDMaxControl.value, stationaryElementIDMinControl.value, \"stationaryElementIDMax\", \"Stationary Element ID Max\", message);\n        if (!error) {\n          // validate maximum allowed\n          error = lessThanValidation(maxAllowed.toString(), stationaryElementIDMaxControl.value, \"stationaryElementIDMax\", \"Stationary Element ID Max\", message);\n        }\n      }\n\n      this.helperService.setValidationErrorToFormControl(stationaryElementIDMaxControl, error, \"stationaryElementIDMax\");\n      return error;\n    };\n  }\n\n  // Function rotating element od max max validation\n  rotatingElementODMaxValidation(): ValidatorFn {\n    return (control: FormGroup): ValidationErrors | null => {\n      const rotatingElementODMinControl = control.get('rotatingElementODMin');\n      const rotatingElementODMaxControl = control.get('rotatingElementODMax');\n      const currentSelectedUnit: SwitchButtonModel = this.unitButtonService.getCurrentUnitValue;\n\n      let maxAllowed = ((+rotatingElementODMinControl.value) + 0.005); // Inch\n      if ((+currentSelectedUnit.id) === Units.MILLI_METER) {\n        maxAllowed = ((+rotatingElementODMinControl.value) + 0.127)\n      }\n\n      let error = null;\n      if (rotatingElementODMinControl && rotatingElementODMinControl.value && rotatingElementODMaxControl && rotatingElementODMaxControl.value) {\n        const message = `Value should be equal to minimum rotating element OD or up to ${(+currentSelectedUnit.id) === Units.MILLI_METER ? \".127 mm\" : \".005''\"} over.`;\n        error = lessThanValidation(rotatingElementODMaxControl.value, rotatingElementODMinControl.value, \"rotatingElementODMax\", \"Rotating Element OD Max\", message);\n        if (!error) {\n          // validate maximum allowed\n          error = lessThanValidation(maxAllowed.toString(), rotatingElementODMaxControl.value, \"rotatingElementODMax\", \"Rotating Element OD Max\", message);\n        }\n      }\n\n      this.helperService.setValidationErrorToFormControl(rotatingElementODMaxControl, error, \"rotatingElementODMax\");\n      return error;\n    };\n  }\n\n  // statioary element ID Minimum dimensions should not be lesser the rotating element OD Min dimensions\n  stationaryMinLessThanRotatingMinValidation(): ValidatorFn {\n    return (control: FormGroup): ValidationErrors | null => {\n      const stationaryElementIDMinControl = control.get('stationaryElementIDMin');\n      const rotatingElementODMinControl = control.get('rotatingElementODMin');\n\n      let error = null;\n\n      if (stationaryElementIDMinControl && stationaryElementIDMinControl.value && rotatingElementODMinControl && rotatingElementODMinControl.value) {\n        const message = `Stationary element minimum value should be equal to minimum rotating element od vaule or larger.`;\n        error = lessThanValidation(stationaryElementIDMinControl.value, rotatingElementODMinControl.value, \"stationaryElementIDMin\", \"Stationary Element ID Min\", message);\n      }\n\n      this.helperService.setValidationErrorToFormControl(stationaryElementIDMinControl, error, \"stationaryElementIDMinShouldBeEqualOrLargerThanRotatingMin\");\n      return error;\n    };\n  }\n\n  // statioary element ID Maximum dimensions should not be lesser the rotating element OD Maximum dimensions\n  stationaryMaxLessThanRotatingMaxValidation(): ValidatorFn {\n    return (control: FormGroup): ValidationErrors | null => {\n      const stationaryElementIDMaxControl = control.get('stationaryElementIDMax');\n      const rotatingElementODMaxControl = control.get('rotatingElementODMax');\n\n      let error = null;\n\n      if (stationaryElementIDMaxControl && stationaryElementIDMaxControl.value && rotatingElementODMaxControl && rotatingElementODMaxControl.value) {\n        const message = `Stationary element maximum value should be equal to maximum rotating element od value or larger.`;\n        error = lessThanValidation(stationaryElementIDMaxControl.value, rotatingElementODMaxControl.value, \"stationaryElementIDMax\", \"Stationary Element ID Max\", message);\n      }\n\n      this.helperService.setValidationErrorToFormControl(stationaryElementIDMaxControl, error, \"stationaryElementIDMaxShouldBeEqualOrLargerThanRotatingMax\");\n      return error;\n    };\n  }\n\n  // Async Function  serviceStorageTemperatureMin validation\n  asyncServiceStorageTemperatureMinValidation(): AsyncValidatorFn {\n    return (control: FormGroup): Promise<ValidationErrors | null> | Observable<ValidationErrors | null> => {\n      const compositeControl = control.get('composite');\n      const serviceStorageTemperatureAmbient75FMinControl = control.get('serviceStorageTemperatureAmbient75FMin');\n      const currentSelectedUnit: SwitchButtonModel = this.unitButtonService.getCurrentUnitValue;\n\n      if (compositeControl && !compositeControl.value) {\n        return null;\n      }\n\n      // call API\n      let body: PressInDTO = new PressInDTO(control.value);\n      body.unit = currentSelectedUnit.id.toString();\n\n      // observable\n      const obs = this._http.post(`${this.baseUrl}wrar/getMatlCheck`, body).pipe(\n        map((response: any) => {\n          let error = null;\n          if (serviceStorageTemperatureAmbient75FMinControl\n            && serviceStorageTemperatureAmbient75FMinControl.value && response) {\n            error = lessThanValidation(serviceStorageTemperatureAmbient75FMinControl.value,\n              response.serviceStorageTemperatureAmbientMin.toString(),\n              \"serviceStorageTemperatureAmbientMin\",\n              \"Service Storage Temperature Ambient Min\",\n              `Minimum allowed value of \\\"Service / Storage Temperature\\\" for the selected material \\\"${response.matlName}\\\" is ${response.serviceStorageTemperatureAmbientMin}.`);\n            this.helperService.setValidationErrorToFormControl(serviceStorageTemperatureAmbient75FMinControl, error, \"serviceStorageTemperatureAmbientMin\");\n          }\n          return error;\n        })\n      );\n      return obs;\n    };\n  }\n\n  // Async Function  serviceStorageTemperatureMax validation\n  asyncServiceStorageTemperatureMaxValidation(): AsyncValidatorFn {\n    return (control: FormGroup): Promise<ValidationErrors | null> | Observable<ValidationErrors | null> => {\n      const compositeControl = control.get('composite');\n      const serviceStorageTemperatureAmbient75FMaxControl = control.get('serviceStorageTemperatureAmbient75FMax');\n      const currentSelectedUnit: SwitchButtonModel = this.unitButtonService.getCurrentUnitValue;\n\n      if (compositeControl && !compositeControl.value) {\n        return null;\n      }\n\n      // call API\n      let body: PressInDTO = new PressInDTO(control.value);\n      body.unit = currentSelectedUnit.id.toString();\n\n      // observable\n      const obs = this._http.post(`${this.baseUrl}wrar/getMatlCheck`, body).pipe(\n        map((response: any) => {\n          let error = null;\n          if (serviceStorageTemperatureAmbient75FMaxControl && serviceStorageTemperatureAmbient75FMaxControl.value && response && response.serviceStorageTemperatureAmbientMax) {\n            error = largerThanValidation(serviceStorageTemperatureAmbient75FMaxControl.value,\n              response.serviceStorageTemperatureAmbientMax.toString(),\n              \"serviceStorageTemperatureAmbientMax\",\n              \"Service Storage Temperature Ambient Max\",\n              `Maximum allowed value of \\\"Service / Storage Temperature\\\" for the selected material \\\"${response.matlName}\\\" is ${response.serviceStorageTemperatureAmbientMax}.`);\n            this.helperService.setValidationErrorToFormControl(serviceStorageTemperatureAmbient75FMaxControl,\n              error,\n              \"serviceStorageTemperatureAmbientMax\");\n          }\n          return error;\n        })\n      );\n      return obs;\n    };\n  }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.css']\n})\nexport class HeaderComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"gt-banner\">\n    <div class=\"container\">\n        <div class=\"gt-header-graphic\"></div>\n        <div class=\"heading\">\n            WR® / AR® Calculator\n        </div>\n        <div class=\"gt-header-logo\"></div>\n    </div>\n</div>","export class PressInDTO {\r\n    unit: string;\r\n    unitTemp: string;\r\n    pumpType: any;\r\n    componentType: any;\r\n    composite: any;\r\n    interferenceTarget: any;\r\n    customInterferenceTarget: any;\r\n    clearanceTarget: any;\r\n    customClearanceTarget: any;\r\n    rotatingElementODMin: any;\r\n    rotatingElementODMax: any;\r\n    rotatingMaterial: any;\r\n    customRotatingMaterial: any;\r\n    stationaryElementIDMin: any;\r\n    stationaryElementIDMax: any;\r\n    stationaryMaterial: any;\r\n    customStationaryMaterial: any;\r\n    stationaryBoreDepthMin: any;\r\n    serviceStorageTemperatureAmbient75FMin: any;\r\n    serviceStorageTemperatureAmbient75FMax: any;\r\n    calculatorType: number;\r\n\r\n    constructor(options: {\r\n        unit?: string,\r\n        unitTemp?: string,\r\n        pumpType?: any,\r\n        componentType?: any,\r\n        composite?: any,\r\n        interferenceTarget?: any,\r\n        customInterferenceTarget?: any,\r\n        clearanceTarget?: any,\r\n        customClearanceTarget?: any,\r\n        rotatingElementODMin?: any,\r\n        rotatingElementODMax?: any,\r\n        rotatingMaterial?: any,\r\n        customRotatingMaterial?: any,\r\n        stationaryElementIDMin?: any,\r\n        stationaryElementIDMax?: any,\r\n        stationaryMaterial?: any,\r\n        customStationaryMaterial?: any,\r\n        stationaryBoreDepthMin?: any,\r\n        serviceStorageTemperatureAmbient75FMin?: any,\r\n        serviceStorageTemperatureAmbient75FMax?: any,\r\n        calculatorType?: number\r\n    } = {}) {\r\n        this.unit = options.unit;\r\n        this.unitTemp = options.unitTemp;\r\n        this.pumpType = options.pumpType;\r\n        this.componentType = options.componentType;\r\n        this.composite = options.composite;\r\n        this.interferenceTarget = options.interferenceTarget;\r\n        this.customInterferenceTarget = options.customInterferenceTarget;\r\n        this.clearanceTarget = options.clearanceTarget;\r\n        this.customClearanceTarget = options.customClearanceTarget;\r\n        this.rotatingElementODMin = options.rotatingElementODMin;\r\n        this.rotatingElementODMax = options.rotatingElementODMax;\r\n        this.rotatingMaterial = options.rotatingMaterial;\r\n        this.customRotatingMaterial = options.customRotatingMaterial;\r\n        this.stationaryElementIDMin = options.stationaryElementIDMin;\r\n        this.stationaryElementIDMax = options.stationaryElementIDMax;\r\n        this.stationaryMaterial = options.stationaryMaterial;\r\n        this.customStationaryMaterial = options.customStationaryMaterial;\r\n        this.stationaryBoreDepthMin = options.stationaryBoreDepthMin;\r\n        this.serviceStorageTemperatureAmbient75FMin = options.serviceStorageTemperatureAmbient75FMin;\r\n        this.serviceStorageTemperatureAmbient75FMax = options.serviceStorageTemperatureAmbient75FMax;\r\n        this.calculatorType = options.calculatorType;\r\n    }\r\n}","export class WrArMaterialCteDTO {\r\n    unit: string;\r\n    material: any;\r\n\r\n    constructor(options: {\r\n        unit?: string,\r\n        material?: any,\r\n        customMaterial?: any,\r\n    } = {}) {\r\n        this.unit = options.unit;\r\n        this.material = options.material;\r\n    }\r\n}"],"sourceRoot":"webpack:///"}