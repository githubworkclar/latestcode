{"version":3,"sources":["./client/app/oring-and-gland-calc/rectangle-gland-calc/gland-size-dovetail-gland-vacuum-only/gland-size-dovetail-gland-vacuum-only-routing.module.ts","./client/app/oring-and-gland-calc/rectangle-gland-calc/gland-size-dovetail-gland-vacuum-only/gland-size-dovetail-gland-vacuum-only.component.ts","./client/app/oring-and-gland-calc/rectangle-gland-calc/gland-size-dovetail-gland-vacuum-only/gland-size-dovetail-gland-vacuum-only.component.html","./client/app/oring-and-gland-calc/rectangle-gland-calc/gland-size-dovetail-gland-vacuum-only/gland-size-dovetail-gland-vacuum-only.module.ts","./client/app/oring-and-gland-calc/rectangle-gland-calc/gland-size-dovetail-gland-vacuum-only/gland-size-dovetail-gland-vacuum-only.service.ts"],"names":[],"mappings":"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","file":"gland-size-dovetail-gland-vacuum-only-gland-size-dovetail-gland-vacuum-only-module.js","sourcesContent":["import { NgModule } from \"@angular/core\";\r\nimport { Routes, RouterModule } from \"@angular/router\";\r\n\r\nimport { GlandSizeDovetailGlandVacuumOnlyComponent } from \"./gland-size-dovetail-gland-vacuum-only.component\";\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '', component: GlandSizeDovetailGlandVacuumOnlyComponent, pathMatch: 'full'\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [\r\n        RouterModule.forChild(routes)\r\n    ],\r\n    exports: [RouterModule]\r\n})\r\nexport class GlandSizeDovetailGlandVacuumOnlyRoutingModule { }","// core imports\nimport { Component, OnInit, OnDestroy } from '@angular/core';\nimport { FormGroup, ValidatorFn } from '@angular/forms';\n\n// third party imports\nimport { first } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\n\n// application imports\nimport { DynamicFormTwoColumnLayoutService } from \"../../../dynamic-form/dynamic-form-two-column-layout/dynamic-form-two-column-layout.service\";\nimport { CalculatorModel } from \"../../../models/calculator.model\";\nimport { FormControlModel } from '../../../models/form-control.model';\nimport { FormColumnModel } from '../../../models/form-column.model';\nimport { SwitchButtonModel } from '../../../models/switch-button.model';\nimport { ErrorModel } from '../../../models/error.model';\nimport { BaseModel } from '../../../models/base.model';\nimport { RectangleGlandCalcService } from \"../rectangle-gland-calc.service\";\nimport { AuthService } from \"../../../shared/services/auth.service\";\nimport { ControlType, Units, ControlSubType, GlandSizeCalc_DovetailGlandVacuumOnly_Validators, CalculatorTypes, calculatedDataKeys } from '../../../shared/helpers/constants';\nimport { ControlBaseService } from \"../../../shared/services/control-base.service\";\nimport { PrintService } from \"../../../shared/services/print.service\";\nimport { UnitButtonService } from '../../../shared/components/unit-button/unit-button.service';\nimport { TemperatureButtonService } from '../../../shared/components/temperature-button/temperature-button.service';\nimport { RectangleGlandCalcValidationService } from \"../rectangle-gland-calc-validation.service\";\nimport { GlandSizeDovetailGlandVacuumOnlyService } from \"./gland-size-dovetail-gland-vacuum-only.service\";\nimport { HelperService } from \"../../../shared/services/helper.service\";\nimport { ToastService } from \"../../../shared/components/toasts-container/toast-service\";\n\n@Component({\n  selector: 'app-gland-size-dovetail-gland-vacuum-only',\n  templateUrl: './gland-size-dovetail-gland-vacuum-only.component.html',\n  styleUrls: ['./gland-size-dovetail-gland-vacuum-only.component.css']\n})\nexport class GlandSizeDovetailGlandVacuumOnlyComponent implements OnInit, OnDestroy {\n\n  calculatorConfig: CalculatorModel;\n  glandSizeDovetailGlandForm: FormGroup;\n  flattenedFormControls: FormControlModel[] = [];\n  controlType = ControlType;\n  isSubmitted: Boolean = false;\n  payLoad = '';\n  bottomRadiiMaxLimit: number = 0.035;\n  clientErrors: ErrorModel[] = [];\n  clientWarnings: ErrorModel[] = [];\n  serverErrors: ErrorModel[] = [];\n  serverWarnings: ErrorModel[] = [];\n\n  // calculated data\n  private calculatedData: any;\n\n  get CalculatedData(): any {\n    return this.calculatedData;\n  }\n\n  set CalculatedData(val: any) {\n    this.calculatedData = val;\n    const currentUnit = this.unitButtonService.getCurrentUnitValue;\n\n    if (this.calculatedData && this.calculatedData.unit && currentUnit && (+currentUnit.id) !== (+this.calculatedData.unit)) {\n      this.calculatedData.unit = currentUnit.id.toString();\n      const keys = Object.keys(this.calculatedData);\n      for (let index = 0; index < keys.length; index++) {\n        // do not convert the glandAngle calculated result\n        if (keys[index] === \"glandAngleNominal\") {\n          continue;\n        }\n\n        if ((+currentUnit.id) === Units.MILLI_METER) {\n          this.calculatedData[keys[index]] = this.helperService.convertToMillimeter((+this.calculatedData[keys[index]]));\n        }\n        else {\n          this.calculatedData[keys[index]] = this.helperService.convertToInch((+this.calculatedData[keys[index]]));\n        }\n      }\n    }\n  }\n\n  // subscription\n  glandSizeDataSubscription: Subscription;\n  unitChangeSubscription: Subscription;\n  temperatureChangeSubscription: Subscription;\n\n  constructor(\n    private controlBaseService: ControlBaseService,\n    private authService: AuthService,\n    private rectangleGlandCalcService: RectangleGlandCalcService,\n    private dynamicFormTwoColumnLayoutService: DynamicFormTwoColumnLayoutService,\n    private printService: PrintService,\n    private unitButtonService: UnitButtonService,\n    private temperatureButtonService: TemperatureButtonService,\n    private rectangleGlandCalcValidationService: RectangleGlandCalcValidationService,\n    private glandSizeDovetailGlandVacuumOnlyService: GlandSizeDovetailGlandVacuumOnlyService,\n    private helperService: HelperService,\n    private readonly toastService: ToastService\n  ) {\n\n    // get gland-size-dovetail-gland-vacuum-only config value from O-Ring JSON \n    const rectangleJSONConfig = this.rectangleGlandCalcService.getCurrentGlandSizeCalcConfigValue;\n\n    // gland-size calculator config subscription\n    if (rectangleJSONConfig) {\n      this.initializeOringConfig(rectangleJSONConfig);\n    }\n    else {\n      this.glandSizeDataSubscription = this.rectangleGlandCalcService.glandSizeCalcConfig$.subscribe((x: BaseModel) => {\n        if (x) {\n          this.initializeOringConfig(x);\n        }\n      });\n    }\n\n    // unit change update calculator values handler\n    this.onUnitChangeUpdateCalculator();\n    // temperature change perform operations\n    this.onTemperatureChangeUpdateCalculator();\n  }\n\n  // initialize gland-size-dovetail-gland-vacuum-only calculator by json config param\n  private initializeOringConfig(glandSizeJsonConfig: BaseModel) {\n    // calculator - gland-size-dovetail-gland-vacuum-only\n    const glandSizeDovetailGlandVacuumOnly = { ...glandSizeJsonConfig.calculators[1] };\n    this.calculatorConfig = glandSizeDovetailGlandVacuumOnly;\n    // send calculator to dynamic form service\n    this.dynamicFormTwoColumnLayoutService.sendCalculator(glandSizeDovetailGlandVacuumOnly);\n    // create form\n    this.createForm();\n  }\n\n  ngOnInit(): void {\n    this.CalculatedData = null;\n  }\n\n  // form control changes subcription and update the graph data\n  getControlValue(fieldName: string) {\n    if (this.glandSizeDovetailGlandForm\n      && this.glandSizeDovetailGlandForm.controls[fieldName]\n      && this.glandSizeDovetailGlandForm.controls[fieldName].value) {\n      return (+this.glandSizeDovetailGlandForm.controls[fieldName].value).toFixed(this.unitButtonService.getCurrentUnitValue.id === Units.MILLI_METER ? 2 : 3);\n    }\n  }\n\n  // get calculated field values by fieldname\n  getCalculatedControlValue(fieldName: string) {\n    if (this.CalculatedData) {\n      const fieldValue = this.CalculatedData[fieldName];\n      if (fieldValue) {\n        return (+fieldValue).toFixed(this.unitButtonService.getCurrentUnitValue.id === Units.MILLI_METER ? 2 : 3);\n      }\n    }\n  }\n\n  // unit change update output values handler\n  onUnitChangeUpdateCalculator() {\n    // unit switch button click/change subscription\n    this.unitChangeSubscription = this.unitButtonService.unit$.subscribe((x: SwitchButtonModel) => {\n      if (x) {\n        if (x.id === Units.MILLI_METER) {\n          // millimeter\n          this.bottomRadiiMaxLimit = 0.89; //0.035 * 25.40;\n        }\n        else {\n          // Inch\n          this.bottomRadiiMaxLimit = 0.035;\n        }\n\n        // calculated change detection when by changing the object\n        if (this.CalculatedData) {\n          this.CalculatedData = Object.assign({}, this.CalculatedData);\n        }\n\n        // convert the form data\n        const convertedForm = this.helperService.convertFormUnitControlValuesAndSet((this.calculatorConfig && this.calculatorConfig.form ? this.calculatorConfig.form : null), this.glandSizeDovetailGlandForm, x);\n        if (convertedForm) {\n          this.glandSizeDovetailGlandForm = convertedForm;\n        }\n\n        /// recalculate the data\n        this.onSubmit();\n      }\n    });\n  }\n\n  // create form group\n  createForm() {\n    // get form controls nested array\n    const leftFormControls = this.calculatorConfig.form.left_column.form_layout_row.map(row =>\n      row.form_layout_columns.map((column: FormColumnModel) => {\n        let formControls: FormControlModel[] = [];\n        for (let index = 0; index < column.form_controls.length; index++) {\n          // get existing inputted values of form \n          if (this.glandSizeDovetailGlandForm) {\n            const fc = this.glandSizeDovetailGlandForm.get(column.form_controls[index].key);\n            if (fc) {\n              column.form_controls[index].value = fc.value;\n            }\n          }\n          // create reactive form of only those control which are show = true\n          if (column.form_controls[index].show) {\n            formControls.push(column.form_controls[index]);\n          }\n        }\n        return formControls;\n      }));\n\n    const rightFormControls = this.calculatorConfig.form.right_column.form_layout_row.map(row =>\n      row.form_layout_columns.map((column: FormColumnModel) => {\n        let formControls: FormControlModel[] = [];\n        for (let index = 0; index < column.form_controls.length; index++) {\n          // get existing inputted values of form \n          if (this.glandSizeDovetailGlandForm) {\n            const fc = this.glandSizeDovetailGlandForm.get(column.form_controls[index].key);\n            if (fc) {\n              column.form_controls[index].value = fc.value;\n            }\n          }\n          // createreaxctive form of only those control which are show = true\n          if (column.form_controls[index].show) {\n            formControls.push(column.form_controls[index]);\n          }\n        }\n        return formControls;\n      }));\n\n    // make form control flatten array\n    this.flattenedFormControls = [];\n    // add calculator toolbar option\n    this.flattenedFormControls.push(this.calculatorConfig.toolbarOption);\n    this.flattenedFormControls = [...this.flattenedFormControls, ...this.controlBaseService.flatten(leftFormControls)];\n    this.flattenedFormControls = [...this.flattenedFormControls, ...this.controlBaseService.flatten(rightFormControls)];\n    // exclude formcontrol which is type of label\n    const filteredControls: FormControlModel[] = this.flattenedFormControls.filter(fc => {\n      // exclude labels and buttons from formgroup\n      if (fc && fc.type !== this.controlType.label && fc.type !== this.controlType.button) {\n        return fc;\n      }\n    });\n\n    this.glandSizeDovetailGlandForm = this.controlBaseService.toFormGroup(filteredControls);\n    // get and set validations\n    const validations: ValidatorFn[] = [];\n    // get validation key from json config object\n    let jsonConfigValidationsArray: string[] = this.calculatorConfig.form.form_validation;\n\n    for (let index = 0; index < jsonConfigValidationsArray.length; index++) {\n      const validationFuncKey = jsonConfigValidationsArray[index];\n      switch (validationFuncKey) {\n        case GlandSizeCalc_DovetailGlandVacuumOnly_Validators.OPERATING_TEMPERATURE_VALIDATION:\n          validations.push(this.rectangleGlandCalcValidationService.operatingTemperatureValidation());\n          break;\n        case GlandSizeCalc_DovetailGlandVacuumOnly_Validators.O_RING_CROSS_NOMINAL_AS568A_STANDARD_SECTION_VALIDATION:\n          validations.push(this.rectangleGlandCalcValidationService.oringCrossSectionNominalValidation());\n          break;\n        case GlandSizeCalc_DovetailGlandVacuumOnly_Validators.ORING_ID_AS568A_STANDARD_WARNING:\n          validations.push(this.rectangleGlandCalcValidationService.oRingIDAS568AStandardsWarning());\n          break;\n        case GlandSizeCalc_DovetailGlandVacuumOnly_Validators.O_RING_ID_NOMINAL_SHOULD_BE_LESS_THAN_MAX_ORING_ID_VALUE_VALIDATION:\n          validations.push(this.rectangleGlandCalcValidationService.oringIDNominalLargerThanMaxOringIDValidation());\n          break;\n      }\n    }\n    // set custom validations with params\n    this.glandSizeDovetailGlandForm.setValidators(validations);\n  }\n\n  // form submit event\n  onSubmit(isSubmitted = false) {\n    this.CalculatedData = null;\n    // reset error, warnings\n    this.resetErroAndWarnings();\n    // reset calculated output\n    this.resetCalculatedLabelValue();\n\n    // this.payLoad = this.glandSizeDovetailGlandForm.value;\n    this.isSubmitted = isSubmitted;\n\n    // stop here if form is invalid/Not_valid\n    if (!this.glandSizeDovetailGlandForm || this.glandSizeDovetailGlandForm.invalid) {\n      return;\n    }\n\n    // perform calculation\n    this.glandSizeDovetailGlandVacuumOnlyService.createGland(\n      this.glandSizeDovetailGlandForm,\n      this.unitButtonService.getCurrentUnitValue,\n      this.temperatureButtonService.getCurrentTemperatureValue).subscribe(\n        (resp: any) => {\n          if (resp.data) {\n            // set CalculatedData\n            // this will set the graph data also\n            this.CalculatedData = Object.assign({}, resp.data);\n            if (resp.data.error && resp.data.error.length > 0) {\n              this.serverErrors = resp.data.error.slice();\n            }\n\n            if (resp.data.warning && resp.data.warning.length > 0) {\n              this.serverWarnings = resp.data.warning;\n            }\n\n            const responseDataKeys = Object.keys(resp.data);\n\n            // when toleranc or minmax option is selected than also bind calculated labels received after calculation\n            // Bind left form data\n            // loop through each form left column row\n            for (let rowIndex = 0; rowIndex < this.calculatorConfig.form.left_column.form_layout_row.length; rowIndex++) {\n              // loop through columns\n              for (let columnIndex = 0; columnIndex < this.calculatorConfig.form.left_column.form_layout_row[rowIndex].form_layout_columns.length; columnIndex++) {\n                // loop through controls\n                for (let controlIndex = 0; controlIndex < this.calculatorConfig.form.left_column.form_layout_row[rowIndex].form_layout_columns[columnIndex].form_controls.length; controlIndex++) {\n                  // get form control of JSON\n                  const formControl = this.calculatorConfig.form.left_column.form_layout_row[rowIndex].form_layout_columns[columnIndex].form_controls[controlIndex];\n                  // get fields key from resp data\n                  // const responseDataKeys = Object.keys(resp.data);\n                  for (let keyIndex = 0; keyIndex < responseDataKeys.length; keyIndex++) {\n                    if ((formControl.sub_type === ControlSubType.calculated_label || formControl.sub_type === ControlSubType.calculatedDegreeLabel) && responseDataKeys[keyIndex] === formControl.key) {\n                      // set JSON output label\n                      // bind calculated result to output label\n                      this.calculatorConfig.form.left_column.form_layout_row[rowIndex].form_layout_columns[columnIndex].form_controls[controlIndex].label = resp.data[responseDataKeys[keyIndex]] ? (formControl.sub_type !== ControlSubType.calculatedDegreeLabel ? resp.data[responseDataKeys[keyIndex]].toFixed((this.unitButtonService.getCurrentUnitValue && this.unitButtonService.getCurrentUnitValue.id === Units.MILLI_METER ? 2 : 3)) : resp.data[responseDataKeys[keyIndex]]) : resp.data[responseDataKeys[keyIndex]];\n                    }\n                  }\n                }\n              }\n            }\n\n            // Bind right form data\n            // loop through each form left column row\n            for (let rowIndex = 0; rowIndex < this.calculatorConfig.form.right_column.form_layout_row.length; rowIndex++) {\n              // loop through columns\n              for (let columnIndex = 0; columnIndex < this.calculatorConfig.form.right_column.form_layout_row[rowIndex].form_layout_columns.length; columnIndex++) {\n                // loop through controls\n                for (let controlIndex = 0; controlIndex < this.calculatorConfig.form.right_column.form_layout_row[rowIndex].form_layout_columns[columnIndex].form_controls.length; controlIndex++) {\n                  // get form control of JSON\n                  const formControl = this.calculatorConfig.form.right_column.form_layout_row[rowIndex].form_layout_columns[columnIndex].form_controls[controlIndex];\n                  // get fields key from resp data\n                  // const responseDataKeys = Object.keys(resp.data);\n                  for (let keyIndex = 0; keyIndex < responseDataKeys.length; keyIndex++) {\n                    if ((formControl.sub_type === ControlSubType.calculated_label || formControl.sub_type === ControlSubType.calculatedDegreeLabel) && responseDataKeys[keyIndex] === formControl.key) {\n                      // set JSON output label\n                      // bind calculated result to output label\n                      this.calculatorConfig.form.right_column.form_layout_row[rowIndex].form_layout_columns[columnIndex].form_controls[controlIndex].label = resp.data[responseDataKeys[keyIndex]] ? (formControl.sub_type !== ControlSubType.calculatedDegreeLabel ? resp.data[responseDataKeys[keyIndex]].toFixed((this.unitButtonService.getCurrentUnitValue && this.unitButtonService.getCurrentUnitValue.id === Units.MILLI_METER ? 2 : 3)) : resp.data[responseDataKeys[keyIndex]]) : resp.data[responseDataKeys[keyIndex]];\n                    }\n                  }\n                }\n              }\n            }\n\n            // Bind output form data\n            // loop through each output\n            for (let outputIndex = 0; outputIndex < this.calculatorConfig.form_output.length; outputIndex++) {\n              // loop through rows\n              for (let rowIndex = 0; rowIndex < this.calculatorConfig.form_output[outputIndex].row.length; rowIndex++) {\n                // loop through columns\n                for (let columnIndex = 0; columnIndex < this.calculatorConfig.form_output[outputIndex].row[rowIndex].form_layout_columns.length; columnIndex++) {\n                  // loop through controls\n                  for (let controlIndex = 0; controlIndex < this.calculatorConfig.form_output[outputIndex].row[rowIndex].form_layout_columns[columnIndex].form_controls.length; controlIndex++) {\n                    // get form control of JSON\n                    const formControl = this.calculatorConfig.form_output[outputIndex].row[rowIndex].form_layout_columns[columnIndex].form_controls[controlIndex];\n                    // get fields key from resp data\n                    // const responseDataKeys = Object.keys(resp.data);\n                    for (let keyIndex = 0; keyIndex < responseDataKeys.length; keyIndex++) {\n                      if (formControl.sub_type === ControlSubType.calculated_label && responseDataKeys[keyIndex] === formControl.key) {\n                        // set JSON output label\n                        // bind calculated result to output label\n                        this.calculatorConfig.form_output[outputIndex].row[rowIndex].form_layout_columns[columnIndex].form_controls[controlIndex].label = `${(resp.data[responseDataKeys[keyIndex]] !== null && resp.data[responseDataKeys[keyIndex]] !== undefined && !isNaN((+resp.data[responseDataKeys[keyIndex]]))) ? parseFloat(resp.data[responseDataKeys[keyIndex]]).toFixed(1) : resp.data[responseDataKeys[keyIndex]]}%`;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n\n            // reset auth token \n            this.setAuth();\n          }\n        }, (error: any) => {\n          // reset auth token \n          this.setAuth();\n          // TODO: show error if any\n          console.log(error);\n        });\n  }\n\n  // reset auth token\n  setAuth() {\n    this.authService.authenticate().pipe(first())\n      .subscribe(r => r);\n  }\n\n  // temperature change update output values handler\n  onTemperatureChangeUpdateCalculator() {\n    // unit switch button click/change subscription\n    this.temperatureChangeSubscription = this.temperatureButtonService.temperature$.subscribe((x: SwitchButtonModel) => {\n      if (x) {\n        this.resetFormAndCalculation();\n      }\n    });\n  }\n\n  // on reset button handler\n  // on reset button handler\n  onReset() {\n    // reset dynamically created form controls\n    // get form controls key\n    const formControlKeys = Object.keys(this.glandSizeDovetailGlandForm.controls);\n    // loop through the reactive form/formgroup controls \n    for (let index = 0; index < formControlKeys.length; index++) {\n      const formControlDefaultValue = this.dynamicFormTwoColumnLayoutService.getDefaultControlValueFromCalculatorJSONConfig(formControlKeys[index]);\n      if (formControlDefaultValue) {\n        this.glandSizeDovetailGlandForm.controls[formControlKeys[index]].setValue(formControlDefaultValue);\n      }\n      else {\n        this.glandSizeDovetailGlandForm.controls[formControlKeys[index]].setValue('');\n      }\n    }\n\n    this.resetFormAndCalculation();\n  }\n\n  resetFormAndCalculation() {\n    // reset form submitted status to false \n    this.isSubmitted = false;\n\n    // reset client errors and warnings\n    this.resetErroAndWarnings();\n\n    if (!this.calculatorConfig) {\n      return;\n    }\n\n    // reset left form data\n    // loop through each form left column row\n    for (let rowIndex = 0; rowIndex < this.calculatorConfig.form.left_column.form_layout_row.length; rowIndex++) {\n      // loop through columns\n      for (let columnIndex = 0; columnIndex < this.calculatorConfig.form.left_column.form_layout_row[rowIndex].form_layout_columns.length; columnIndex++) {\n        // loop through controls\n        for (let controlIndex = 0; controlIndex < this.calculatorConfig.form.left_column.form_layout_row[rowIndex].form_layout_columns[columnIndex].form_controls.length; controlIndex++) {\n          // get form control of JSON\n          const formControl = this.calculatorConfig.form.left_column.form_layout_row[rowIndex].form_layout_columns[columnIndex].form_controls[controlIndex];\n          if ((formControl.sub_type === ControlSubType.calculated_label || formControl.sub_type === ControlSubType.calculatedDegreeLabel)) {\n            // set JSON output label\n            // bind calculated result to output label\n            this.calculatorConfig.form.left_column.form_layout_row[rowIndex].form_layout_columns[columnIndex].form_controls[controlIndex].label = '';\n          }\n        }\n      }\n    }\n\n    // reset right form data\n    // loop through each form left column row\n    for (let rowIndex = 0; rowIndex < this.calculatorConfig.form.right_column.form_layout_row.length; rowIndex++) {\n      // loop through columns\n      for (let columnIndex = 0; columnIndex < this.calculatorConfig.form.right_column.form_layout_row[rowIndex].form_layout_columns.length; columnIndex++) {\n        // loop through controls\n        for (let controlIndex = 0; controlIndex < this.calculatorConfig.form.right_column.form_layout_row[rowIndex].form_layout_columns[columnIndex].form_controls.length; controlIndex++) {\n          // get form control of JSON\n          const formControl = this.calculatorConfig.form.right_column.form_layout_row[rowIndex].form_layout_columns[columnIndex].form_controls[controlIndex];\n          // get fields key from resp data\n          // const responseDataKeys = Object.keys(resp.data);\n          if ((formControl.sub_type === ControlSubType.calculated_label || formControl.sub_type === ControlSubType.calculatedDegreeLabel)) {\n            // set JSON output label\n            // bind calculated result to output label\n            this.calculatorConfig.form.right_column.form_layout_row[rowIndex].form_layout_columns[columnIndex].form_controls[controlIndex].label = '';\n          }\n        }\n      }\n    }\n\n    // reset output form data\n    // loop through each output\n    for (let outputIndex = 0; outputIndex < this.calculatorConfig.form_output.length; outputIndex++) {\n      // loop through rows\n      for (let rowIndex = 0; rowIndex < this.calculatorConfig.form_output[outputIndex].row.length; rowIndex++) {\n        // loop through columns\n        for (let columnIndex = 0; columnIndex < this.calculatorConfig.form_output[outputIndex].row[rowIndex].form_layout_columns.length; columnIndex++) {\n          // loop through controls\n          for (let controlIndex = 0; controlIndex < this.calculatorConfig.form_output[outputIndex].row[rowIndex].form_layout_columns[columnIndex].form_controls.length; controlIndex++) {\n            // get form control of JSON\n            const formControl = this.calculatorConfig.form_output[outputIndex].row[rowIndex].form_layout_columns[columnIndex].form_controls[controlIndex];\n            // get fields key from resp data\n            // const responseDataKeys = Object.keys(resp.data);\n            if (formControl.sub_type === ControlSubType.calculated_label) {\n              // set JSON output label\n              // bind calculated result to output label\n              this.calculatorConfig.form_output[outputIndex].row[rowIndex].form_layout_columns[columnIndex].form_controls[controlIndex].label = `%`;\n            }\n          }\n        }\n      }\n    }\n\n    // reset calculated data received after calculation\n    this.CalculatedData = null;\n  }\n\n  // print button event handler\n  onPrint() {\n    this.printService.generatePdf(\"dovetailGland\");\n  }\n\n  // copy event handler of toolbar\n  onCopy() {\n    let formAndOutputData: any;\n    // save calculated data to local storage\n    if (this.CalculatedData) {\n      formAndOutputData = { ...this.glandSizeDovetailGlandForm.value, ...this.CalculatedData };\n    }\n    else {\n      formAndOutputData = { ...this.glandSizeDovetailGlandForm.value };\n    }\n\n    formAndOutputData.calculatorType = CalculatorTypes.ORingDovetailGlandVacuumOnly;\n    localStorage.setItem(calculatedDataKeys.DOVETAIL_GLAND, JSON.stringify(formAndOutputData));\n    // this.cookieService.set('lastCalculatedData', JSON.stringify(resp.data));\n    this.toastService.showSucces(\"Calculator data copied !\");\n  }\n\n  // reset error, warnings of client and server\n  resetErroAndWarnings() {\n    this.clientErrors = [];\n    this.clientWarnings = [];\n    this.serverErrors = [];\n    this.serverWarnings = [];\n  }\n\n\n  // reset calculated label or output value in JSOn config\n  resetCalculatedLabelValue() {\n    this.CalculatedData = {};\n\n    if (!this.calculatorConfig) {\n      return;\n    }\n\n    // reset left form data\n    // loop through each form left column row\n    for (let rowIndex = 0; rowIndex < this.calculatorConfig.form.left_column.form_layout_row.length; rowIndex++) {\n      // loop through columns\n      for (let columnIndex = 0; columnIndex < this.calculatorConfig.form.left_column.form_layout_row[rowIndex].form_layout_columns.length; columnIndex++) {\n        // loop through controls\n        for (let controlIndex = 0; controlIndex < this.calculatorConfig.form.left_column.form_layout_row[rowIndex].form_layout_columns[columnIndex].form_controls.length; controlIndex++) {\n          // get form control of JSON\n          const formControl = this.calculatorConfig.form.left_column.form_layout_row[rowIndex].form_layout_columns[columnIndex].form_controls[controlIndex];\n          if (formControl.sub_type === ControlSubType.calculated_label) {\n            // set JSON output label\n            // reset calculated result to output label\n            this.calculatorConfig.form.left_column.form_layout_row[rowIndex].form_layout_columns[columnIndex].form_controls[controlIndex].label = \"\";\n          }\n        }\n      }\n    }\n\n    // reset right form data\n    // loop through each form left column row\n    for (let rowIndex = 0; rowIndex < this.calculatorConfig.form.right_column.form_layout_row.length; rowIndex++) {\n      // loop through columns\n      for (let columnIndex = 0; columnIndex < this.calculatorConfig.form.right_column.form_layout_row[rowIndex].form_layout_columns.length; columnIndex++) {\n        // loop through controls\n        for (let controlIndex = 0; controlIndex < this.calculatorConfig.form.right_column.form_layout_row[rowIndex].form_layout_columns[columnIndex].form_controls.length; controlIndex++) {\n          // get form control of JSON\n          const formControl = this.calculatorConfig.form.right_column.form_layout_row[rowIndex].form_layout_columns[columnIndex].form_controls[controlIndex];\n          if (formControl.sub_type === ControlSubType.calculated_label) {\n            // set JSON output label\n            // bind calculated result to output label\n            this.calculatorConfig.form.right_column.form_layout_row[rowIndex].form_layout_columns[columnIndex].form_controls[controlIndex].label = \"\";\n          }\n        }\n      }\n    }\n\n    // reset output form data\n    // loop through each output\n    for (let outputIndex = 0; outputIndex < this.calculatorConfig.form_output.length; outputIndex++) {\n      // loop through rows\n      for (let rowIndex = 0; rowIndex < this.calculatorConfig.form_output[outputIndex].row.length; rowIndex++) {\n        // loop through columns\n        for (let columnIndex = 0; columnIndex < this.calculatorConfig.form_output[outputIndex].row[rowIndex].form_layout_columns.length; columnIndex++) {\n          // loop through controls\n          for (let controlIndex = 0; controlIndex < this.calculatorConfig.form_output[outputIndex].row[rowIndex].form_layout_columns[columnIndex].form_controls.length; controlIndex++) {\n            // get form control of JSON\n            const formControl = this.calculatorConfig.form_output[outputIndex].row[rowIndex].form_layout_columns[columnIndex].form_controls[controlIndex];\n            if (formControl.sub_type === ControlSubType.calculated_label) {\n              // set JSON output label\n              // bind calculated result to output label\n              this.calculatorConfig.form_output[outputIndex].row[rowIndex].form_layout_columns[columnIndex].form_controls[controlIndex].label = \" %\";\n            }\n          }\n        }\n      }\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.unitChangeSubscription) {\n      this.unitChangeSubscription.unsubscribe();\n    }\n    if (this.glandSizeDataSubscription) {\n      this.glandSizeDataSubscription.unsubscribe();\n    }\n    if (this.temperatureChangeSubscription) {\n      this.temperatureChangeSubscription.unsubscribe();\n    }\n  }\n}\n","<div class=\"row\">\n    <div class=\"col-12 col-sm-12 col-md-9 col-lg-9 col-xl-9\">\n        <form *ngIf=\"calculatorConfig && glandSizeDovetailGlandForm\" (ngSubmit)=\"onSubmit(true)\"\n            [formGroup]=\"glandSizeDovetailGlandForm\" novalidate\n            class=\"form-horizontal {{calculatorConfig.form.form_title_css_class}}\">\n            <div class=\"row\">\n                <div class=\"col-12 col-sm-12 col-md-12 col-lg-12 col-xl-12 p-1 ignorePdf\">\n                    <calculator-toolbar [form]=\"glandSizeDovetailGlandForm\" [control]=\"calculatorConfig.toolbarOption\"\n                        [isSubmitted]=\"isSubmitted\" (reset)=\"onReset()\" (print)=\"onPrint()\" [isShowCopyBtn]=\"true\" (copy)=\"onCopy()\">\n                    </calculator-toolbar>\n                </div>\n                <div class=\"col-12 col-sm-12 col-md-12 col-lg-12 col-xl-12 p-1\">\n                    <dynamic-form-two-column-layout [form]=\"glandSizeDovetailGlandForm\" [isSubmitted]=\"isSubmitted\"\n                        [calculatorJSON]=\"calculatorConfig\" [clientErrors]=\"clientErrors\"\n                        [clientWarnings]=\"clientWarnings\" [serverErrors]=\"serverErrors\"\n                        [serverWarnings]=\"serverWarnings\">\n                    </dynamic-form-two-column-layout>\n                </div>\n            </div>\n        </form>\n    </div>\n    <div class=\"col-12 col-sm-12 col-md-3 col-lg-3 col-xl-3 p-1\">\n        <div class=\"row\">\n            <div class=\"col-12 col-sm-12 col-md-12 col-lg-12 col-xl-12\">\n                <!-- graph -->\n                <div class=\"graph-sec\">\n                    <h3>Gland Information</h3>\n                    <div class=\"graph-bg dovtail-bg\">\n                        <div class=\"gld-id\">CL: <strong>{{getCalculatedControlValue('glandCenterlineNominal')}}</strong> <br>\n                            (to centerline)</div>\n                        <div class=\"gld-width\">GLAND WIDTH: <strong>{{getCalculatedControlValue('glandWidthNominal')}}</strong>\n                            <br>(to sharp corners)</div>\n                        <div class=\"gld-depth\">GLAND DEPTH:\n                            <br><strong>{{getCalculatedControlValue('glandDepthNominal')}}</strong></div>\n                        <div class=\"top-radii\">TOP RADII: <strong>{{getCalculatedControlValue('topRadiiNominal')}}</strong>\n                        </div>\n                        <div class=\"bottom-radii\">BOTTOM RADII:\n                            <strong>{{getCalculatedControlValue('bottomRadiiNominal')}} </strong></div>\n                        <div class=\"gld-angle\">GLAND ANGLE: <strong>{{getCalculatedControlValue('glandAngleNominal')}}</strong>\n                        </div>\n                        <div class=\"gap-full-comp\">GAP: <strong>{{getControlValue('gapNominal')}}</strong> <br>(may\n                            or may not exist)</div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"col-12 col-sm-12 col-md-12 col-lg-12 col-xl-12 ignorePdf\">\n                <user-rules></user-rules>\n            </div>\n        </div>\n    </div>\n</div>","// core improts\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\n\n// application imports\nimport { SharedModule } from \"../../../shared/shared.module\";\nimport { DynamicFormModule } from \"../../../dynamic-form/dynamic-form.module\";\nimport { GlandSizeDovetailGlandVacuumOnlyRoutingModule } from \"./gland-size-dovetail-gland-vacuum-only-routing.module\";\nimport { GlandSizeDovetailGlandVacuumOnlyComponent } from \"./gland-size-dovetail-gland-vacuum-only.component\";\nimport { GlandSizeDovetailGlandVacuumOnlyService } from \"./gland-size-dovetail-gland-vacuum-only.service\";\n\n@NgModule({\n  declarations: [GlandSizeDovetailGlandVacuumOnlyComponent],\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SharedModule,\n    DynamicFormModule,\n    GlandSizeDovetailGlandVacuumOnlyRoutingModule\n  ],\n  providers: [\n    GlandSizeDovetailGlandVacuumOnlyService\n  ]\n})\nexport class GlandSizeDovetailGlandVacuumOnlyModule { }\n","// core imports\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from \"@angular/common/http\";\n\n// application imports\nimport { AppConfig } from '../../../app.config.service';\nimport { GlandSizeRectangularGlandInternalVacuumOnlyDTO } from \"../../../models/GlandSizeRectangularGlandInternalVacuumOnlyDTO\";\nimport { SwitchButtonModel } from '../../../models/switch-button.model';\nimport { FormGroup } from '@angular/forms';\nimport { calculationType, CalculatorOption, glandType } from '../../../shared/helpers/constants';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GlandSizeDovetailGlandVacuumOnlyService {\n  private baseUrl = AppConfig.settings.env.api;\n\n  constructor(private _http: HttpClient) { }\n\n  public createGland(form: FormGroup, unit: SwitchButtonModel, unitTemp: SwitchButtonModel) {\n    let body: GlandSizeRectangularGlandInternalVacuumOnlyDTO = new GlandSizeRectangularGlandInternalVacuumOnlyDTO(form.value);\n    body.unit = unit.id.toString();\n    body.unitTemp = unitTemp.id.toString();\n    body.inputOption = CalculatorOption.WithMinMax.toString();\n    body.calculationType = calculationType.GLAND_SIZING;\n    body.glandType = glandType.DOVETAIL;\n\n    return this._http.post(`${this.baseUrl}glandsizecalc/createGland`, body);\n  }\n}\n"],"sourceRoot":"webpack:///"}