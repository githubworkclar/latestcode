{"version":3,"sources":["webpack:///client/app/oring-and-gland-calc/rectangle-gland-calc/gland-size-rectangle-internal-vacuum-only/gland-size-rectangle-internal-vacuum-only-routing.module.ts","webpack:///client/app/oring-and-gland-calc/rectangle-gland-calc/gland-size-rectangle-internal-vacuum-only/gland-size-rectangle-internal-vacuum-only.component.ts","webpack:///client/app/oring-and-gland-calc/rectangle-gland-calc/gland-size-rectangle-internal-vacuum-only/gland-size-rectangle-internal-vacuum-only.component.html","webpack:///client/app/oring-and-gland-calc/rectangle-gland-calc/gland-size-rectangle-internal-vacuum-only/gland-size-rectangle-internal-vacuum-only.module.ts","webpack:///client/app/oring-and-gland-calc/rectangle-gland-calc/gland-size-rectangle-internal-vacuum-only/gland-size-rectangle-internal-vacuum-only.service.ts"],"names":["routes","path","component","pathMatch","GlandSizeRectangleInternalVacuumOnlyRoutingModule","forChild","imports","exports","GlandSizeRectangleInternalVacuumOnlyComponent","controlBaseService","authService","rectangleGlandCalcService","dynamicFormTwoColumnLayoutService","printService","unitButtonService","temperatureButtonService","glandSizeRectangleInternalVacuumOnlyService","helperService","rectangleGlandCalcValidationService","cookieService","toastService","flattenedFormControls","controlType","isSubmitted","payLoad","clientErrors","clientWarnings","serverErrors","serverWarnings","oRingDataSubscription","glandSizeCalcConfig$","subscribe","x","calculatorConfig","calculators","sendCalculator","createForm","onTemperatureChangeUpdateCalculator","onUnitChange","CalculatedData","resetFormAndCalculation","unitChangeSubscription","unit$","Object","assign","convertedForm","convertFormUnitControlValuesAndSet","form","glandSizeRectangleInternalVacuumForm","onSubmit","temperatureChangeSubscription","temperature$","fieldName","controls","value","toFixed","getCurrentUnitValue","id","MILLI_METER","fieldValue","resetErroAndWarnings","resetCalculatedLabelValue","invalid","createGland","getCurrentTemperatureValue","resp","data","error","length","slice","warning","responseDataKeys","keys","rowIndex","left_column","form_layout_row","columnIndex","form_layout_columns","controlIndex","form_controls","formControl","keyIndex","sub_type","calculated_label","key","label","right_column","outputIndex","form_output","row","undefined","isNaN","parseFloat","setAuth","console","log","formControlKeys","index","formControlDefaultValue","getDefaultControlValueFromCalculatorJSONConfig","setValue","generatePdf","leftFormControls","map","column","formControls","fc","get","show","push","rightFormControls","toolbarOption","flatten","filteredControls","filter","type","button","toFormGroup","validations","jsonConfigValidationsArray","form_validation","validationFuncKey","OPERATING_TEMPERATURE_VALIDATION","operatingTemperatureValidation","O_RING_CROSS_NOMINAL_AS568A_STANDARD_SECTION_VALIDATION","oringCrossSectionNominalValidation","ORING_ID_AS568A_STANDARD_WARNING","oRingIDAS568AStandardsWarning","O_RING_ID_NOMINAL_SHOULD_BE_LESS_THAN_MAX_ORING_ID_VALUE_VALIDATION","oringIDNominalLargerThanMaxOringIDValidation","setValidators","updateValueAndValidity","authenticate","pipe","r","field","formAndOutputData","calculatorType","ORingInternalVacuumOnly","localStorage","setItem","RECTANGULAR_GLAND_INTERNAL","JSON","stringify","showSucces","unsubscribe","calculatedData","val","currentUnit","unit","toString","convertToMillimeter","convertToInch","selector","templateUrl","styleUrls","GlandSizeRectangleInternalVacuumOnlyModule","declarations","providers","GlandSizeRectangleInternalVacuumOnlyService","_http","baseUrl","settings","env","api","unitTemp","body","inputOption","WithMinMax","calculationType","GLAND_SIZING","post","providedIn"],"mappings":"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","file":"gland-size-rectangle-internal-vacuum-only-gland-size-rectangle-internal-vacuum-only-module-es5.js","sourcesContent":["import { NgModule } from \"@angular/core\";\r\nimport { Routes, RouterModule } from \"@angular/router\";\r\n\r\nimport { GlandSizeRectangleInternalVacuumOnlyComponent } from \"./gland-size-rectangle-internal-vacuum-only.component\";\r\n\r\nconst routes: Routes = [\r\n    { path: '', component: GlandSizeRectangleInternalVacuumOnlyComponent, pathMatch: 'full' }\r\n];\r\n\r\n@NgModule({\r\n    imports: [\r\n        RouterModule.forChild(routes)\r\n    ],\r\n    exports: [RouterModule]\r\n})\r\nexport class GlandSizeRectangleInternalVacuumOnlyRoutingModule { }","// core imports\r\nimport { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormGroup, ValidatorFn } from '@angular/forms';\r\n\r\n// third party imports\r\nimport { first } from 'rxjs/operators';\r\nimport { Subscription } from 'rxjs';\r\nimport { CookieService } from \"ngx-cookie-service\";\r\n\r\n// application imports\r\nimport { DynamicFormTwoColumnLayoutService } from \"../../../dynamic-form/dynamic-form-two-column-layout/dynamic-form-two-column-layout.service\";\r\nimport { CalculatorModel } from \"../../../models/calculator.model\";\r\nimport { FormControlModel } from '../../../models/form-control.model';\r\nimport { BaseModel } from '../../../models/base.model';\r\nimport { FormColumnModel } from '../../../models/form-column.model';\r\nimport { ErrorModel } from '../../../models/error.model';\r\nimport { ORingInternalVacuumOnlyCalculatedOutput } from '../../../models/oRingInternalVacuumOnlyCalculatedOutput';\r\nimport { RectangleGlandCalcService } from \"../rectangle-gland-calc.service\";\r\nimport { AuthService } from \"../../../shared/services/auth.service\";\r\nimport { ControlType, ControlSubType, GlandSizeCalc_InternalVacuumOnly_Validators, Units, CalculatorTypes, calculatedDataKeys } from '../../../shared/helpers/constants';\r\nimport { ControlBaseService } from \"../../../shared/services/control-base.service\";\r\nimport { PrintService } from \"../../../shared/services/print.service\";\r\nimport { UnitButtonService } from '../../../shared/components/unit-button/unit-button.service';\r\nimport { TemperatureButtonService } from '../../../shared/components/temperature-button/temperature-button.service';\r\nimport { GlandSizeRectangleInternalVacuumOnlyService } from \"./gland-size-rectangle-internal-vacuum-only.service\";\r\nimport { SwitchButtonModel } from '../../../models/switch-button.model';\r\nimport { HelperService } from \"../../../shared/services/helper.service\";\r\nimport { RectangleGlandCalcValidationService } from \"../rectangle-gland-calc-validation.service\";\r\nimport { ToastService } from \"../../../shared/components/toasts-container/toast-service\";\r\n\r\n@Component({\r\n  selector: 'app-gland-size-rectangle-internal-vacuum-only',\r\n  templateUrl: './gland-size-rectangle-internal-vacuum-only.component.html',\r\n  styleUrls: ['./gland-size-rectangle-internal-vacuum-only.component.css']\r\n})\r\nexport class GlandSizeRectangleInternalVacuumOnlyComponent implements OnInit, OnDestroy {\r\n  calculatorConfig: CalculatorModel;\r\n  glandSizeRectangleInternalVacuumForm: FormGroup;\r\n  flattenedFormControls: FormControlModel[] = [];\r\n  controlType = ControlType;\r\n  isSubmitted: Boolean = false;\r\n  payLoad = '';\r\n  clientErrors: ErrorModel[] = [];\r\n  clientWarnings: ErrorModel[] = [];\r\n  serverErrors: ErrorModel[] = [];\r\n  serverWarnings: ErrorModel[] = [];\r\n  // subscription\r\n  oRingDataSubscription: Subscription;\r\n  temperatureChangeSubscription: Subscription;\r\n  unitChangeSubscription: Subscription;\r\n\r\n  // calculated data\r\n  private calculatedData: any;\r\n\r\n  get CalculatedData(): any {\r\n    return this.calculatedData;\r\n  }\r\n\r\n  set CalculatedData(val: any) {\r\n    this.calculatedData = val;\r\n    const currentUnit = this.unitButtonService.getCurrentUnitValue;\r\n\r\n    if (this.calculatedData && this.calculatedData.unit && currentUnit && (+currentUnit.id) !== (+this.calculatedData.unit)) {\r\n      this.calculatedData.unit = currentUnit.id.toString();\r\n      const keys = Object.keys(this.calculatedData);\r\n      for (let index = 0; index < keys.length; index++) {\r\n        if ((+currentUnit.id) === Units.MILLI_METER) {\r\n          this.calculatedData[keys[index]] = this.helperService.convertToMillimeter((+this.calculatedData[keys[index]]));\r\n        }\r\n        else {\r\n          this.calculatedData[keys[index]] = this.helperService.convertToInch((+this.calculatedData[keys[index]]));\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  constructor(\r\n    private controlBaseService: ControlBaseService,\r\n    private authService: AuthService,\r\n    private rectangleGlandCalcService: RectangleGlandCalcService,\r\n    private dynamicFormTwoColumnLayoutService: DynamicFormTwoColumnLayoutService,\r\n    private printService: PrintService,\r\n    private unitButtonService: UnitButtonService,\r\n    private temperatureButtonService: TemperatureButtonService,\r\n    private glandSizeRectangleInternalVacuumOnlyService: GlandSizeRectangleInternalVacuumOnlyService,\r\n    private helperService: HelperService,\r\n    private rectangleGlandCalcValidationService: RectangleGlandCalcValidationService,\r\n    private cookieService: CookieService,\r\n    private readonly toastService: ToastService\r\n  ) {\r\n    // o-ring calculator config subscription\r\n    this.oRingDataSubscription = this.rectangleGlandCalcService.glandSizeCalcConfig$.subscribe((x: BaseModel) => {\r\n      if (x) {\r\n        // calculator - internal vacuum only\r\n        this.calculatorConfig = x.calculators[0];\r\n        // send calculator to dynamic form service\r\n        this.dynamicFormTwoColumnLayoutService.sendCalculator(x.calculators[0]);\r\n        // create form\r\n        this.createForm();\r\n      }\r\n    });\r\n\r\n    // temperature change perform operations\r\n    this.onTemperatureChangeUpdateCalculator();\r\n\r\n    // unit change\r\n    this.onUnitChange();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.isSubmitted = false;\r\n    this.CalculatedData = null;\r\n  }\r\n\r\n  // unit change perform operations\r\n  onUnitChange() {\r\n    // reset \r\n    this.resetFormAndCalculation();\r\n    // unit switch button click/change subscription\r\n    this.unitChangeSubscription = this.unitButtonService.unit$.subscribe((x: SwitchButtonModel) => {\r\n      if (x) {\r\n        if (this.CalculatedData) {\r\n          // calculated change detection when by changing the object\r\n          this.CalculatedData = Object.assign({}, this.CalculatedData);\r\n        }\r\n\r\n        // convert the form data\r\n        const convertedForm = this.helperService.convertFormUnitControlValuesAndSet((this.calculatorConfig && this.calculatorConfig.form ? this.calculatorConfig.form : null), this.glandSizeRectangleInternalVacuumForm, x);\r\n        if (convertedForm) {\r\n          this.glandSizeRectangleInternalVacuumForm = convertedForm;\r\n        }\r\n\r\n        /// recalculate the data\r\n        this.onSubmit();\r\n      }\r\n    });\r\n  }\r\n\r\n  // temperature change update output values handler\r\n  onTemperatureChangeUpdateCalculator() {\r\n    // temperature switch button click/change subscription\r\n    this.temperatureChangeSubscription = this.temperatureButtonService.temperature$.subscribe((x: SwitchButtonModel) => {\r\n      if (x) {\r\n        this.resetFormAndCalculation();\r\n      }\r\n    });\r\n  }\r\n\r\n  // form control changes subcription and update the graph data\r\n  getControlValue(fieldName: string) {\r\n    if (this.glandSizeRectangleInternalVacuumForm\r\n      && this.glandSizeRectangleInternalVacuumForm.controls[fieldName]\r\n      && this.glandSizeRectangleInternalVacuumForm.controls[fieldName].value) {\r\n      return (+this.glandSizeRectangleInternalVacuumForm.controls[fieldName].value).toFixed(this.unitButtonService.getCurrentUnitValue.id === Units.MILLI_METER ? 2 : 3);\r\n    }\r\n  }\r\n\r\n  // get calculated field values by fieldname\r\n  getCalculatedControlValue(fieldName: string) {\r\n    if (this.CalculatedData) {\r\n      const fieldValue = this.CalculatedData[fieldName];\r\n      if (fieldValue) {\r\n        return this.unitButtonService.getCurrentUnitValue.id === Units.MILLI_METER ? (+fieldValue).toFixed(2) : (+fieldValue).toFixed(3);\r\n      }\r\n    }\r\n  }\r\n\r\n  // form submit event\r\n  onSubmit(isSubmitted = false) {\r\n    this.CalculatedData = null;\r\n    // reset error, warnings\r\n    this.resetErroAndWarnings();\r\n    // reset calculated output\r\n    this.resetCalculatedLabelValue();\r\n\r\n    // this.payLoad = this.glandSizeRectangleInternalVacuumForm.value;\r\n    this.isSubmitted = isSubmitted;\r\n\r\n    // stop here if form is invalid/Not_valid\r\n    if (!this.glandSizeRectangleInternalVacuumForm || this.glandSizeRectangleInternalVacuumForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    // perform calculation\r\n    this.glandSizeRectangleInternalVacuumOnlyService.createGland(this.glandSizeRectangleInternalVacuumForm, this.unitButtonService.getCurrentUnitValue, this.temperatureButtonService.getCurrentTemperatureValue).subscribe(\r\n      (resp: ORingInternalVacuumOnlyCalculatedOutput) => {\r\n        if (resp.data) {\r\n          // set CalculatedData\r\n          // this will set the graph data also\r\n          this.CalculatedData = Object.assign({}, resp.data);\r\n\r\n          if (resp.data.error && resp.data.error.length > 0) {\r\n            this.serverErrors = resp.data.error.slice();\r\n          }\r\n\r\n          if (resp.data.warning && resp.data.warning.length > 0) {\r\n            this.serverWarnings = resp.data.warning;\r\n          }\r\n\r\n          const responseDataKeys = Object.keys(resp.data);\r\n\r\n          // Bind left form data\r\n          // loop through each form left column row\r\n          for (let rowIndex = 0; rowIndex < this.calculatorConfig.form.left_column.form_layout_row.length; rowIndex++) {\r\n            // loop through columns\r\n            for (let columnIndex = 0; columnIndex < this.calculatorConfig.form.left_column.form_layout_row[rowIndex].form_layout_columns.length; columnIndex++) {\r\n              // loop through controls\r\n              for (let controlIndex = 0; controlIndex < this.calculatorConfig.form.left_column.form_layout_row[rowIndex].form_layout_columns[columnIndex].form_controls.length; controlIndex++) {\r\n                // get form control of JSON\r\n                const formControl = this.calculatorConfig.form.left_column.form_layout_row[rowIndex].form_layout_columns[columnIndex].form_controls[controlIndex];\r\n                // get fields key from resp data\r\n                // const responseDataKeys = Object.keys(resp.data);\r\n                for (let keyIndex = 0; keyIndex < responseDataKeys.length; keyIndex++) {\r\n                  if (formControl.sub_type === ControlSubType.calculated_label && responseDataKeys[keyIndex] === formControl.key) {\r\n                    // set JSON output label\r\n                    // bind calculated result to output label\r\n                    this.calculatorConfig.form.left_column.form_layout_row[rowIndex].form_layout_columns[columnIndex].form_controls[controlIndex].label = resp.data[responseDataKeys[keyIndex]] ? resp.data[responseDataKeys[keyIndex]].toFixed((this.unitButtonService.getCurrentUnitValue.id === Units.MILLI_METER) ? 2 : 3) : resp.data[responseDataKeys[keyIndex]];\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n\r\n          // Bind right form data\r\n          // loop through each form left column row\r\n          for (let rowIndex = 0; rowIndex < this.calculatorConfig.form.right_column.form_layout_row.length; rowIndex++) {\r\n            // loop through columns\r\n            for (let columnIndex = 0; columnIndex < this.calculatorConfig.form.right_column.form_layout_row[rowIndex].form_layout_columns.length; columnIndex++) {\r\n              // loop through controls\r\n              for (let controlIndex = 0; controlIndex < this.calculatorConfig.form.right_column.form_layout_row[rowIndex].form_layout_columns[columnIndex].form_controls.length; controlIndex++) {\r\n                // get form control of JSON\r\n                const formControl = this.calculatorConfig.form.right_column.form_layout_row[rowIndex].form_layout_columns[columnIndex].form_controls[controlIndex];\r\n                // get fields key from resp data\r\n                // const responseDataKeys = Object.keys(resp.data);\r\n                for (let keyIndex = 0; keyIndex < responseDataKeys.length; keyIndex++) {\r\n                  if (formControl.sub_type === ControlSubType.calculated_label && responseDataKeys[keyIndex] === formControl.key) {\r\n                    // set JSON output label\r\n                    // bind calculated result to output label\r\n                    this.calculatorConfig.form.right_column.form_layout_row[rowIndex].form_layout_columns[columnIndex].form_controls[controlIndex].label = resp.data[responseDataKeys[keyIndex]] ? resp.data[responseDataKeys[keyIndex]].toFixed((this.unitButtonService.getCurrentUnitValue.id === Units.MILLI_METER) ? 2 : 3) : resp.data[responseDataKeys[keyIndex]];\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n\r\n          // Bind output form data\r\n          // loop through each output\r\n          for (let outputIndex = 0; outputIndex < this.calculatorConfig.form_output.length; outputIndex++) {\r\n            // loop through rows\r\n            for (let rowIndex = 0; rowIndex < this.calculatorConfig.form_output[outputIndex].row.length; rowIndex++) {\r\n              // loop through columns\r\n              for (let columnIndex = 0; columnIndex < this.calculatorConfig.form_output[outputIndex].row[rowIndex].form_layout_columns.length; columnIndex++) {\r\n                // loop through controls\r\n                for (let controlIndex = 0; controlIndex < this.calculatorConfig.form_output[outputIndex].row[rowIndex].form_layout_columns[columnIndex].form_controls.length; controlIndex++) {\r\n                  // get form control of JSON\r\n                  const formControl = this.calculatorConfig.form_output[outputIndex].row[rowIndex].form_layout_columns[columnIndex].form_controls[controlIndex];\r\n                  // get fields key from resp data\r\n                  // const responseDataKeys = Object.keys(resp.data);\r\n                  for (let keyIndex = 0; keyIndex < responseDataKeys.length; keyIndex++) {\r\n                    if (formControl.sub_type === ControlSubType.calculated_label && responseDataKeys[keyIndex] === formControl.key) {\r\n                      // set JSON output label\r\n                      // bind calculated result to output label\r\n                      this.calculatorConfig.form_output[outputIndex].row[rowIndex].form_layout_columns[columnIndex].form_controls[controlIndex].label = `${(resp.data[responseDataKeys[keyIndex]] !== null && resp.data[responseDataKeys[keyIndex]] !== undefined && !isNaN((+resp.data[responseDataKeys[keyIndex]]))) ? parseFloat(resp.data[responseDataKeys[keyIndex]]).toFixed(1) : resp.data[responseDataKeys[keyIndex]]}%`;\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n\r\n          // reset auth token \r\n          this.setAuth();\r\n        }\r\n      }, (error: any) => {\r\n        // reset auth token \r\n        this.setAuth();\r\n        // TODO: show error if any\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  // on reset button handler\r\n  onReset() {\r\n    // reset dynamically created form controls\r\n    // get form controls key\r\n    const formControlKeys = Object.keys(this.glandSizeRectangleInternalVacuumForm.controls);\r\n    // loop through the reactive form/formgroup controls \r\n    for (let index = 0; index < formControlKeys.length; index++) {\r\n      const formControlDefaultValue = this.dynamicFormTwoColumnLayoutService.getDefaultControlValueFromCalculatorJSONConfig(formControlKeys[index]);\r\n      if (formControlDefaultValue) {\r\n        this.glandSizeRectangleInternalVacuumForm.controls[formControlKeys[index]].setValue(formControlDefaultValue);\r\n      }\r\n      else {\r\n        this.glandSizeRectangleInternalVacuumForm.controls[formControlKeys[index]].setValue('');\r\n      }\r\n    }\r\n\r\n    this.resetFormAndCalculation();\r\n  }\r\n\r\n  resetFormAndCalculation() {\r\n    // reset form submitted status to false \r\n    this.isSubmitted = false;\r\n\r\n    // reset client errors and warnings\r\n    this.resetErroAndWarnings();\r\n\r\n    if (!this.calculatorConfig) {\r\n      return;\r\n    }\r\n\r\n    // reset glandsize rectangle-internal-vacuum-only JSON config data\r\n    // reset left form data\r\n    // loop through each form left column row\r\n    for (let rowIndex = 0; rowIndex < this.calculatorConfig.form.left_column.form_layout_row.length; rowIndex++) {\r\n      // loop through columns\r\n      for (let columnIndex = 0; columnIndex < this.calculatorConfig.form.left_column.form_layout_row[rowIndex].form_layout_columns.length; columnIndex++) {\r\n        // loop through controls\r\n        for (let controlIndex = 0; controlIndex < this.calculatorConfig.form.left_column.form_layout_row[rowIndex].form_layout_columns[columnIndex].form_controls.length; controlIndex++) {\r\n          // get form control of JSON\r\n          const formControl = this.calculatorConfig.form.left_column.form_layout_row[rowIndex].form_layout_columns[columnIndex].form_controls[controlIndex];\r\n          if (formControl.sub_type === ControlSubType.calculated_label) {\r\n            // set JSON output label\r\n            // bind calculated result to output label\r\n            this.calculatorConfig.form.left_column.form_layout_row[rowIndex].form_layout_columns[columnIndex].form_controls[controlIndex].label = '';\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // reset right form data\r\n    // loop through each form left column row\r\n    for (let rowIndex = 0; rowIndex < this.calculatorConfig.form.right_column.form_layout_row.length; rowIndex++) {\r\n      // loop through columns\r\n      for (let columnIndex = 0; columnIndex < this.calculatorConfig.form.right_column.form_layout_row[rowIndex].form_layout_columns.length; columnIndex++) {\r\n        // loop through controls\r\n        for (let controlIndex = 0; controlIndex < this.calculatorConfig.form.right_column.form_layout_row[rowIndex].form_layout_columns[columnIndex].form_controls.length; controlIndex++) {\r\n          // get form control of JSON\r\n          const formControl = this.calculatorConfig.form.right_column.form_layout_row[rowIndex].form_layout_columns[columnIndex].form_controls[controlIndex];\r\n          if (formControl.sub_type === ControlSubType.calculated_label) {\r\n            // set JSON output label\r\n            this.calculatorConfig.form.right_column.form_layout_row[rowIndex].form_layout_columns[columnIndex].form_controls[controlIndex].label = '';\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // reset output form data\r\n    // loop through each output\r\n    for (let outputIndex = 0; outputIndex < this.calculatorConfig.form_output.length; outputIndex++) {\r\n      // loop through rows\r\n      for (let rowIndex = 0; rowIndex < this.calculatorConfig.form_output[outputIndex].row.length; rowIndex++) {\r\n        // loop through columns\r\n        for (let columnIndex = 0; columnIndex < this.calculatorConfig.form_output[outputIndex].row[rowIndex].form_layout_columns.length; columnIndex++) {\r\n          // loop through controls\r\n          for (let controlIndex = 0; controlIndex < this.calculatorConfig.form_output[outputIndex].row[rowIndex].form_layout_columns[columnIndex].form_controls.length; controlIndex++) {\r\n            // get form control of JSON\r\n            const formControl = this.calculatorConfig.form_output[outputIndex].row[rowIndex].form_layout_columns[columnIndex].form_controls[controlIndex];\r\n            // get fields key from resp data\r\n            // const responseDataKeys = Object.keys(resp.data);\r\n            // for (let keyIndex = 0; keyIndex < responseDataKeys.length; keyIndex++) {\r\n            // if (formControl.sub_type === ControlSubType.calculated_label && responseDataKeys[keyIndex] === formControl.key) {\r\n            if (formControl.sub_type === ControlSubType.calculated_label) {\r\n              // set JSON output label\r\n              // bind calculated result to output label\r\n              this.calculatorConfig.form_output[outputIndex].row[rowIndex].form_layout_columns[columnIndex].form_controls[controlIndex].label = `%`;\r\n            }\r\n            // }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // reset calculated data received after calculation\r\n    this.CalculatedData = null;\r\n  }\r\n\r\n  // print button event handler\r\n  onPrint() {\r\n    this.printService.generatePdf(\"rectangleGland\");\r\n  }\r\n\r\n  // create form group\r\n  createForm() {\r\n    // get form controls nested array\r\n    const leftFormControls = this.calculatorConfig.form.left_column.form_layout_row.map(row =>\r\n      row.form_layout_columns.map((column: FormColumnModel) => {\r\n        let formControls: FormControlModel[] = [];\r\n        for (let index = 0; index < column.form_controls.length; index++) {\r\n          // get existing inputted values of form \r\n          if (this.glandSizeRectangleInternalVacuumForm) {\r\n            const fc = this.glandSizeRectangleInternalVacuumForm.get(column.form_controls[index].key);\r\n            if (fc) {\r\n              column.form_controls[index].value = fc.value;\r\n            }\r\n          }\r\n          // create reactive form of only those control which are show = true\r\n          if (column.form_controls[index].show) {\r\n            formControls.push(column.form_controls[index]);\r\n          }\r\n        }\r\n        return formControls;\r\n      }));\r\n\r\n    const rightFormControls = this.calculatorConfig.form.right_column.form_layout_row.map(row =>\r\n      row.form_layout_columns.map((column: FormColumnModel) => {\r\n        let formControls: FormControlModel[] = [];\r\n        for (let index = 0; index < column.form_controls.length; index++) {\r\n          // get existing inputted values of form \r\n          if (this.glandSizeRectangleInternalVacuumForm) {\r\n            const fc = this.glandSizeRectangleInternalVacuumForm.get(column.form_controls[index].key);\r\n            if (fc) {\r\n              column.form_controls[index].value = fc.value;\r\n            }\r\n          }\r\n          // createreaxctive form of only those control which are show = true\r\n          if (column.form_controls[index].show) {\r\n            formControls.push(column.form_controls[index]);\r\n          }\r\n        }\r\n        return formControls;\r\n      }));\r\n\r\n    // make form control flatten array\r\n    this.flattenedFormControls = [];\r\n    // add calculator toolbar option\r\n    this.flattenedFormControls.push(this.calculatorConfig.toolbarOption);\r\n    this.flattenedFormControls = [...this.flattenedFormControls, ...this.controlBaseService.flatten(leftFormControls)];\r\n    this.flattenedFormControls = [...this.flattenedFormControls, ...this.controlBaseService.flatten(rightFormControls)];\r\n    // exclude formcontrol which is type of label\r\n    const filteredControls: FormControlModel[] = this.flattenedFormControls.filter(fc => {\r\n      // exclude labels and buttons from formgroup\r\n      if (fc && fc.type !== this.controlType.label && fc.type !== this.controlType.button) {\r\n        return fc;\r\n      }\r\n    });\r\n\r\n    this.glandSizeRectangleInternalVacuumForm = this.controlBaseService.toFormGroup(filteredControls);\r\n    // get and set validations\r\n    const validations: ValidatorFn[] = [];\r\n    // get validation key from json config object\r\n    let jsonConfigValidationsArray: string[] = this.calculatorConfig.form.form_validation;\r\n\r\n    for (let index = 0; index < jsonConfigValidationsArray.length; index++) {\r\n      const validationFuncKey = jsonConfigValidationsArray[index];\r\n      switch (validationFuncKey) {\r\n        case GlandSizeCalc_InternalVacuumOnly_Validators.OPERATING_TEMPERATURE_VALIDATION:\r\n          validations.push(this.rectangleGlandCalcValidationService.operatingTemperatureValidation());\r\n          break;\r\n        case GlandSizeCalc_InternalVacuumOnly_Validators.O_RING_CROSS_NOMINAL_AS568A_STANDARD_SECTION_VALIDATION:\r\n          validations.push(this.rectangleGlandCalcValidationService.oringCrossSectionNominalValidation());\r\n          break;\r\n        case GlandSizeCalc_InternalVacuumOnly_Validators.ORING_ID_AS568A_STANDARD_WARNING:\r\n          validations.push(this.rectangleGlandCalcValidationService.oRingIDAS568AStandardsWarning());\r\n          break;\r\n        case GlandSizeCalc_InternalVacuumOnly_Validators.O_RING_ID_NOMINAL_SHOULD_BE_LESS_THAN_MAX_ORING_ID_VALUE_VALIDATION:\r\n          validations.push(this.rectangleGlandCalcValidationService.oringIDNominalLargerThanMaxOringIDValidation());\r\n          break;\r\n      }\r\n    }\r\n    // set custom validations with params\r\n    this.glandSizeRectangleInternalVacuumForm.setValidators(validations);\r\n    this.glandSizeRectangleInternalVacuumForm.updateValueAndValidity();\r\n  }\r\n\r\n  // reset auth token\r\n  setAuth() {\r\n    this.authService.authenticate().pipe(first())\r\n      .subscribe(r => r);\r\n  }\r\n\r\n  // add client errors\r\n  addClientErrors(error: ErrorModel) {\r\n    if (this.clientErrors.length > 0) {\r\n      for (let index = 0; index < this.clientErrors.length; index++) {\r\n        if (this.clientErrors[index].field && this.clientErrors[index].field !== error.field) {\r\n          this.clientErrors.push(error);\r\n        }\r\n      }\r\n    }\r\n    else {\r\n      this.clientErrors.push(error);\r\n    }\r\n\r\n    this.clientErrors = this.clientErrors.slice();\r\n  }\r\n\r\n  // add client warnings\r\n  addClientWarnings(warning: ErrorModel) {\r\n    if (this.clientWarnings.length > 0) {\r\n      for (let index = 0; index < this.clientWarnings.length; index++) {\r\n        if (this.clientWarnings[index] && this.clientWarnings[index].field !== warning.field) {\r\n          this.clientWarnings.push(warning);\r\n        }\r\n      }\r\n    }\r\n    else {\r\n      this.clientWarnings.push(warning);\r\n    }\r\n\r\n    this.clientWarnings = this.clientWarnings.slice();\r\n  }\r\n\r\n  // reset error, warnings of client and server\r\n  resetErroAndWarnings() {\r\n    this.clientErrors = [];\r\n    this.clientWarnings = [];\r\n    this.serverErrors = [];\r\n    this.serverWarnings = [];\r\n  }\r\n\r\n  // reset calculated label or output value in JSON config\r\n  resetCalculatedLabelValue() {\r\n    this.CalculatedData = {};\r\n\r\n    if (!this.calculatorConfig) {\r\n      return;\r\n    }\r\n\r\n    // reset left form data\r\n    // loop through each form left column row\r\n    for (let rowIndex = 0; rowIndex < this.calculatorConfig.form.left_column.form_layout_row.length; rowIndex++) {\r\n      // loop through columns\r\n      for (let columnIndex = 0; columnIndex < this.calculatorConfig.form.left_column.form_layout_row[rowIndex].form_layout_columns.length; columnIndex++) {\r\n        // loop through controls\r\n        for (let controlIndex = 0; controlIndex < this.calculatorConfig.form.left_column.form_layout_row[rowIndex].form_layout_columns[columnIndex].form_controls.length; controlIndex++) {\r\n          // get form control of JSON\r\n          const formControl = this.calculatorConfig.form.left_column.form_layout_row[rowIndex].form_layout_columns[columnIndex].form_controls[controlIndex];\r\n          if (formControl.sub_type === ControlSubType.calculated_label) {\r\n            // set JSON output label\r\n            // reset calculated result to output label\r\n            this.calculatorConfig.form.left_column.form_layout_row[rowIndex].form_layout_columns[columnIndex].form_controls[controlIndex].label = \"\";\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // reset right form data\r\n    // loop through each form left column row\r\n    for (let rowIndex = 0; rowIndex < this.calculatorConfig.form.right_column.form_layout_row.length; rowIndex++) {\r\n      // loop through columns\r\n      for (let columnIndex = 0; columnIndex < this.calculatorConfig.form.right_column.form_layout_row[rowIndex].form_layout_columns.length; columnIndex++) {\r\n        // loop through controls\r\n        for (let controlIndex = 0; controlIndex < this.calculatorConfig.form.right_column.form_layout_row[rowIndex].form_layout_columns[columnIndex].form_controls.length; controlIndex++) {\r\n          // get form control of JSON\r\n          const formControl = this.calculatorConfig.form.right_column.form_layout_row[rowIndex].form_layout_columns[columnIndex].form_controls[controlIndex];\r\n          if (formControl.sub_type === ControlSubType.calculated_label) {\r\n            // set JSON output label\r\n            // bind calculated result to output label\r\n            this.calculatorConfig.form.right_column.form_layout_row[rowIndex].form_layout_columns[columnIndex].form_controls[controlIndex].label = \"\";\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // reset output form data\r\n    // loop through each output\r\n    for (let outputIndex = 0; outputIndex < this.calculatorConfig.form_output.length; outputIndex++) {\r\n      // loop through rows\r\n      for (let rowIndex = 0; rowIndex < this.calculatorConfig.form_output[outputIndex].row.length; rowIndex++) {\r\n        // loop through columns\r\n        for (let columnIndex = 0; columnIndex < this.calculatorConfig.form_output[outputIndex].row[rowIndex].form_layout_columns.length; columnIndex++) {\r\n          // loop through controls\r\n          for (let controlIndex = 0; controlIndex < this.calculatorConfig.form_output[outputIndex].row[rowIndex].form_layout_columns[columnIndex].form_controls.length; controlIndex++) {\r\n            // get form control of JSON\r\n            const formControl = this.calculatorConfig.form_output[outputIndex].row[rowIndex].form_layout_columns[columnIndex].form_controls[controlIndex];\r\n            if (formControl.sub_type === ControlSubType.calculated_label) {\r\n              // set JSON output label\r\n              // bind calculated result to output label\r\n              this.calculatorConfig.form_output[outputIndex].row[rowIndex].form_layout_columns[columnIndex].form_controls[controlIndex].label = \" %\";\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // copy event handler of toolbar\r\n  onCopy() {\r\n    let formAndOutputData: any;\r\n    // save calculated data to local storage\r\n    if (this.CalculatedData) {\r\n      formAndOutputData = { ...this.glandSizeRectangleInternalVacuumForm.value, ...this.CalculatedData };\r\n    }\r\n    else {\r\n      formAndOutputData = { ...this.glandSizeRectangleInternalVacuumForm.value };\r\n    }\r\n\r\n    formAndOutputData.calculatorType = CalculatorTypes.ORingInternalVacuumOnly;\r\n    localStorage.setItem(calculatedDataKeys.RECTANGULAR_GLAND_INTERNAL, JSON.stringify(formAndOutputData));\r\n    // this.cookieService.set('lastCalculatedData', JSON.stringify(resp.data));\r\n    this.toastService.showSucces(\"Calculator data copied !\");\r\n  }\r\n\r\n  // component destroy\r\n  ngOnDestroy(): void {\r\n    if (this.oRingDataSubscription) {\r\n      this.oRingDataSubscription.unsubscribe();\r\n    }\r\n    if (this.temperatureChangeSubscription) {\r\n      this.temperatureChangeSubscription.unsubscribe();\r\n    }\r\n    if (this.unitChangeSubscription) {\r\n      this.unitChangeSubscription.unsubscribe();\r\n    }\r\n  }\r\n}","<div class=\"row\">\n    <div class=\"col-12 col-sm-12 col-md-9 col-lg-9 col-xl-9\">\n        <form *ngIf=\"calculatorConfig && glandSizeRectangleInternalVacuumForm\" (ngSubmit)=\"onSubmit(true)\"\n            [formGroup]=\"glandSizeRectangleInternalVacuumForm\" novalidate\n            class=\"form-horizontal {{calculatorConfig.form.form_title_css_class}}\">\n            <div class=\"row\">\n                <div class=\"col-12 col-sm-12 col-md-12 col-lg-12 col-xl-12 p-1 ignorePdf\">\n                    <calculator-toolbar [form]=\"glandSizeRectangleInternalVacuumForm\"\n                        [control]=\"calculatorConfig.toolbarOption\" [isSubmitted]=\"isSubmitted\" (reset)=\"onReset()\"\n                        (print)=\"onPrint()\" [isShowCopyBtn]=\"true\" (copy)=\"onCopy()\">\n                    </calculator-toolbar>\n                </div>\n                <div class=\"col-12 col-sm-12 col-md-12 col-lg-12 col-xl-12 p-1\">\n                    <dynamic-form-two-column-layout [form]=\"glandSizeRectangleInternalVacuumForm\"\n                        [isSubmitted]=\"isSubmitted\" [calculatorJSON]=\"calculatorConfig\" [clientErrors]=\"clientErrors\"\n                        [clientWarnings]=\"clientWarnings\" [serverErrors]=\"serverErrors\"\n                        [serverWarnings]=\"serverWarnings\">\n                    </dynamic-form-two-column-layout>\n                </div>\n            </div>\n        </form>\n    </div>\n    <div class=\"col-12 col-sm-12 col-md-3 col-lg-3 col-xl-3 p-1\">\n        <div class=\"row\">\n            <div class=\"col-12 col-sm-12 col-md-12 col-lg-12 col-xl-12\">\n                <!-- graph -->\n                <div class=\"graph-sec\">\n                    <h3>Gland Information</h3>\n                    <div class=\"graph-bg\">\n                        <div class=\"gld-id\">GLAND ID:\n                            <br><strong>{{getCalculatedControlValue('glandIdNominal')}}</strong></div>\n                        <div class=\"gld-width\">GLAND WIDTH:\n                            <strong>{{getCalculatedControlValue('glandWidthNominal')}}</strong>\n                        </div>\n                        <div class=\"gld-depth\">GLAND DEPTH:\n                            <br><strong>{{getCalculatedControlValue('glandDepthNominal')}}</strong>\n                        </div>\n                        <div class=\"top-radii\">TOP RADII </div>\n                        <div class=\"bottom-radii\">BOTTOM RADII:\n                            <strong>{{getCalculatedControlValue('bottomRadiiNominal')}}</strong>\n                        </div>\n                        <div class=\"gap-full-comp rect-gap\">GAP: <strong>{{getControlValue('gapNominal')}}</strong>\n                            <br>(may or may not exist)\n                        </div>\n                        <div class=\"rect-static-value\"><strong>.005</strong></div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"col-12 col-sm-12 col-md-12 col-lg-12 col-xl-12 ignorePdf\">\n                <user-rules></user-rules>\n            </div>\n        </div>\n    </div>\n</div>","// core improts\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\n\n// application imports\nimport { SharedModule } from \"../../../shared/shared.module\";\nimport { DynamicFormModule } from \"../../../dynamic-form/dynamic-form.module\";\nimport { GlandSizeRectangleInternalVacuumOnlyRoutingModule } from \"./gland-size-rectangle-internal-vacuum-only-routing.module\";\nimport { GlandSizeRectangleInternalVacuumOnlyComponent } from './gland-size-rectangle-internal-vacuum-only.component';\nimport { GlandSizeRectangleInternalVacuumOnlyService } from \"./gland-size-rectangle-internal-vacuum-only.service\";\n\n@NgModule({\n  declarations: [GlandSizeRectangleInternalVacuumOnlyComponent],\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    GlandSizeRectangleInternalVacuumOnlyRoutingModule,\n    SharedModule,\n    DynamicFormModule\n  ],\n  providers: [\n    GlandSizeRectangleInternalVacuumOnlyService\n  ]\n})\nexport class GlandSizeRectangleInternalVacuumOnlyModule { }\n","// core imports\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from \"@angular/common/http\";\n\n// third party imports\nimport { BehaviorSubject } from 'rxjs';\n\n// application imports\nimport { AppConfig } from '../../../app.config.service';\nimport { CalculatorModel } from '../../../models/calculator.model';\nimport { GlandSizeRectangularGlandInternalVacuumOnlyDTO } from \"../../../models/GlandSizeRectangularGlandInternalVacuumOnlyDTO\";\nimport { SwitchButtonModel } from '../../../models/switch-button.model';\nimport { FormGroup } from '@angular/forms';\nimport { CalculatorOption, calculationType } from '../../../shared/helpers/constants';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GlandSizeRectangleInternalVacuumOnlyService {\n  private baseUrl = AppConfig.settings.env.api;\n  \n  constructor(\n    private _http: HttpClient\n  ) { }\n\n  public createGland(form: FormGroup, unit: SwitchButtonModel, unitTemp: SwitchButtonModel) {\n    let body: GlandSizeRectangularGlandInternalVacuumOnlyDTO = new GlandSizeRectangularGlandInternalVacuumOnlyDTO(form.value);\n    body.unit = unit.id.toString();\n    body.unitTemp = unitTemp.id.toString();\n    body.inputOption = CalculatorOption.WithMinMax.toString();\n    body.calculationType = calculationType.GLAND_SIZING;\n\n    return this._http.post(`${this.baseUrl}glandsizecalc/createGland`, body);\n  }\n}\n"]}