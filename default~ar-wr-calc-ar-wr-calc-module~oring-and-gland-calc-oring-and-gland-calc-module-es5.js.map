{"version":3,"sources":["webpack:///client/app/dynamic-form/dynamic-form-two-column-layout/dynamic-form-two-column-layout.component.ts","webpack:///client/app/dynamic-form/dynamic-form-two-column-layout/dynamic-form-two-column-layout.component.html","webpack:///client/app/dynamic-form/dynamic-form-two-column-layout/dynamic-form-two-column-layout.service.ts","webpack:///client/app/dynamic-form/dynamic-form.module.ts","webpack:///client/app/models/error.model.ts"],"names":["DynamicFormTwoColumnLayoutComponent","controlBaseService","unitButtonService","temperatureButtonService","dynamicFormTwoColumnLayoutService","dashSizeDetailsService","helperService","arWrDropDownDataService","isSubmitted","isShowNotes","decimalPoint","isUpdateDecimalPointOnUnitChange","isWrAr","dropdownSelectionChange","numericInputValueChange","supportEmail","EmailPressIn","clientErrorsArr","clientWarningsArr","serverErrorsArr","serverWarningsArr","flattenedFormControls","controlType","controlSubType","errorDetailOpened","dropdownChooseOptionLabel","undefined","isAddChooseOption","allClientErrors","groupedAllClientErrors","groupedAllClientWarning","groupedAllServerErrors","groupedAllServerWarning","allClientWarnings","onUnitChangeUpdateCalculator","onTemperatureChangeUpdateCalculator","EmailWrAr","formValueChangesSubscription","form","valueChanges","subscribe","val","getClientErrorsValidations","getClientWarnings","formControl","isError","sub_type","calculated_label","serverErrorIndex","serverErrors","findIndex","se","field","key","serverWarningIndex","serverWarnings","columnLength","classes","classesStr","join","colWidth","getSizeNumber","getColumnNumber","index","isDetailOpened","formControlKey","ddlType","ddlOptions","tempDDLItems","isMaterialChoice","material_choice_dropdown","MaterialChoiceDropdown","getMaterialChoiceList","arWrPumptypeDropdown","DefaultDropdown","getDropdownsItemsByKey","arWrComponenttypeDropdown","arWrCompositetypeDropdown","arWrInterFerenceTargetPressInDropdown","arWrClearanceTargetDropdown","arWrRotatingMaterial","arWrStationaryMaterial","getDropdownItems","unitChangeSubscription","unit$","x","updateUnitOfInputControlLabels","convertOutputLabel","temperatureChangeSubscription","temperature$","updateTemperatureOfInputControlLabels","e","value","DashSizeDetail","getDashSizeDetails","oRingSizes","sendORingSizes","dashSizeDetailsComponentModalRef","openNgbModal","componentInstance","dashSizeRowClick","bindFormControlForORingDashSizes","close","dashSizes","patchValue","dashSize","toFixed","getCurrentUnitValue","id","MILLI_METER","oringCrossSectionNominal","oringCrossSectionSize","oringIdNominal","oringDiameterSize","glandIdNominal","glandIdSize","glandIdTolerance","event","controlKey","replace","toUpperCase","fc","controls","setValue","disable","enable","emit","unsubscribe","groupClientErrors","then","groupedErrors","groupedWarnings","isReq","formControlKeys","Object","keys","errors","required","controlErrorsArr","length","controlErrors","type","Error","push","errorKeys","error","Array","from","Set","clientErrors","concat","slice","controlErrorsAsWarningArr","controlErrorAsWarnings","Warning","warning","clientWarnings","selector","templateUrl","styleUrls","DynamicFormTwoColumnLayoutService","calculatorSubject","calculator$","asObservable","calculator","selectedOption","updateCalculator","toolbarOption","toString","calculatorForm","calculatorLeftColumnRows","setShowFlag","left_column","form_layout_row","calculatorRightColumnRows","right_column","updatedCalculatorForm","formOutput","form_output","formOutputObj","formOutputObjRow","row","selectedUnit","setUnit","selectedTemperature","setTemperature","rowIndex","columnIndex","form_layout_columns","controlIndex","form_controls","label","convertToMillimeter","convertToInch","getFormControl","defaultvalue","rows","column","control","hasOwnProperty","controlGroup","show_control_option","includes","show","unitLabel","display_Short_title","INCH","cteUnitLabel","pressureLabel","outputHeaderUnitLabel","temperatureLabel","CELCIUS","FAHRENHEIT","currentVal","convertedValue","getValue","next","providedIn","DynamicFormModule","declarations","imports","exports","providers","ErrorModel","options","title","detail"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA,uF,CAAA;;;;;ACoBoC;;AAEI;;AACJ;;;;;;AAKI;;AACoE;;AAAC;;;;;;AALzE;;AAEI;;AAEA;;AAEJ;;;;;;;;;;;;AAJI;;AAAA;;AAGI;;AAAA;;;;;;AAGR;;;;;;AAEI;;;;;;AAEJ;;;;;;AACI;;;;;;AAlBR;;AACI;;AAIA;;AAQA;;AAIA;;AAEJ;;;;;;;;AAjBQ;;AAAA;;AAIA;;AAAA;;AAQA;;AAAA;;AAGqB;;AAAA;;;;;;AAG7B;;;;;;;;AAAoD,yFAAmB,MAAnB,EAAmB,YAAnB,EAAmB,iBAAnB,EAAmB,mBAAnB;;;;;;;;AAIpD;;AASI;AAAA;;AAAA;;AAAA;AAAA;;AACJ;;;;;;;;AAVmE,yFAAmB,MAAnB,EAAmB,YAAnB,EAAmB,iBAAnB,EAAmB,mBAAnB,EAAmB,qBAAnB,EAAmB,oIAAnB,EAAmB,kBAAnB,EAAmB,0EAAnB,EAAmB,WAAnB,EAAmB,8DAAnB,EAAmB,cAAnB,EAAmB,4EAAnB,EAAmB,kCAAnB,EAAmB,wCAAnB,EAAmB,cAAnB,EAAmB,uBAAnB,EAAmB,gBAAnB,EAAmB,yBAAnB,EAAmB,cAAnB,EAAmB,oBAAnB,EAAmB,gBAAnB,EAAmB,sBAAnB;;;;;;;;AAYnE;;AAKI;AAAA;;AAAA;;AAAA;AAAA;;AACJ;;;;;;;;AANuD,yFAAmB,MAAnB,EAAmB,YAAnB,EAAmB,iBAAnB,EAAmB,mBAAnB,EAAmB,SAAnB,EAAmB,4DAAnB,EAAmB,mBAAnB,EAAmB,yBAAnB,EAAmB,mBAAnB,EAAmB,iCAAnB;;;;;;;;AASnD;;AAEI;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAsC;;AAAiB;;;;;;AADvD;;AADuD;;AAEjB;;AAAA;;;;;;AAE1C;;AAC+C;;AAAiB;;;;;;AAA5D;;AADuD;;AACZ;;AAAA;;;;;;AAPnD;;AAEI;;AAIA;;AAEJ;;;;;;;;AANY;;AAAA;;AAIA;;AAAA;;;;;;;;;;;;;;;AArDhB;;AAII;;AAoBA;;AAIA;;AAYA;;AAOA;;AASJ;;;;;;;;;;;;;;;AAxD0B,+FAAyB,SAAzB,EAAyB,qeAAzB;;AAIR;;AAAA;;AAoBE;;AAAA;;AAIQ;;AAAA;;AAYN;;AAAA;;AAOJ;;AAAA;;;;;;AAhDtB;;AACI;;AAyDJ;;;;;;AAzDS;;AAAA;;;;;;AAFb;;AACI;;AA2DJ;;;;;;AA3DkB;;AAAA;;;;;;;;;;;;;AAJtB;;AAGI;;AA6DJ;;;;;;;AAhEK;;AACD;;AAEc;;AAAA;;;;;;AA2EE;;AAEI;;AACJ;;;;;;AAKI;;AACoE;;AAAC;;;;;;AALzE;;AAEI;;AAEA;;AAEJ;;;;;;;;;;;;AAJI;;AAAA;;AAGI;;AAAA;;;;;;AAGR;;;;;;AAEI;;;;;;AAEJ;;;;;;AACI;;;;;;AAlBR;;AACI;;AAIA;;AAQA;;AAIA;;AAEJ;;;;;;;;AAjBQ;;AAAA;;AAIA;;AAAA;;AAQA;;AAAA;;AAGqB;;AAAA;;;;;;AAI7B;;;;;;;;AAAoD,yFAAmB,MAAnB,EAAmB,YAAnB,EAAmB,iBAAnB,EAAmB,mBAAnB;;;;;;;;AAIpD;;AASI;AAAA;;AAAA;;AAAA;AAAA;;AACJ;;;;;;;;AAVmE,yFAAmB,MAAnB,EAAmB,YAAnB,EAAmB,iBAAnB,EAAmB,mBAAnB,EAAmB,qBAAnB,EAAmB,oIAAnB,EAAmB,kBAAnB,EAAmB,0EAAnB,EAAmB,WAAnB,EAAmB,8DAAnB,EAAmB,cAAnB,EAAmB,4EAAnB,EAAmB,kCAAnB,EAAmB,wCAAnB,EAAmB,cAAnB,EAAmB,uBAAnB,EAAmB,gBAAnB,EAAmB,yBAAnB,EAAmB,cAAnB,EAAmB,oBAAnB,EAAmB,gBAAnB,EAAmB,sBAAnB;;;;;;AAYnE;;AACI;;AACJ;;;;;;AADU;;AAAA;;;;;;;;AAGV;;AAKI;AAAA;;AAAA;;AAAA;AAAA;;AACJ;;;;;;;;AANuD,yFAAmB,MAAnB,EAAmB,YAAnB,EAAmB,iBAAnB,EAAmB,mBAAnB,EAAmB,SAAnB,EAAmB,4DAAnB,EAAmB,mBAAnB,EAAmB,yBAAnB,EAAmB,mBAAnB,EAAmB,iCAAnB;;;;;;;;AASnD;;AAEI;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAsC;;AAAiB;;;;;;AADvD;;AADuD;;AAEjB;;AAAA;;;;;;AAE1C;;AAC+C;;AAAiB;;;;;;AAA5D;;AADuD;;AACZ;;AAAA;;;;;;AAPnD;;AAEI;;AAIA;;AAEJ;;;;;;;;AANY;;AAAA;;AAIA;;AAAA;;;;;;AAzDhB;;AAGI;;AAqBA;;AAIA;;AAYA;;AAIA;;AAOA;;AASJ;;;;;;;;;;;;;;;AA5D0B,+FAAyB,SAAzB,EAAyB,4lBAAzB;;AAGR;;AAAA;;AAqBE;;AAAA;;AAIQ;;AAAA;;AAYV;;AAAA;;AAII;;AAAA;;AAOJ;;AAAA;;;;;;AApDtB;;AACI;;AA6DJ;;;;;;AA7DS;;AAAA;;;;;;AAHb;;AAEI;;AA+DJ;;;;;;AAjEc;;AAEI;;AAAA;;;;;;AALtB;;AAGI;;AAkEJ;;;;;;;AArEK;;AACD;;AAGI;;AAAA;;;;;;AAuExB;;AAEI;;AACJ;;;;AADI;;AAAA;;;;;;AAaY;;AACI;;AACJ;;;;;;AADI;;AAAA;;;;;;AAFR;;AACI;;AAGJ;;;;;;AAHkB;;AAAA;;;;;;;;;;;;;;AALtB;;AACI;;AAAK;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AACD;;AAAuC;;AAAgB;;AAC3D;;AACA;;AAKJ;;;;;;AARyD;;AAAA;;AACV;;AAAA;;AAEtC;;AAAA;;;;;;AAOL;;AACI;;AACI;;AACJ;;AACJ;;;;;;AAFQ;;AAAA;;;;;;AAHZ;;AACI;;AAKJ;;;;;;AALkB;;AAAA;;;;;;AAZtB;;AACI;;AAUA;;AAOJ;;;;;;AAjBkB;;AAAA;;AAUA;;AAAA;;;;;;AAftB;;AACI;;AACI;;AAAO;;AAAM;;AAAC;;AAAO;;AACzB;;AACA;;AAmBJ;;;;;;AAnBS;;AAAA;;;;;;AA+BO;;AACI;;AACJ;;;;;;AADI;;AAAA;;;;;;AAFR;;AACI;;AAGJ;;;;;;AAHkB;;AAAA;;;;;;;;AALtB;;AACI;;AAAK;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AACD;;AAAuC;;AAAkB;;AAC7D;;AACA;;AAKJ;;;;;;AAR6D;;AAAA;;AACd;;AAAA;;AAEtC;;AAAA;;;;;;AAOL;;AACI;;AACI;;AACJ;;AACJ;;;;;;AAFQ;;AAAA;;;;;;AAHZ;;AACI;;AAKJ;;;;;;AALkB;;AAAA;;;;;;AAZtB;;AACI;;AAUA;;AAOJ;;;;;;AAjBkB;;AAAA;;AAUA;;AAAA;;;;;;AAftB;;AACI;;AACI;;AAAO;;AAAM;;AAAC;;AAAO;;AACzB;;AACA;;AAmBJ;;;;;;AAnBS;;AAAA;;;;;;AA+BO;;AACI;;AACJ;;;;;;AADI;;AAAA;;;;;;AAFR;;AACI;;AAGJ;;;;;;AAHkB;;AAAA;;;;;;;;AANtB;;AACI;;AAAK;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAED;;AAAuC;;AAAsB;;AACjE;;AACA;;AAKJ;;;;;;AARQ;;AAAA;;AACuC;;AAAA;;AAEtC;;AAAA;;;;;;AAOL;;AACI;;AACI;;AACJ;;AACJ;;;;;;AAFQ;;AAAA;;;;;;AAHZ;;AACI;;AAKJ;;;;;;AALkB;;AAAA;;;;;;AAbtB;;AACI;;AAWA;;AAOJ;;;;;;AAlBkB;;AAAA;;AAWA;;AAAA;;;;;;AAftB;;AACI;;AACI;;AAAO;;AAAM;;AAAC;;AAAO;;AAAkB;;AAC3C;;AAoBJ;;;;;;AApBS;;AAAA;;;;;;;;AA2BG;;AAAkC;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAE9B;;AAAuC;;AAAwB;;AACnE;;;;;;AAFI;;AACuC;;AAAA;;;;;;AAGvC;;AACI;;AACJ;;;;;;AADI;;AAAA;;;;;;AAFR;;AACI;;AAGJ;;;;;;AAHkB;;AAAA;;;;;;AANtB;;AACI;;AAIA;;AAKJ;;;;;;AATS;;AAAA;;AAIA;;AAAA;;;;;;AAOL;;AACI;;AACI;;AACJ;;AACJ;;;;;;AAFQ;;AAAA;;;;;;AAHZ;;AACI;;AAKJ;;;;;;AALkB;;AAAA;;;;;;AAdtB;;AAEI;;AAWA;;AAOJ;;;;;;AAlBkB;;AAAA;;AAWA;;AAAA;;;;;;AAftB;;AACI;;AAAiC;;AAAO;;AAAM;;AAAC;;AAAO;;AAAkB;;AACxE;;AAqBJ;;;;;;AArBS;;AAAA;;;;;;AA6D2C;;AACoE;;AAAC;;;;;;AANzE;;AAEI;;AAGA;;AAEJ;;;;;;;;;;;;AALI;;AAAA;;AAII;;AAAA;;;;;;AAGR;;;;;;AACI;;;;;;AAfR;;AAKI;;AASA;;AAEJ;;;;;;;;AAVQ;;AAAA;;AAQE;;AAAA;;;;;;;;;;;;;;AAjBd;;AAGI;;AAiBJ;;;;;;;;;;AApB0B,gGAAyB,SAAzB,EAAyB,8NAAzB;;AAGR;;AAAA;;;;;;AAJtB;;AACI;;AAqBJ;;;;;;AArBS;;AAAA;;;;;;AAHb;;AAEI;;AAuBJ;;;;;;AAzBc;;AAEI;;AAAA;;;;;;;;;;;;;AATtB;;AAOI;;AA2BJ;;;;;;;;;AAjCI;;AACA;;AAMI;;AAAA;;;;;;AATZ;;AACI;;AAmCJ;;;;;;AAnCS;;AAAA;;;;;;AAZrB;;AAGI;;AACI;;AACI;;AACI;;AACI;;AAAwB;;AACxB;;AACJ;;AACJ;;AACA;;AAsCJ;;AACJ;;AACJ;;;;;;AAnDyB;;AAOmB;;AAAA;;AAIlB;;AAAA;;;;;;AAZ9B;;AACI;;AAoDJ;;;;;;AApDS;;AAAA;;;;;;AAsDb;;AACI;;AACI;;AACJ;;AACA;;AACI;;AACJ;;AACJ;;;;QDjSSA,mC;AAmFX;AACA,mDACmBC,kBADnB,EAEmBC,iBAFnB,EAGmBC,wBAHnB,EAImBC,iCAJnB,EAKmBC,sBALnB,EAMmBC,aANnB,EAOmBC,uBAPnB,EAOmE;AAAA;;AANhD,aAAAN,kBAAA,GAAAA,kBAAA;AACA,aAAAC,iBAAA,GAAAA,iBAAA;AACA,aAAAC,wBAAA,GAAAA,wBAAA;AACA,aAAAC,iCAAA,GAAAA,iCAAA;AACA,aAAAC,sBAAA,GAAAA,sBAAA;AACA,aAAAC,aAAA,GAAAA,aAAA;AACA,aAAAC,uBAAA,GAAAA,uBAAA;AAvFV,aAAAC,WAAA,GAAuB,KAAvB;AACA,aAAAC,WAAA,GAAuB,KAAvB;AACA,aAAAC,YAAA,GAAuB,CAAvB;AACA,aAAAC,gCAAA,GAAmC,IAAnC;AACA,aAAAC,MAAA,GAAS,KAAT,CAmF0D,CAjFnE;;AACU,aAAAC,uBAAA,GAA6C,IAAI,0DAAJ,EAA7C;AACA,aAAAC,uBAAA,GAA6C,IAAI,0DAAJ,EAA7C;AAEV,aAAAC,YAAA,GAAe,uEAAaC,YAA5B;AAGQ,aAAAC,eAAA,GAAgC,EAAhC,CA0E2D,CA9DnE;AACA;;AACQ,aAAAC,iBAAA,GAAkC,EAAlC,CA4D2D,CAlDnE;;AACQ,aAAAC,eAAA,GAAgC,EAAhC,CAiD2D,CAtCnE;;AACQ,aAAAC,iBAAA,GAAkC,EAAlC;AAWR,aAAAC,qBAAA,GAA4C,EAA5C;AACA,aAAAC,WAAA,GAAc,qEAAd;AACA,aAAAC,cAAA,GAAiB,wEAAjB;AACA,aAAAC,iBAAA,GAAoB,KAApB,CAuBmE,CAtBnE;;AACA,aAAAC,yBAAA,GAAoCC,SAApC;AACA,aAAAC,iBAAA,GAAoB,KAApB;AACA,aAAAC,eAAA,GAAgC,EAAhC;AACA,aAAAC,sBAAA,GAA2C,EAA3C;AACA,aAAAC,uBAAA,GAA4C,EAA5C;AACA,aAAAC,sBAAA,GAA2C,EAA3C;AACA,aAAAC,uBAAA,GAA4C,EAA5C;AACA,aAAAC,iBAAA,GAAkC,EAAlC,CAcmE,CAEjE;;AACA,aAAKC,4BAAL,GAHiE,CAIjE;;AACA,aAAKC,mCAAL;AAED,O,CAhFD;AACA;;;;;AAiFA;mCACQ;AAAA;;AACN,cAAI,KAAKvB,MAAT,EAAiB;AACf,iBAAKG,YAAL,GAAoB,uEAAaqB,SAAjC;AACD,WAFD,MAGK;AACH,iBAAKrB,YAAL,GAAoB,uEAAaC,YAAjC;AACD,WANK,CAON;;;AACA,eAAKqB,4BAAL,GAAoC,KAAKC,IAAL,CAAUC,YAAV,CAAuBC,SAAvB,CAAiC,UAAAC,GAAG,EAAI;AAC1E,iBAAI,CAACC,0BAAL;AACA,iBAAI,CAACC,iBAAL;AACD,WAHmC,CAApC;AAID,S,CAED;;;;AAkIA;qDAC6BC,W,EAA6B;AACxD,cAAIC,OAAO,GAAG,KAAd;;AAEA,cAAID,WAAW,CAACE,QAAZ,KAAyB,yEAAeC,gBAA5C,EAA8D;AAC5D,mBAAOF,OAAP;AACD;;AAED,cAAMG,gBAAgB,GAAG,KAAKC,YAAL,CAAkBC,SAAlB,CAA4B,UAACC,EAAD,EAAoB;AACvE,mBAAOA,EAAE,CAACC,KAAH,KAAaR,WAAW,CAACS,GAAhC;AACD,WAFwB,CAAzB;AAIA,cAAMC,kBAAkB,GAAG,KAAKC,cAAL,CAAoBL,SAApB,CAA8B,UAACC,EAAD,EAAoB;AAC3E,mBAAOA,EAAE,CAACC,KAAH,KAAaR,WAAW,CAACS,GAAhC;AACD,WAF0B,CAA3B;;AAIA,cAAIL,gBAAgB,GAAG,CAAC,CAApB,IAAyBM,kBAAkB,GAAG,CAAC,CAAnD,EAAsD;AACpDT,mBAAO,GAAG,IAAV;AACD;;AAED,iBAAOA,OAAP;AACD,S,CAED;AACA;AACA;AACA;;;;oCACYW,Y,EAAsBC,O,EAAkB;AAClD,cAAIC,UAAU,GAAG,EAAjB;;AACA,cAAID,OAAJ,EAAa;AACXC,sBAAU,GAAGD,OAAO,CAACE,IAAR,CAAa,GAAb,CAAb;AACD;;AACD,cAAMC,QAAQ,GAAG,KAAKC,aAAL,CAAmBL,YAAnB,CAAjB;AACA,uDAAoCI,QAApC,uBAAwDA,QAAxD,uBAA4EA,QAA5E,cAAwFF,UAAxF;AACD;;;AAED;sCACcF,Y,EAAoB;AAChC,iBAAO,KAAKvD,kBAAL,CAAwB6D,eAAxB,CAAwCN,YAAxC,CAAP;AACD,S,CAED;;;;0CACkBO,K,EAAa;AAC7B,iBAAO,KAAKnC,eAAL,CAAqBmC,KAArB,EAA4BC,cAA5B,GAA6C,CAAC,KAAKpC,eAAL,CAAqBmC,KAArB,EAA4BC,cAAjF;AACD,S,CAED;;;;iDACyBD,K,EAAa;AACpC,iBAAO,KAAKlC,sBAAL,CAA4BkC,KAA5B,EAAmCC,cAAnC,GAAoD,CAAC,KAAKnC,sBAAL,CAA4BkC,KAA5B,EAAmCC,cAA/F;AACD,S,CAED;;;;mDAC2BD,K,EAAa;AACtC,iBAAO,KAAKjC,uBAAL,CAA6BiC,KAA7B,EAAoCC,cAApC,GAAqD,CAAC,KAAKlC,uBAAL,CAA6BiC,KAA7B,EAAoCC,cAAjG;AACD,S,CAED;;;;4CACoBD,K,EAAa;AAC/B,iBAAO,KAAK9B,iBAAL,CAAuB8B,KAAvB,EAA8BC,cAA9B,GAA+C,CAAC,KAAK/B,iBAAL,CAAuB8B,KAAvB,EAA8BC,cAArF;AACD,S,CAED;;;;0CACkBD,K,EAAa;AAC7B,iBAAO,KAAKd,YAAL,CAAkBc,KAAlB,EAAyBC,cAAzB,GAA0C,CAAC,KAAKf,YAAL,CAAkBc,KAAlB,EAAyBC,cAA3E;AACD,S,CAED;;;;iDACyBD,K,EAAa;AACpC,iBAAO,KAAKhC,sBAAL,CAA4BgC,KAA5B,EAAmCC,cAAnC,GAAoD,CAAC,KAAKjC,sBAAL,CAA4BgC,KAA5B,EAAmCC,cAA/F;AACD,S,CAED;;;;4CACoBD,K,EAAa;AAC/B,iBAAO,KAAKR,cAAL,CAAoBQ,KAApB,EAA2BC,cAA3B,GAA4C,CAAC,KAAKT,cAAL,CAAoBQ,KAApB,EAA2BC,cAA/E;AACD,S,CAED;;;;mDAC2BD,K,EAAa;AACtC,iBAAO,KAAK/B,uBAAL,CAA6B+B,KAA7B,EAAoCC,cAApC,GAAqD,CAAC,KAAKhC,uBAAL,CAA6B+B,KAA7B,EAAoCC,cAAjG;AACD,S,CAED;;;;sCACcC,c,EAAwBC,O,EAAiB;AACrD,cAAIC,UAAU,GAAuB,EAArC;AACA,cAAIC,YAAY,GAAuB,EAAvC;AACA,cAAIC,gBAAgB,GAAY,KAAhC;;AAEA,kBAAQH,OAAR;AACE,iBAAK,yEAAeI,wBAApB;AACED,8BAAgB,GAAG,IAAnB;AACA,mBAAK5C,yBAAL,GAAiC,oFAA0B8C,sBAA3D;AACA,mBAAK5C,iBAAL,GAAyB,IAAzB;AACAwC,wBAAU,sBAAO,KAAK7D,aAAL,CAAmBkE,qBAAnB,CAAyCP,cAAzC,CAAP,CAAV;AACA;;AACF,iBAAK,yEAAeQ,oBAApB;AACE,mBAAKhD,yBAAL,GAAiC,oFAA0BiD,eAA3D;AACA,mBAAK/C,iBAAL,GAAyB,IAAzB;AACAyC,0BAAY,GAAG,KAAK7D,uBAAL,CAA6BoE,sBAA7B,CAAoD,yEAAeF,oBAAnE,CAAf;AACA;;AACF,iBAAK,yEAAeG,yBAApB;AACE,mBAAKnD,yBAAL,GAAiC,oFAA0BiD,eAA3D;AACA,mBAAK/C,iBAAL,GAAyB,IAAzB;AACAyC,0BAAY,GAAG,KAAK7D,uBAAL,CAA6BoE,sBAA7B,CAAoD,yEAAeC,yBAAnE,CAAf;AACA;;AACF,iBAAK,yEAAeC,yBAApB;AACE,mBAAKpD,yBAAL,GAAiC,oFAA0BiD,eAA3D;AACAN,0BAAY,GAAG,KAAK7D,uBAAL,CAA6BoE,sBAA7B,CAAoD,yEAAeE,yBAAnE,CAAf;AACA;;AACF,iBAAK,yEAAeC,qCAApB;AACE,mBAAKrD,yBAAL,GAAiC,oFAA0BiD,eAA3D;AACA,mBAAK/C,iBAAL,GAAyB,IAAzB;AACAyC,0BAAY,GAAG,KAAK7D,uBAAL,CAA6BoE,sBAA7B,CAAoD,yEAAeG,qCAAnE,CAAf;AACA;;AACF,iBAAK,yEAAeC,2BAApB;AACE,mBAAKtD,yBAAL,GAAiC,oFAA0BiD,eAA3D;AACA,mBAAK/C,iBAAL,GAAyB,IAAzB;AACAyC,0BAAY,GAAG,KAAK7D,uBAAL,CAA6BoE,sBAA7B,CAAoD,yEAAeI,2BAAnE,CAAf;AACA;;AACF,iBAAK,yEAAeC,oBAApB;AACE,mBAAKvD,yBAAL,GAAiC,oFAA0BiD,eAA3D;AACA,mBAAK/C,iBAAL,GAAyB,IAAzB;AACAyC,0BAAY,GAAG,KAAK7D,uBAAL,CAA6BoE,sBAA7B,CAAoD,yEAAeK,oBAAnE,CAAf;AACA;;AACF,iBAAK,yEAAeC,sBAApB;AACE,mBAAKxD,yBAAL,GAAiC,oFAA0BiD,eAA3D;AACA,mBAAK/C,iBAAL,GAAyB,IAAzB;AACAyC,0BAAY,GAAG,KAAK7D,uBAAL,CAA6BoE,sBAA7B,CAAoD,yEAAeM,sBAAnE,CAAf;AACA;;AACF;AACE;AA1CJ;;AA2CC;;AAED,cAAI,CAACZ,gBAAL,EAAuB;AACrBF,sBAAU,GAAG,KAAK7D,aAAL,CAAmB4E,gBAAnB,CAAoCjB,cAApC,EAAoDG,YAApD,CAAb;AACD;;AACD,iBAAOD,UAAP;AACD,S,CAED;;;;uDAC+B;AAAA;;AAC7B;AACA,eAAKgB,sBAAL,GAA8B,KAAKjF,iBAAL,CAAuBkF,KAAvB,CAA6B5C,SAA7B,CAAuC,UAAC6C,CAAD,EAA0B;AAC7F,gBAAIA,CAAJ,EAAO;AACL;AACA,oBAAI,CAACjF,iCAAL,CAAuCkF,8BAAvC,CAAsED,CAAtE,EAFK,CAGL;;;AACA,oBAAI,CAACjF,iCAAL,CAAuCmF,kBAAvC,CAA0DF,CAA1D;AACD;AACF,WAP6B,CAA9B;AAQD,S,CAED;;;;8DACsC;AAAA;;AACpC;AACA,eAAKG,6BAAL,GAAqC,KAAKrF,wBAAL,CAA8BsF,YAA9B,CAA2CjD,SAA3C,CAAqD,UAAC6C,CAAD,EAA0B;AAClH,gBAAIA,CAAJ,EAAO;AACL,oBAAI,CAACjF,iCAAL,CAAuCsF,qCAAvC,CAA6EL,CAA7E;AACD;AACF,WAJoC,CAArC;AAKD,S,CAED;;;;oCACYM,C,EAAQ/C,W,EAA+B;AAAA;;AACjD;AACA,kBAAQA,WAAW,CAACgD,KAApB;AACE,iBAAK,2EAAiBC,cAAtB;AACE;AACA,mBAAKxF,sBAAL,CAA4ByF,kBAA5B,GAAiDtD,SAAjD,CAA2D,UAACuD,UAAD,EAAiC;AAC1F,oBAAIA,UAAJ,EAAgB;AACd;AACA,wBAAI,CAAC1F,sBAAL,CAA4B2F,cAA5B,CAA2CD,UAA3C,EAFc,CAGd;;;AACA,sBAAME,gCAAgC,GAAG,MAAI,CAAC3F,aAAL,CAAmB4F,YAAnB,CAAgC,yHAAhC,CAAzC,CAJc,CAKd;;;AACAD,kDAAgC,CAACE,iBAAjC,CAAmDC,gBAAnD,CAAoE5D,SAApE,CAA8E,UAAC6C,CAAD,EAA8B;AAC1G,wBAAIA,CAAJ,EAAO;AACL,4BAAI,CAACgB,gCAAL,CAAsChB,CAAtC;AACD;;AACDY,oDAAgC,CAACK,KAAjC;AACD,mBALD;AAMD;AACF,eAdD;AAeA;;AACF;AACE;AApBJ;AAsBD,S,CAED;;;;yDACyCC,S,EAAkC;AACzE,eAAKjE,IAAL,CAAUkE,UAAV,CAAqB;AACnBC,oBAAQ,EAAE,CAAC,CAACF,SAAS,CAACE,QAAZ,EAAsBC,OAAtB,CAA8B,KAAKxG,iBAAL,CAAuByG,mBAAvB,CAA2CC,EAA3C,KAAkD,gEAAMC,WAAxD,GAAsE,CAAtE,GAA0E,CAAxG,CADS;AAEnBC,oCAAwB,EAAE,CAAC,CAACP,SAAS,CAACQ,qBAAZ,EAAmCL,OAAnC,CAA2C,KAAKxG,iBAAL,CAAuByG,mBAAvB,CAA2CC,EAA3C,KAAkD,gEAAMC,WAAxD,GAAsE,CAAtE,GAA0E,CAArH,CAFP;AAGnBG,0BAAc,EAAE,CAAC,CAACT,SAAS,CAACU,iBAAZ,EAA+BP,OAA/B,CAAuC,KAAKxG,iBAAL,CAAuByG,mBAAvB,CAA2CC,EAA3C,KAAkD,gEAAMC,WAAxD,GAAsE,CAAtE,GAA0E,CAAjH,CAHG;AAInBK,0BAAc,EAAE,CAAC,CAACX,SAAS,CAACY,WAAZ,EAAyBT,OAAzB,CAAiC,KAAKxG,iBAAL,CAAuByG,mBAAvB,CAA2CC,EAA3C,KAAkD,gEAAMC,WAAxD,GAAsE,CAAtE,GAA0E,CAA3G,CAJG;AAKnBO,4BAAgB,EAAE,CAAC,CAACb,SAAS,CAACa,gBAAZ,EAA8BV,OAA9B,CAAsC,KAAKxG,iBAAL,CAAuByG,mBAAvB,CAA2CC,EAA3C,KAAkD,gEAAMC,WAAxD,GAAsE,CAAtE,GAA0E,CAAhH;AALC,WAArB;AAOD,S,CAED;AACA;;;;kDAC0BQ,K,EAA4B;AACpD,cAAMC,UAAU,mBAAYD,KAAK,CAACzE,WAAN,CAAkBS,GAAlB,CAAsBkE,OAAtB,CAA8BF,KAAK,CAACzE,WAAN,CAAkBS,GAAlB,CAAsB,CAAtB,CAA9B,EAAwDgE,KAAK,CAACzE,WAAN,CAAkBS,GAAlB,CAAsB,CAAtB,EAAyBmE,WAAzB,EAAxD,CAAZ,CAAhB;AACA,cAAMC,EAAE,GAAG,KAAKnF,IAAL,CAAUoF,QAAV,CAAmBJ,UAAnB,CAAX;;AACA,cAAIG,EAAJ,EAAQ;AACN;AACA;AACA,gBAAIJ,KAAK,CAACzB,KAAN,KAAgB,IAAhB,IAAwByB,KAAK,CAACzB,KAA9B,IAAuCyB,KAAK,CAACzB,KAAN,CAAYA,KAAZ,GAAoB,CAA/D,EAAkE;AAAE;AAClE6B,gBAAE,CAACE,QAAH,CAAY,EAAZ;AACAF,gBAAE,CAACG,OAAH;AACD,aAHD,MAIK;AAAE;AACLH,gBAAE,CAACI,MAAH;AACD;AACF;;AACD,eAAKhH,uBAAL,CAA6BiH,IAA7B,CAAkCT,KAAlC;AACD,S,CAED;AACA;;;;kDAC0BA,K,EAAY;AACpC;AACA,eAAKvG,uBAAL,CAA6BgH,IAA7B,CAAkCT,KAAlC;AACD,S,CAED;;;;sCACW;AACT,cAAI,KAAKlC,sBAAT,EAAiC;AAC/B,iBAAKA,sBAAL,CAA4B4C,WAA5B;AACD;;AACD,cAAI,KAAKvC,6BAAT,EAAwC;AACtC,iBAAKA,6BAAL,CAAmCuC,WAAnC;AACD;;AACD,cAAI,KAAK1F,4BAAT,EAAuC;AACrC,iBAAKA,4BAAL,CAAkC0F,WAAlC;AACD;AACF;;;0BA7cyBtF,G,EAAmB;AAC3C,eAAKxB,eAAL,GAAuBwB,GAAvB,CAD2C,CAE3C;;AACA,eAAKC,0BAAL;AACD,S;4BACe;AACd,iBAAO,KAAKzB,eAAZ;AACD;;;0BAK2BwB,G,EAAmB;AAC7C,eAAKvB,iBAAL,GAAyBuB,GAAzB,CAD6C,CAE7C;;AACA,eAAKE,iBAAL;AACD,S;4BACiB;AAChB,iBAAO,KAAKzB,iBAAZ;AACD;;;0BAIyBuB,G,EAAmB;AAAA;;AAC3C,eAAKtB,eAAL,GAAuBsB,GAAvB;AACA,eAAKnC,aAAL,CAAmB0H,iBAAnB,CAAqC,KAAK7G,eAA1C,EAA2D8G,IAA3D,CAAgE,UAACC,aAAD,EAAqC;AACnG,kBAAI,CAACnG,sBAAL,GAA8BmG,aAA9B;AACD,WAFD;AAGD,S;4BACe;AACd,iBAAO,KAAK/G,eAAZ;AACD;;;0BAI2BsB,G,EAAmB;AAAA;;AAC7C,eAAKrB,iBAAL,GAAyBqB,GAAzB;AACA,eAAKnC,aAAL,CAAmB0H,iBAAnB,CAAqC,KAAK5G,iBAA1C,EAA6D6G,IAA7D,CAAkE,UAACE,eAAD,EAAuC;AACvG,kBAAI,CAACnG,uBAAL,GAA+BmG,eAA/B;AACD,WAFD;AAGD,S;4BACiB;AAChB,iBAAO,KAAK/G,iBAAZ;AACD;;;4BAqDO;AAAE,iBAAO,KAAKkB,IAAL,CAAUoF,QAAjB;AAA4B,S,CAEtC;;;;4BACc;;;AACZ,cAAIU,KAAK,GAAG,KAAZ,CADY,CAEZ;;AACA,cAAMC,eAAe,GAAGC,MAAM,CAACC,IAAP,CAAY,KAAKjG,IAAL,CAAUoF,QAAtB,CAAxB,CAHY,CAIZ;;AACA,8CAA2BW,eAA3B,sCAA4C;AAAvC,gBAAIpE,cAAc,uBAAlB;;AACH,gBAAI,CAAJ,KAAI,KAAK3B,IAAL,CAAUoF,QAAV,CAAmBzD,cAAnB,EAAmCuE,MAAnC,MAAyC,IAAzC,IAAyC,aAAzC,GAAyC,MAAzC,GAAyC,GAAEC,QAA/C,EACA;AACEL,mBAAK,GAAG,KAAK9F,IAAL,CAAUoF,QAAV,CAAmBzD,cAAnB,EAAmCuE,MAAnC,CAA0CC,QAAlD,CADF,CAC8D;;AAC5D;AACD;AACF,WAXW,CAYZ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,iBAAOL,KAAP;AACD;AAED;;;;;4BAE8B;AAAA;;;;AAC5B,eAAKxG,eAAL,GAAuB,EAAvB;AACA,cAAM8G,gBAAgB,GAAiB,EAAvC,CAF4B,CAG5B;;AACA,cAAML,eAAe,GAAGC,MAAM,CAACC,IAAP,CAAY,KAAKjG,IAAL,CAAUoF,QAAtB,CAAxB,CAJ4B,CAK5B;;AACA,eAAK,IAAI3D,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGsE,eAAe,CAACM,MAA5C,EAAoD5E,KAAK,EAAzD,EAA6D;AAC3D;AACA,gBAAI,CAAJ,KAAI,KAAKzB,IAAL,CAAUoF,QAAV,CAAmBW,eAAe,CAACtE,KAAD,CAAlC,EAA2CyE,MAA3C,MAAiD,IAAjD,IAAiD,aAAjD,GAAiD,MAAjD,GAAiD,GAAEC,QAAvD,EACA;AACE;AACD;;AAED,gBAAMG,aAAa,GAAQ,KAAKtG,IAAL,CAAUoF,QAAV,CAAmBW,eAAe,CAACtE,KAAD,CAAlC,EAA2CyE,MAA3C,GAAqD,KAAKlG,IAAL,CAAUoF,QAAV,CAAmBW,eAAe,CAACtE,KAAD,CAAlC,EAA2CyE,MAAhG,GAA0G,IAArI;;AACA,gBAAII,aAAa,YAAY,8DAA7B,EAAyC;AACvC;AACA,kBAAIA,aAAa,IAAIA,aAAa,CAACC,IAAd,KAAuB,qEAAWC,KAAvD,EAA8D;AAC5DJ,gCAAgB,CAACK,IAAjB,CAAsBH,aAAtB;AACD;AACF,aALD,MAMK,IAAIA,aAAJ,EAAmB;AACtB,kBAAMI,SAAS,GAAGV,MAAM,CAACC,IAAP,CAAYK,aAAZ,CAAlB;;AACA,mBAAK,IAAI7E,MAAK,GAAG,CAAjB,EAAoBA,MAAK,GAAGiF,SAAS,CAACL,MAAtC,EAA8C5E,MAAK,EAAnD,EAAuD;AACrD,oBAAMkF,KAAK,GAAeL,aAAa,CAACI,SAAS,CAACjF,MAAD,CAAV,CAAvC,CADqD,CAErD;;AACA,oBAAIkF,KAAK,IAAIA,KAAK,CAACJ,IAAN,KAAe,qEAAWC,KAAvC,EAA8C;AAC5CJ,kCAAgB,CAACK,IAAjB,CAAsBE,KAAtB;AACD;AACF;AACF,aAvB0D,CAyB3D;AACA;AACA;AACA;AACA;;AACD;;AAED,eAAKrH,eAAL,GAAuBsH,KAAK,CAACC,IAAN,CAAW,IAAIC,GAAJ,CAAQ,KAAKC,YAAL,CAAkBC,MAAlB,CAAyBZ,gBAAzB,CAAR,CAAX,CAAvB,CAtC4B,CAwC5B;;AACA,eAAKpI,aAAL,CAAmB0H,iBAAnB,CAAqC,KAAKpG,eAA1C,EAA2DqG,IAA3D,CAAgE,UAACC,aAAD,EAAqC;AACnG,kBAAI,CAACrG,sBAAL,GAA8BqG,aAA9B;AACD,WAFD;AAIA,eAAKtG,eAAL,GAAuB,KAAKA,eAAL,CAAqB2H,KAArB,EAAvB;AACA,iBAAO,KAAK3H,eAAZ;AACD,S,CAED;AACA;AACA;;;;4BACqB;AAAA;;;;AACnB,eAAKK,iBAAL,GAAyB,EAAzB;AACA,cAAMuH,yBAAyB,GAAiB,EAAhD,CAFmB,CAGnB;;AACA,cAAMnB,eAAe,GAAGC,MAAM,CAACC,IAAP,CAAY,KAAKjG,IAAL,CAAUoF,QAAtB,CAAxB,CAJmB,CAKnB;;AACA,eAAK,IAAI3D,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGsE,eAAe,CAACM,MAA5C,EAAoD5E,KAAK,EAAzD,EAA6D;AAC3D;AACA,gBAAI,CAAJ,KAAI,KAAKzB,IAAL,CAAUoF,QAAV,CAAmBW,eAAe,CAACtE,KAAD,CAAlC,EAA2CyE,MAA3C,MAAiD,IAAjD,IAAiD,aAAjD,GAAiD,MAAjD,GAAiD,GAAEC,QAAvD,EACA;AACE;AACD,aAL0D,CAM3D;AACA;AACA;AACA;AACA;AACA;AAEA;;;AACA,gBAAMgB,sBAAsB,GAAQ,KAAKnH,IAAL,CAAUoF,QAAV,CAAmBW,eAAe,CAACtE,KAAD,CAAlC,EAA2CyE,MAA3C,GAAqD,KAAKlG,IAAL,CAAUoF,QAAV,CAAmBW,eAAe,CAACtE,KAAD,CAAlC,EAA2CyE,MAAhG,GAAwH,IAA5J;;AACA,gBAAIiB,sBAAsB,YAAY,8DAAtC,EAAkD;AAChD,kBAAIA,sBAAsB,IAAIA,sBAAsB,CAACZ,IAAvB,KAAgC,qEAAWa,OAAzE,EAAkF;AAChFF,yCAAyB,CAACT,IAA1B,CAA+BU,sBAA/B;AACD;AACF,aAJD,MAKK,IAAIA,sBAAJ,EAA4B;AAC/B,kBAAMT,SAAS,GAAGV,MAAM,CAACC,IAAP,CAAYkB,sBAAZ,CAAlB;;AACA,mBAAK,IAAI1F,OAAK,GAAG,CAAjB,EAAoBA,OAAK,GAAGiF,SAAS,CAACL,MAAtC,EAA8C5E,OAAK,EAAnD,EAAuD;AACrD,oBAAM4F,OAAO,GAAeF,sBAAsB,CAACT,SAAS,CAACjF,OAAD,CAAV,CAAlD,CADqD,CAErD;;AACA,oBAAI4F,OAAO,IAAIA,OAAO,CAACd,IAAR,KAAiB,qEAAWa,OAA3C,EAAoD;AAClDF,2CAAyB,CAACT,IAA1B,CAA+BY,OAA/B;AACD;AACF;AACF;AACF;;AAED,eAAK1H,iBAAL,GAAyBiH,KAAK,CAACC,IAAN,CAAW,IAAIC,GAAJ,CAAQ,KAAKQ,cAAL,CAAoBN,MAApB,CAA2BE,yBAA3B,CAAR,CAAX,CAAzB,CAtCmB,CAwCnB;;AACA,eAAKlJ,aAAL,CAAmB0H,iBAAnB,CAAqC,KAAK/F,iBAA1C,EAA6DgG,IAA7D,CAAkE,UAACC,aAAD,EAAqC;AACrG,kBAAI,CAACpG,uBAAL,GAA+BoG,aAA/B;AACD,WAFD;AAKA,eAAKjG,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBsH,KAAvB,EAAzB;AACA,iBAAO,KAAKtH,iBAAZ;AACD;;;;;;;uBAnPUjC,mC,EAAmC,yJ,EAAA,qK,EAAA,0L,EAAA,yM,EAAA,sL,EAAA,8I,EAAA,uK;AAAA,K;;;YAAnCA,mC;AAAmC,qD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;AAAA;AAAA;AAAA;AAAA,O;AAAA,e;AAAA,c;AAAA,goF;AAAA;AAAA;ACjChD;;AACI;;AACI;;AACI;;AACI;;AAAwB;;AAA2C;;AACvE;;AACJ;;AACA;;AAEI;;AACI;;AAiEJ;;AAEA;;AACI;;AAsEJ;;AACJ;;AACJ;;AACJ;;AAEA;;AAKA;;AAyBA;;AAyBA;;AAyBA;;AAyBA;;AACI;;AACI;;AAsDJ;;AACA;;AAQA;;AACI;;AAEI;;AAAyD;;AAAU;;AACnE;;AAAsE;;AAC/C;;AAC3B;;AACJ;;AACJ;;;;AA3UyB;;AAIe;;AAAA;;AAQpB;;AAAA;;AAoEA;;AAAA;;AAyEO;;AAAA;;AAKtB;;AAAA;;AAyBA;;AAAA;;AAyBA;;AAAA;;AAyBA;;AAAA;;AA2BiB;;AAAA;;AAuDb;;AAAA;;AAYM;;AAAA;;;;;;;;;sEDtSFA,mC,EAAmC;cAL/C,uDAK+C;eALrC;AACT6J,kBAAQ,EAAE,gCADD;AAETC,qBAAW,EAAE,iDAFJ;AAGTC,mBAAS,EAAE,CAAC,gDAAD;AAHF,S;AAKqC,Q;;;;;;;;;;;;;;;;;;gBAE7C;;;gBACA;;;gBACA;;;gBACA;;;gBACA;;;gBACA;;;gBACA;;;gBAGA;;;gBACA;;;gBAQA;;;gBAYA;;;gBAWA;;;gBAYA;;;;;;;;;;;;;;;;;;;;AExFH;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA,sD,CAAA;AAEA;;;QAeaC,iC;AAIX,iDAAoB1J,aAApB,EAAkD;AAAA;;AAA9B,aAAAA,aAAA,GAAAA,aAAA;AAHH,aAAA2J,iBAAA,GAAsD,IAAI,oDAAJ,CAAqC,IAArC,CAAtD;AACR,aAAAC,WAAA,GAAc,KAAKD,iBAAL,CAAuBE,YAAvB,EAAd;AAE4C;;;;uCAc/B1H,G,EAAsB;AAC1C,eAAK2H,UAAL,GAAkB,MAAH,OAAG,CAAH,EAAG,EAAK3H,GAAL,CAAlB;AACD,S,CAED;;;;wDACgC4H,c,EAAwB;AACtD;AACA,cAAIC,gBAAgB,qBAAyB,KAAKF,UAA9B,CAApB,CAFsD,CAGtD;;AACAE,0BAAgB,CAACC,aAAjB,CAA+B3E,KAA/B,GAAuCyE,cAAc,CAACG,QAAf,EAAvC,CAJsD,CAKtD;;AACA,cAAMC,cAAc,qBAA4B,KAAKL,UAAL,CAAgB9H,IAA5C,CAApB,CANsD,CAOtD;;AACA,cAAMoI,wBAAwB,GAAG,KAAKC,WAAL,CAAiBF,cAAc,CAACG,WAAf,CAA2BC,eAA5C,EAA6DR,cAA7D,CAAjC,CARsD,CAStD;;AACA,cAAMS,yBAAyB,GAAG,KAAKH,WAAL,CAAiBF,cAAc,CAACM,YAAf,CAA4BF,eAA7C,EAA8DR,cAA9D,CAAlC,CAVsD,CAWtD;;AACA,cAAMW,qBAAqB,mCAA4BP,cAA5B,GAA0C;AAAEG,uBAAW,EAAE;AAAEC,6BAAe,EAAEH;AAAnB,aAAf;AAA8DK,wBAAY,EAAE;AAAEF,6BAAe,EAAEC;AAAnB;AAA5E,WAA1C,CAA3B,CAZsD,CAatD;;AACA,cAAIG,UAAU,GAAsBX,gBAAgB,CAACY,WAArD;;AACA,cAAID,UAAU,CAACtC,MAAX,GAAoB,CAAxB,EAA2B;AACzB,iBAAK,IAAI5E,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGkH,UAAU,CAACtC,MAAvC,EAA+C5E,KAAK,EAApD,EAAwD;AACtD;AACA,kBAAIoH,aAAa,qBAAyBF,UAAU,CAAClH,KAAD,CAAnC,CAAjB,CAFsD,CAGtD;;AACA,kBAAMqH,gBAAgB,GAAmB,KAAKT,WAAL,CAAiBQ,aAAa,CAACE,GAA/B,EAAoChB,cAApC,CAAzC,CAJsD,CAKtD;;AACAc,2BAAa,GAAG,MAAH,OAAG,CAAH,kBAAQA,aAAR,CAAG,EAAkB;AAAEE,mBAAG,EAAED;AAAP,eAAlB,CAAhB,CANsD,CAOtD;;AACAH,wBAAU,CAAClH,KAAD,CAAV,GAAoBoH,aAApB;AACD;AACF,WA1BqD,CA2BtD;;;AACAb,0BAAgB,GAAG,MAAH,OAAG,CAAH,kBAAQA,gBAAR,CAAG,EAAqB;AAAEhI,gBAAI,EAAE0I,qBAAR;AAA+BE,uBAAW,EAAED;AAA5C,WAArB,CAAnB;AACA,eAAKb,UAAL,GAAkB,MAAH,OAAG,CAAH,kBAAQ,KAAKA,UAAb,CAAG,EAAyBE,gBAAzB,CAAlB;AACD,S,CAED;;;;uDAC+BgB,Y,EAAiC;AAC9D;AACA,cAAIhB,gBAAgB,qBAAyB,KAAKF,UAA9B,CAApB,CAF8D,CAG9D;;AACA,cAAMK,cAAc,qBAA4B,KAAKL,UAAL,CAAgB9H,IAA5C,CAApB,CAJ8D,CAM9D;;AACA,cAAMoI,wBAAwB,GAAG,KAAKa,OAAL,CAAad,cAAc,CAACG,WAAf,CAA2BC,eAAxC,EAAyDS,YAAzD,CAAjC,CAP8D,CAS9D;;AACA,cAAMR,yBAAyB,GAAG,KAAKS,OAAL,CAAad,cAAc,CAACM,YAAf,CAA4BF,eAAzC,EAA0DS,YAA1D,CAAlC,CAV8D,CAY9D;;AACA,eAAK,IAAIvH,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGuG,gBAAgB,CAACY,WAAjB,CAA6BvC,MAAzD,EAAiE5E,KAAK,EAAtE,EAA0E;AACxEuG,4BAAgB,CAACY,WAAjB,CAA6BnH,KAA7B,EAAoCsH,GAApC,GAA0C,KAAKE,OAAL,CAAajB,gBAAgB,CAACY,WAAjB,CAA6BnH,KAA7B,EAAoCsH,GAAjD,EAAsDC,YAAtD,CAA1C;AACD,WAf6D,CAiB9D;AAEA;;;AACA,cAAMN,qBAAqB,mCAA4BP,cAA5B,GAA0C;AAAEG,uBAAW,EAAE;AAAEC,6BAAe,EAAEH;AAAnB,aAAf;AAA8DK,wBAAY,EAAE;AAAEF,6BAAe,EAAEC;AAAnB;AAA5E,WAA1C,CAA3B;AACAR,0BAAgB,GAAG,MAAH,OAAG,CAAH,kBAAQA,gBAAR,CAAG,EAAqB;AAAEhI,gBAAI,EAAE0I;AAAR,WAArB,CAAnB;AACA,eAAKZ,UAAL,GAAkB,MAAH,OAAG,CAAH,EAAG,EAAKE,gBAAL,CAAlB;AACD,S,CAED;;;;8DACsCkB,mB,EAAwC;AAC5E,cAAIlB,gBAAgB,qBAAyB,KAAKF,UAA9B,CAApB,CAD4E,CAE5E;;AACA,cAAMK,cAAc,qBAA4B,KAAKL,UAAL,CAAgB9H,IAA5C,CAApB,CAH4E,CAI5E;;AACA,cAAMoI,wBAAwB,GAAG,KAAKe,cAAL,CAAoBhB,cAAc,CAACG,WAAf,CAA2BC,eAA/C,EAAgEW,mBAAhE,CAAjC,CAL4E,CAM5E;;AACA,cAAMV,yBAAyB,GAAG,KAAKW,cAAL,CAAoBhB,cAAc,CAACM,YAAf,CAA4BF,eAAhD,EAAiEW,mBAAjE,CAAlC,CAP4E,CAQ5E;;AACA,eAAK,IAAIzH,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGuG,gBAAgB,CAACY,WAAjB,CAA6BvC,MAAzD,EAAiE5E,KAAK,EAAtE,EAA0E;AACxEuG,4BAAgB,CAACY,WAAjB,CAA6BnH,KAA7B,EAAoCsH,GAApC,GAA0C,KAAKI,cAAL,CAAoBnB,gBAAgB,CAACY,WAAjB,CAA6BnH,KAA7B,EAAoCsH,GAAxD,EAA6DG,mBAA7D,CAA1C;AACD,WAX2E,CAY5E;;;AACA,cAAMR,qBAAqB,mCAA4BP,cAA5B,GAA0C;AAAEG,uBAAW,EAAE;AAAEC,6BAAe,EAAEH;AAAnB,aAAf;AAA8DK,wBAAY,EAAE;AAAEF,6BAAe,EAAEC;AAAnB;AAA5E,WAA1C,CAA3B;AACAR,0BAAgB,GAAG,MAAH,OAAG,CAAH,kBAAQA,gBAAR,CAAG,EAAqB;AAAEhI,gBAAI,EAAE0I;AAAR,WAArB,CAAnB;AACA,eAAKZ,UAAL,GAAkB,MAAH,OAAG,CAAH,kBAAQ,KAAKA,UAAb,CAAG,EAAyBE,gBAAzB,CAAlB;AACD,S,CAED;;;;2CACmBgB,Y,EAAiC;AAClD;AACA,cAAIhB,gBAAgB,qBAAyB,KAAKF,UAA9B,CAApB,CAFkD,CAIlD;AACA;;AACA,eAAK,IAAIsB,QAAQ,GAAG,CAApB,EAAuBA,QAAQ,GAAGpB,gBAAgB,CAAChI,IAAjB,CAAsBsI,WAAtB,CAAkCC,eAAlC,CAAkDlC,MAApF,EAA4F+C,QAAQ,EAApG,EAAwG;AACtG;AACA,iBAAK,IAAIC,WAAW,GAAG,CAAvB,EAA0BA,WAAW,GAAGrB,gBAAgB,CAAChI,IAAjB,CAAsBsI,WAAtB,CAAkCC,eAAlC,CAAkDa,QAAlD,EAA4DE,mBAA5D,CAAgFjD,MAAxH,EAAgIgD,WAAW,EAA3I,EAA+I;AAC7I;AACA,mBAAK,IAAIE,YAAY,GAAG,CAAxB,EAA2BA,YAAY,GAAGvB,gBAAgB,CAAChI,IAAjB,CAAsBsI,WAAtB,CAAkCC,eAAlC,CAAkDa,QAAlD,EAA4DE,mBAA5D,CAAgFD,WAAhF,EAA6FG,aAA7F,CAA2GnD,MAArJ,EAA6JkD,YAAY,EAAzK,EAA6K;AAC3K;AACA,oBAAMjJ,WAAW,GAAG0H,gBAAgB,CAAChI,IAAjB,CAAsBsI,WAAtB,CAAkCC,eAAlC,CAAkDa,QAAlD,EAA4DE,mBAA5D,CAAgFD,WAAhF,EAA6FG,aAA7F,CAA2GD,YAA3G,CAApB,CAF2K,CAG3K;;AACA,oBAAIjJ,WAAW,CAACE,QAAZ,KAAyB,yEAAeC,gBAAxC,IAA4DH,WAAW,CAACmJ,KAA5E,EAAmF;AACjF;AACA;AACAzB,kCAAgB,CAAChI,IAAjB,CAAsBsI,WAAtB,CAAkCC,eAAlC,CAAkDa,QAAlD,EAA4DE,mBAA5D,CAAgFD,WAAhF,EAA6FG,aAA7F,CAA2GD,YAA3G,EAAyHE,KAAzH,GAAkIT,YAAY,CAAC1E,EAAb,KAAoB,gEAAMC,WAA1B,GAAwC,KAAKvG,aAAL,CAAmB0L,mBAAnB,CAAwC,CAACpJ,WAAW,CAACmJ,KAArD,CAAxC,GAAuG,KAAKzL,aAAL,CAAmB2L,aAAnB,CAAkC,CAACrJ,WAAW,CAACmJ,KAA/C,CAAzO;AACD;AACF;AACF;AACF,WArBiD,CAuBlD;AACA;;;AACA,eAAK,IAAIL,SAAQ,GAAG,CAApB,EAAuBA,SAAQ,GAAGpB,gBAAgB,CAAChI,IAAjB,CAAsByI,YAAtB,CAAmCF,eAAnC,CAAmDlC,MAArF,EAA6F+C,SAAQ,EAArG,EAAyG;AACvG;AACA,iBAAK,IAAIC,YAAW,GAAG,CAAvB,EAA0BA,YAAW,GAAGrB,gBAAgB,CAAChI,IAAjB,CAAsByI,YAAtB,CAAmCF,eAAnC,CAAmDa,SAAnD,EAA6DE,mBAA7D,CAAiFjD,MAAzH,EAAiIgD,YAAW,EAA5I,EAAgJ;AAC9I;AACA,mBAAK,IAAIE,aAAY,GAAG,CAAxB,EAA2BA,aAAY,GAAGvB,gBAAgB,CAAChI,IAAjB,CAAsByI,YAAtB,CAAmCF,eAAnC,CAAmDa,SAAnD,EAA6DE,mBAA7D,CAAiFD,YAAjF,EAA8FG,aAA9F,CAA4GnD,MAAtJ,EAA8JkD,aAAY,EAA1K,EAA8K;AAC5K;AACA,oBAAMjJ,YAAW,GAAG0H,gBAAgB,CAAChI,IAAjB,CAAsByI,YAAtB,CAAmCF,eAAnC,CAAmDa,SAAnD,EAA6DE,mBAA7D,CAAiFD,YAAjF,EAA8FG,aAA9F,CAA4GD,aAA5G,CAApB,CAF4K,CAG5K;AACA;;AACA,oBAAIjJ,YAAW,CAACE,QAAZ,KAAyB,yEAAeC,gBAAxC,IAA4DH,YAAW,CAACmJ,KAA5E,EAAmF;AACjF;AACA;AACAzB,kCAAgB,CAAChI,IAAjB,CAAsByI,YAAtB,CAAmCF,eAAnC,CAAmDa,SAAnD,EAA6DE,mBAA7D,CAAiFD,YAAjF,EAA8FG,aAA9F,CAA4GD,aAA5G,EAA0HE,KAA1H,GAAmIT,YAAY,CAAC1E,EAAb,KAAoB,gEAAMC,WAA1B,GAAwC,KAAKvG,aAAL,CAAmB0L,mBAAnB,CAAwC,CAACpJ,YAAW,CAACmJ,KAArD,CAAxC,GAAuG,KAAKzL,aAAL,CAAmB2L,aAAnB,CAAkC,CAACrJ,YAAW,CAACmJ,KAA/C,CAA1O;AACD;AACF;AACF;AACF;;AAED,eAAK3B,UAAL,GAAkB,MAAH,OAAG,CAAH,kBAAQ,KAAKA,UAAb,CAAG,EAAyBE,gBAAzB,CAAlB;AACD,S,CAED;;;;uEAC+CrG,c,EAAwB;AACrE;AACA,cAAMwG,cAAc,qBAA4B,KAAKL,UAAL,CAAgB9H,IAA5C,CAApB,CAFqE,CAGrE;;AACA,cAAImF,EAAE,GAAqB,KAAKyE,cAAL,CAAoBzB,cAAc,CAACG,WAAf,CAA2BC,eAA/C,EAAgE5G,cAAhE,CAA3B;;AACA,cAAIwD,EAAE,IAAIA,EAAE,CAACpE,GAAT,IAAgBoE,EAAE,CAAC0E,YAAvB,EAAqC;AACnC,mBAAO1E,EAAE,CAAC0E,YAAV;AACD,WAFD,MAGK;AACH;AACA1E,cAAE,GAAG,KAAKyE,cAAL,CAAoBzB,cAAc,CAACM,YAAf,CAA4BF,eAAhD,EAAiE5G,cAAjE,CAAL;;AACA,gBAAIwD,EAAE,IAAIA,EAAE,CAACpE,GAAT,IAAgBoE,EAAE,CAAC0E,YAAvB,EAAqC;AACnC,qBAAO1E,EAAE,CAAC0E,YAAV;AACD,aAFD,MAGK;AACH,qBAAO,IAAP;AACD;AACF;AACF,S,CAED;;;;oCACoBC,I,EAAsB/B,c,EAAwB;iBAAA,CAChE;;;AACA,eAAK,IAAIgB,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGe,IAAI,CAACzD,MAA7B,EAAqC0C,GAAG,EAAxC,EAA4C;AAC1C;AACA,iBAAK,IAAIgB,MAAM,GAAG,CAAlB,EAAqBA,MAAM,GAAGD,IAAI,CAACf,GAAD,CAAJ,CAAUO,mBAAV,CAA8BjD,MAA5D,EAAoE0D,MAAM,EAA1E,EAA8E;AAC5E;AACA,mBAAK,IAAIC,OAAO,GAAG,CAAnB,EAAsBA,OAAO,GAAGF,IAAI,CAACf,GAAD,CAAJ,CAAUO,mBAAV,CAA8BS,MAA9B,EAAsCP,aAAtC,CAAoDnD,MAApF,EAA4F2D,OAAO,EAAnG,EAAuG;AACrG,oBAAIF,IAAI,CAACf,GAAD,CAAJ,CAAUO,mBAAV,CAA8BS,MAA9B,EAAsCP,aAAtC,CAAoDQ,OAApD,EAA6DC,cAA7D,CAA4E,MAA5E,CAAJ,EAAyF;AACvF;AACA,sBAAMC,YAAY,SAAaJ,IAAI,CAACf,GAAD,CAAJ,CAAUO,mBAAV,CAA8BS,MAA9B,EAAsCP,aAAtC,CAAoDQ,OAApD,CAAb,MAAyE,IAAzE,IAAyE,aAAzE,GAAyE,MAAzE,GAAyE,GAAEG,mBAA7F;;AACA,sBAAID,YAAY,IAAIA,YAAY,CAAC7D,MAAjC,EAAyC;AAAE;AACzC,wBAAI6D,YAAY,CAACE,QAAb,CAAsBrC,cAAtB,CAAJ,EAA2C;AAAE;AAC3C+B,0BAAI,CAACf,GAAD,CAAJ,CAAUO,mBAAV,CAA8BS,MAA9B,EAAsCP,aAAtC,CAAoDQ,OAApD,EAA6DK,IAA7D,GAAoE,IAApE;AACD,qBAFD,MAGK;AACHP,0BAAI,CAACf,GAAD,CAAJ,CAAUO,mBAAV,CAA8BS,MAA9B,EAAsCP,aAAtC,CAAoDQ,OAApD,EAA6DK,IAA7D,GAAoE,KAApE;AACD;AACF;AACF;AACF;AACF;AACF;;AACD,iBAAOP,IAAP;AACD,S,CAED;;;;gCACgBA,I,EAAsBd,Y,EAAiC;AACrE;AACA,eAAK,IAAID,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGe,IAAI,CAACzD,MAA7B,EAAqC0C,GAAG,EAAxC,EAA4C;AAC1C;AACA,iBAAK,IAAIgB,MAAM,GAAG,CAAlB,EAAqBA,MAAM,GAAGD,IAAI,CAACf,GAAD,CAAJ,CAAUO,mBAAV,CAA8BjD,MAA5D,EAAoE0D,MAAM,EAA1E,EAA8E;AAC5E;AACA,mBAAK,IAAIC,OAAO,GAAG,CAAnB,EAAsBA,OAAO,GAAGF,IAAI,CAACf,GAAD,CAAJ,CAAUO,mBAAV,CAA8BS,MAA9B,EAAsCP,aAAtC,CAAoDnD,MAApF,EAA4F2D,OAAO,EAAnG,EAAuG;AACrG;AACA,oBAAIF,IAAI,CAACf,GAAD,CAAJ,CAAUO,mBAAV,CAA8BS,MAA9B,EAAsCP,aAAtC,CAAoDQ,OAApD,EAA6DxJ,QAA7D,KAA0E,yEAAe8J,SAA7F,EAAwG;AACtG;AACAR,sBAAI,CAACf,GAAD,CAAJ,CAAUO,mBAAV,CAA8BS,MAA9B,EAAsCP,aAAtC,CAAoDQ,OAApD,EAA6DP,KAA7D,GAAqET,YAAY,CAACuB,mBAAlF;;AACA,sBAAI,gEAAMC,IAAN,KAAe,CAAExB,YAAY,CAAC1E,EAAlC,EAAuC;AACrCwF,wBAAI,CAACf,GAAD,CAAJ,CAAUO,mBAAV,CAA8BS,MAA9B,EAAsCP,aAAtC,CAAoDQ,OAApD,EAA6D1G,KAA7D,GAAqE,gEAAMkH,IAA3E;AACD,mBAFD,MAGK,IAAI,gEAAMjG,WAAN,KAAsB,CAAEyE,YAAY,CAAC1E,EAAzC,EAA8C;AACjDwF,wBAAI,CAACf,GAAD,CAAJ,CAAUO,mBAAV,CAA8BS,MAA9B,EAAsCP,aAAtC,CAAoDQ,OAApD,EAA6D1G,KAA7D,GAAqE,gEAAMiB,WAA3E;AACD,mBAFI,MAGA;AACHuF,wBAAI,CAACf,GAAD,CAAJ,CAAUO,mBAAV,CAA8BS,MAA9B,EAAsCP,aAAtC,CAAoDQ,OAApD,EAA6D1G,KAA7D,GAAqE,gEAAMkH,IAA3E;AACD;AACF,iBAZD,MAaK,IAAIV,IAAI,CAACf,GAAD,CAAJ,CAAUO,mBAAV,CAA8BS,MAA9B,EAAsCP,aAAtC,CAAoDQ,OAApD,EAA6DxJ,QAA7D,KAA0E,yEAAeiK,YAA7F,EAA2G;AAC9G,sBAAI,gEAAMD,IAAN,KAAe,CAAExB,YAAY,CAAC1E,EAAlC,EAAuC;AACrC;AACAwF,wBAAI,CAACf,GAAD,CAAJ,CAAUO,mBAAV,CAA8BS,MAA9B,EAAsCP,aAAtC,CAAoDQ,OAApD,EAA6DP,KAA7D,GAAqE,UAArE;AACAK,wBAAI,CAACf,GAAD,CAAJ,CAAUO,mBAAV,CAA8BS,MAA9B,EAAsCP,aAAtC,CAAoDQ,OAApD,EAA6D1G,KAA7D,GAAqE,gEAAMkH,IAA3E;AACD,mBAJD,MAKK,IAAI,gEAAMjG,WAAN,KAAsB,CAAEyE,YAAY,CAAC1E,EAAzC,EAA8C;AACjD;AACAwF,wBAAI,CAACf,GAAD,CAAJ,CAAUO,mBAAV,CAA8BS,MAA9B,EAAsCP,aAAtC,CAAoDQ,OAApD,EAA6DP,KAA7D,GAAqE,UAArE;AACAK,wBAAI,CAACf,GAAD,CAAJ,CAAUO,mBAAV,CAA8BS,MAA9B,EAAsCP,aAAtC,CAAoDQ,OAApD,EAA6D1G,KAA7D,GAAqE,gEAAMiB,WAA3E;AACD,mBAJI,MAKA;AACH;AACAuF,wBAAI,CAACf,GAAD,CAAJ,CAAUO,mBAAV,CAA8BS,MAA9B,EAAsCP,aAAtC,CAAoDQ,OAApD,EAA6DP,KAA7D,GAAqE,UAArE;AACAK,wBAAI,CAACf,GAAD,CAAJ,CAAUO,mBAAV,CAA8BS,MAA9B,EAAsCP,aAAtC,CAAoDQ,OAApD,EAA6D1G,KAA7D,GAAqE,gEAAMkH,IAA3E;AACD;AACF,iBA/BoG,CAiCrG;;;AACA,oBAAIV,IAAI,CAACf,GAAD,CAAJ,CAAUO,mBAAV,CAA8BS,MAA9B,EAAsCP,aAAtC,CAAoDQ,OAApD,EAA6DxJ,QAA7D,KAA0E,yEAAekK,aAA7F,EAA4G;AAC1G;AACA,sBAAI,gEAAMnG,WAAN,KAAsB,CAAEyE,YAAY,CAAC1E,EAAzC,EAA8C;AAC5CwF,wBAAI,CAACf,GAAD,CAAJ,CAAUO,mBAAV,CAA8BS,MAA9B,EAAsCP,aAAtC,CAAoDQ,OAApD,EAA6DP,KAA7D,GAAqE,KAArE;AACD,mBAFD,MAGK;AACHK,wBAAI,CAACf,GAAD,CAAJ,CAAUO,mBAAV,CAA8BS,MAA9B,EAAsCP,aAAtC,CAAoDQ,OAApD,EAA6DP,KAA7D,GAAqE,KAArE;AACD;AACF,iBA1CoG,CA4CrG;;;AACA,oBAAIK,IAAI,CAACf,GAAD,CAAJ,CAAUO,mBAAV,CAA8BS,MAA9B,EAAsCP,aAAtC,CAAoDQ,OAApD,EAA6DxJ,QAA7D,KAA0E,yEAAemK,qBAA7F,EAAoH;AAClH;AACA,sBAAI,gEAAMpG,WAAN,KAAsB,CAAEyE,YAAY,CAAC1E,EAAzC,EAA8C;AAC5CwF,wBAAI,CAACf,GAAD,CAAJ,CAAUO,mBAAV,CAA8BS,MAA9B,EAAsCP,aAAtC,CAAoDQ,OAApD,EAA6DP,KAA7D,GAAqE,IAArE;AACD,mBAFD,MAGK;AACHK,wBAAI,CAACf,GAAD,CAAJ,CAAUO,mBAAV,CAA8BS,MAA9B,EAAsCP,aAAtC,CAAoDQ,OAApD,EAA6DP,KAA7D,GAAqE,MAArE;AACD;AACF;AACF;AACF;AACF;;AACD,iBAAOK,IAAP;AACD,S,CAED;;;;uCACuBA,I,EAAsBZ,mB,EAAwC;AACnF;AACA,eAAK,IAAIH,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGe,IAAI,CAACzD,MAA7B,EAAqC0C,GAAG,EAAxC,EAA4C;AAC1C;AACA,iBAAK,IAAIgB,MAAM,GAAG,CAAlB,EAAqBA,MAAM,GAAGD,IAAI,CAACf,GAAD,CAAJ,CAAUO,mBAAV,CAA8BjD,MAA5D,EAAoE0D,MAAM,EAA1E,EAA8E;AAC5E;AACA,mBAAK,IAAIC,OAAO,GAAG,CAAnB,EAAsBA,OAAO,GAAGF,IAAI,CAACf,GAAD,CAAJ,CAAUO,mBAAV,CAA8BS,MAA9B,EAAsCP,aAAtC,CAAoDnD,MAApF,EAA4F2D,OAAO,EAAnG,EAAuG;AACrG;AACA,oBAAIF,IAAI,CAACf,GAAD,CAAJ,CAAUO,mBAAV,CAA8BS,MAA9B,EAAsCP,aAAtC,CAAoDQ,OAApD,EAA6DxJ,QAA7D,KAA0E,yEAAeoK,gBAA7F,EAA+G;AAC7G;AACAd,sBAAI,CAACf,GAAD,CAAJ,CAAUO,mBAAV,CAA8BS,MAA9B,EAAsCP,aAAtC,CAAoDQ,OAApD,EAA6DP,KAA7D,GAAqEP,mBAAmB,CAACqB,mBAAzF;;AACA,sBAAI,sEAAYM,OAAZ,KAAwB,CAAE3B,mBAAmB,CAAC5E,EAAlD,EAAuD;AACrDwF,wBAAI,CAACf,GAAD,CAAJ,CAAUO,mBAAV,CAA8BS,MAA9B,EAAsCP,aAAtC,CAAoDQ,OAApD,EAA6D1G,KAA7D,GAAqE,sEAAYuH,OAAjF;AACD,mBAFD,MAGK,IAAI,sEAAYC,UAAZ,KAA2B,CAAE5B,mBAAmB,CAAC5E,EAArD,EAA0D;AAC7DwF,wBAAI,CAACf,GAAD,CAAJ,CAAUO,mBAAV,CAA8BS,MAA9B,EAAsCP,aAAtC,CAAoDQ,OAApD,EAA6D1G,KAA7D,GAAqE,sEAAYwH,UAAjF;AACD,mBAFI,MAGA;AACHhB,wBAAI,CAACf,GAAD,CAAJ,CAAUO,mBAAV,CAA8BS,MAA9B,EAAsCP,aAAtC,CAAoDQ,OAApD,EAA6D1G,KAA7D,GAAqE,sEAAYuH,OAAjF;AACD;AACF;AACF;AACF;AACF;;AACD,iBAAOf,IAAP;AACD,S,CAED;;;;wDACwCA,I,EAAsBd,Y,EAAiC;AAC7F;AACA,eAAK,IAAID,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGe,IAAI,CAACzD,MAA7B,EAAqC0C,GAAG,EAAxC,EAA4C;AAC1C;AACA,iBAAK,IAAIgB,MAAM,GAAG,CAAlB,EAAqBA,MAAM,GAAGD,IAAI,CAACf,GAAD,CAAJ,CAAUO,mBAAV,CAA8BjD,MAA5D,EAAoE0D,MAAM,EAA1E,EAA8E;AAC5E;AACA,mBAAK,IAAIC,OAAO,GAAG,CAAnB,EAAsBA,OAAO,GAAGF,IAAI,CAACf,GAAD,CAAJ,CAAUO,mBAAV,CAA8BS,MAA9B,EAAsCP,aAAtC,CAAoDnD,MAApF,EAA4F2D,OAAO,EAAnG,EAAuG;AACrG,oBAAIF,IAAI,CAACf,GAAD,CAAJ,CAAUO,mBAAV,CAA8BS,MAA9B,EAAsCP,aAAtC,CAAoDQ,OAApD,EAA6DC,cAA7D,CAA4E,UAA5E,CAAJ,EAA6F;AAC3F;AACA;AACA,sBAAIH,IAAI,CAACf,GAAD,CAAJ,CAAUO,mBAAV,CAA8BS,MAA9B,EAAsCP,aAAtC,CAAoDQ,OAApD,EAA6DxJ,QAA7D,KAA0E,yEAAeC,gBAA7F,EAA+G;AAC7G,wBAAMsK,UAAU,GAAGjB,IAAI,CAACf,GAAD,CAAJ,CAAUO,mBAAV,CAA8BS,MAA9B,EAAsCP,aAAtC,CAAoDQ,OAApD,EAA6D1G,KAAhF;;AACA,wBAAIyH,UAAJ,EAAgB;AACd,0BAAMC,cAAc,GAAGhC,YAAY,CAAC1E,EAAb,KAAoB,gEAAMC,WAA1B,GAAwC,KAAKvG,aAAL,CAAmB0L,mBAAnB,CAAuCqB,UAAvC,CAAxC,GAA6F,KAAK/M,aAAL,CAAmB2L,aAAnB,CAAiCoB,UAAjC,CAApH;AACAjB,0BAAI,CAACf,GAAD,CAAJ,CAAUO,mBAAV,CAA8BS,MAA9B,EAAsCP,aAAtC,CAAoDQ,OAApD,EAA6D1G,KAA7D,GAAqE0H,cAArE;AACAlB,0BAAI,CAACf,GAAD,CAAJ,CAAUO,mBAAV,CAA8BS,MAA9B,EAAsCP,aAAtC,CAAoDQ,OAApD,EAA6DP,KAA7D,aAAwEuB,cAAxE;AACD,qBAJD,MAKK;AACH;AACAlB,0BAAI,CAACf,GAAD,CAAJ,CAAUO,mBAAV,CAA8BS,MAA9B,EAAsCP,aAAtC,CAAoDQ,OAApD,EAA6DP,KAA7D,GAAqE,IAArE;AACD;AACF;AACF;AACF;AACF;AACF;;AACD,iBAAOK,IAAP;AACD,S,CAED;;;;uCACuBA,I,EAAsBnI,c,EAAsB;AACjE,cAAIwD,EAAE,GAAqB,IAAI,2EAAJ,CAAqB,EAArB,CAA3B,CADiE,CAEjE;;AACA,eAAK,IAAI4D,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGe,IAAI,CAACzD,MAA7B,EAAqC0C,GAAG,EAAxC,EAA4C;AAC1C;AACA,iBAAK,IAAIgB,MAAM,GAAG,CAAlB,EAAqBA,MAAM,GAAGD,IAAI,CAACf,GAAD,CAAJ,CAAUO,mBAAV,CAA8BjD,MAA5D,EAAoE0D,MAAM,EAA1E,EAA8E;AAC5E;AACA,mBAAK,IAAIC,OAAO,GAAG,CAAnB,EAAsBA,OAAO,GAAGF,IAAI,CAACf,GAAD,CAAJ,CAAUO,mBAAV,CAA8BS,MAA9B,EAAsCP,aAAtC,CAAoDnD,MAApF,EAA4F2D,OAAO,EAAnG,EAAuG;AACrG;AACA,oBAAIrI,cAAc,KAAKmI,IAAI,CAACf,GAAD,CAAJ,CAAUO,mBAAV,CAA8BS,MAA9B,EAAsCP,aAAtC,CAAoDQ,OAApD,EAA6DjJ,GAApF,EAAyF;AACvFoE,oBAAE,GAAG2E,IAAI,CAACf,GAAD,CAAJ,CAAUO,mBAAV,CAA8BS,MAA9B,EAAsCP,aAAtC,CAAoDQ,OAApD,CAAL;AACD;AACF;AACF;AACF;;AACD,iBAAO7E,EAAP;AACD;;;4BA1UqB;AACpB,iBAAO,KAAKwC,iBAAL,CAAuBsD,QAAvB,EAAP;AACD,S;0BAEsB9K,G,EAAsB;AAC3C,eAAKwH,iBAAL,CAAuBuD,IAAvB,CAA4B/K,GAA5B;AACD;;;4BAE4B;AAC3B,iBAAO,KAAK2H,UAAZ;AACD;;;;;;;uBAhBUJ,iC,EAAiC,qI;AAAA,K;;;aAAjCA,iC;AAAiC,eAAjCA,iCAAiC,K;AAAA,kBAFhC;;;;;sEAEDA,iC,EAAiC;cAH7C,wDAG6C;eAHlC;AACVyD,oBAAU,EAAE;AADF,S;AAGkC,Q;;;;;;;;;;;;;;;;;;;;;;ACjB9C;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA,4C,CAAA;AAKA;;;QAoBaC,iB;;;;;YAAAA;;;;yBAAAA,iB;AAAiB,O;AAAA,iBAFjB,CAAC,wIAAD,C;AAAmC,gBATrC,CACP,4DADO,EAEP,0DAFO,EAGP,kEAHO,EAIP,kEAJO,CASqC;;;;0HAEnCA,iB,EAAiB;AAAA,uBAb1B,4IAa0B;AAbS,kBAGnC,4DAHmC,EAInC,0DAJmC,EAKnC,kEALmC,EAMnC,kEANmC,CAaT;AAPd,kBAGZ,4IAHY;AAOc,O;AAJS,K;;;;;sEAI1BA,iB,EAAiB;cAf7B,sDAe6B;eAfpB;AACRC,sBAAY,EAAE,CACZ,4IADY,CADN;AAIRC,iBAAO,EAAE,CACP,4DADO,EAEP,0DAFO,EAGP,kEAHO,EAIP,kEAJO,CAJD;AAURC,iBAAO,EAAE,CACP,4IADO,CAVD;AAaRC,mBAAS,EAAE,CAAC,wIAAD;AAbH,S;AAeoB,Q;;;;;;;;;;;;;;;;;;ACzB9B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAEaC,U,GAOT,sBAMQ;AAAA,UANIC,OAMJ,uEAAJ,EAAI;;AAAA;;AACJ,WAAK5K,KAAL,GAAa4K,OAAO,CAAC5K,KAArB;AACA,WAAK6K,KAAL,GAAaD,OAAO,CAACC,KAArB;AACA,WAAKC,MAAL,GAAcF,OAAO,CAACE,MAAtB;AACA,WAAKlK,cAAL,GAAsBgK,OAAO,CAAChK,cAAR,GAAyBgK,OAAO,CAAChK,cAAjC,GAAkD,KAAxE;AACA,WAAK6E,IAAL,GAAYmF,OAAO,CAACnF,IAAR,IAAgB,qEAAWC,KAAvC;AACH,K","file":"default~ar-wr-calc-ar-wr-calc-module~oring-and-gland-calc-oring-and-gland-calc-module-es5.js","sourcesContent":["// core imports\r\nimport { Component, OnInit, Input, OnDestroy, Output } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\n\r\n// third party imports\r\nimport { Subscription } from 'rxjs';\r\n\r\n// application imports\r\nimport { DynamicFormTwoColumnLayoutService } from \"../dynamic-form-two-column-layout/dynamic-form-two-column-layout.service\";\r\nimport { CalculatorModel } from \"../../models/calculator.model\";\r\nimport { FormControlModel } from \"../../models/form-control.model\";\r\nimport { ErrorModel } from \"../../models/error.model\";\r\nimport { SwitchButtonModel } from '../../models/switch-button.model';\r\nimport { ORingSizesModel } from '../../models/oRingSizes.model';\r\nimport { ORingSizesDetailModel } from '../../models/oRingSizesDetail.model';\r\nimport { ViewErrorModel } from '../../models/view-error.model';\r\nimport { ControlBaseService } from \"../../shared/services/control-base.service\";\r\nimport { UnitButtonService } from '../../shared/components/unit-button/unit-button.service';\r\nimport { TemperatureButtonService } from \"../../shared/components/temperature-button/temperature-button.service\";\r\nimport { ControlType, ControlSubType, DropdownChooseOptionTitle, ButtonActionKeys, ErrorTypes, Units, supportEmail } from \"../../shared/helpers/constants\";\r\nimport { DashSizeDetailsService } from \"../../shared/components/dash-size-details/dash-size-details.service\";\r\nimport { HelperService } from \"../../shared/services/helper.service\";\r\nimport { DashSizeDetailsComponent } from \"../../shared/components/dash-size-details/dash-size-details.component\";\r\nimport { MaterialChoiceModel } from '../../models/material-choice.model';\r\nimport { ArWrDropDownDataService } from \"../../shared/services/ar-wr-drop-down-data.service\";\r\nimport { DropDownChangeModel } from '../../models/dropdown-change.model';\r\nimport { EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'dynamic-form-two-column-layout',\r\n  templateUrl: './dynamic-form-two-column-layout.component.html',\r\n  styleUrls: ['./dynamic-form-two-column-layout.component.css']\r\n})\r\nexport class DynamicFormTwoColumnLayoutComponent implements OnInit, OnDestroy {\r\n\r\n  @Input() calculatorJSON: CalculatorModel;\r\n  @Input() form: FormGroup;\r\n  @Input() isSubmitted: boolean = false;\r\n  @Input() isShowNotes: boolean = false;\r\n  @Input() decimalPoint: number = 3;\r\n  @Input() isUpdateDecimalPointOnUnitChange = true;\r\n  @Input() isWrAr = false;\r\n\r\n  // events\r\n  @Output() dropdownSelectionChange: EventEmitter<any> = new EventEmitter<any>();\r\n  @Output() numericInputValueChange: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n  supportEmail = supportEmail.EmailPressIn;\r\n  formValueChangesSubscription: Subscription;\r\n\r\n  private clientErrorsArr: ErrorModel[] = [];\r\n  // client errors that doesnot prevent to submit forms/calculation\r\n  // but need to show in client error div\r\n  @Input() set clientErrors(val: ErrorModel[]) {\r\n    this.clientErrorsArr = val;\r\n    // below property call will combined form error and errors of calculation/onSubmit function\r\n    this.getClientErrorsValidations;\r\n  };\r\n  get clientErrors(): ErrorModel[] {\r\n    return this.clientErrorsArr;\r\n  }\r\n\r\n  // client warnings that doesnot prevent to submit forms/calculation\r\n  // but need to show in client warnings div\r\n  private clientWarningsArr: ErrorModel[] = [];\r\n  @Input() set clientWarnings(val: ErrorModel[]) {\r\n    this.clientWarningsArr = val;\r\n    // below property call will combined form error and errors of calculation/onSubmit function\r\n    this.getClientWarnings;\r\n  };\r\n  get clientWarnings(): ErrorModel[] {\r\n    return this.clientWarningsArr;\r\n  }\r\n\r\n  // server errors\r\n  private serverErrorsArr: ErrorModel[] = [];\r\n  @Input() set serverErrors(val: ErrorModel[]) {\r\n    this.serverErrorsArr = val;\r\n    this.helperService.groupClientErrors(this.serverErrorsArr).then((groupedErrors: ViewErrorModel[]) => {\r\n      this.groupedAllServerErrors = groupedErrors;\r\n    });\r\n  };\r\n  get serverErrors(): ErrorModel[] {\r\n    return this.serverErrorsArr;\r\n  }\r\n\r\n  // server warnings\r\n  private serverWarningsArr: ErrorModel[] = [];\r\n  @Input() set serverWarnings(val: ErrorModel[]) {\r\n    this.serverWarningsArr = val;\r\n    this.helperService.groupClientErrors(this.serverWarningsArr).then((groupedWarnings: ViewErrorModel[]) => {\r\n      this.groupedAllServerWarning = groupedWarnings;\r\n    });\r\n  };\r\n  get serverWarnings(): ErrorModel[] {\r\n    return this.serverWarningsArr;\r\n  }\r\n\r\n  flattenedFormControls: FormControlModel[] = [];\r\n  controlType = ControlType;\r\n  controlSubType = ControlSubType;\r\n  errorDetailOpened = false;\r\n  // dropdown default choose option text/label\r\n  dropdownChooseOptionLabel: string = undefined;\r\n  isAddChooseOption = false;\r\n  allClientErrors: ErrorModel[] = [];\r\n  groupedAllClientErrors: ViewErrorModel[] = [];\r\n  groupedAllClientWarning: ViewErrorModel[] = [];\r\n  groupedAllServerErrors: ViewErrorModel[] = [];\r\n  groupedAllServerWarning: ViewErrorModel[] = [];\r\n  allClientWarnings: ErrorModel[] = [];\r\n\r\n  // subscription\r\n  unitChangeSubscription: Subscription;\r\n  temperatureChangeSubscription: Subscription;\r\n\r\n  // constructor\r\n  constructor(\r\n    private readonly controlBaseService: ControlBaseService,\r\n    private readonly unitButtonService: UnitButtonService,\r\n    private readonly temperatureButtonService: TemperatureButtonService,\r\n    private readonly dynamicFormTwoColumnLayoutService: DynamicFormTwoColumnLayoutService,\r\n    private readonly dashSizeDetailsService: DashSizeDetailsService,\r\n    private readonly helperService: HelperService,\r\n    private readonly arWrDropDownDataService: ArWrDropDownDataService\r\n  ) {\r\n    // unit change update calculator values handler\r\n    this.onUnitChangeUpdateCalculator();\r\n    // temperature change update calculator values handler\r\n    this.onTemperatureChangeUpdateCalculator();\r\n\r\n  }\r\n\r\n  // component init handler\r\n  ngOnInit(): void {\r\n    if (this.isWrAr) {\r\n      this.supportEmail = supportEmail.EmailWrAr;\r\n    }\r\n    else {\r\n      this.supportEmail = supportEmail.EmailPressIn;\r\n    }\r\n    // form value changes perform operations\r\n    this.formValueChangesSubscription = this.form.valueChanges.subscribe(val => {\r\n      this.getClientErrorsValidations;\r\n      this.getClientWarnings;\r\n    });\r\n  }\r\n\r\n  // convenience getter for easy access to form fields\r\n  get f() { return this.form.controls; }\r\n\r\n  // get required validation\r\n  get isRequired(): boolean {\r\n    let isReq = false;\r\n    // form control objects keys\r\n    const formControlKeys = Object.keys(this.form.controls);\r\n    // loop through the controls and \r\n    for (let formControlKey of formControlKeys) {\r\n      if (this.form.controls[formControlKey].errors?.required) // required true\r\n      {\r\n        isReq = this.form.controls[formControlKey].errors.required; // true\r\n        break;\r\n      }\r\n    }\r\n    // // for (let index = 0; index < formControlKeys.length; index++) {\r\n    // //   if (this.form.controls[formControlKeys[index]].errors?.required) // required true\r\n    // //   {\r\n    // //     isReq = this.form.controls[formControlKeys[index]].errors.required; // true\r\n    // //     break;\r\n    // //   }\r\n    // // }\r\n    return isReq;\r\n  }\r\n\r\n  /* property to get all client side form control errors and client error that need to show in \r\n  client error div but allow calculator calculation */\r\n  get getClientErrorsValidations(): ErrorModel[] {\r\n    this.allClientErrors = [];\r\n    const controlErrorsArr: ErrorModel[] = [];\r\n    // form control objects keys\r\n    const formControlKeys = Object.keys(this.form.controls);\r\n    // loop through the controls and \r\n    for (let index = 0; index < formControlKeys.length; index++) {\r\n      // skip required error\r\n      if (this.form.controls[formControlKeys[index]].errors?.required) // required true\r\n      {\r\n        continue;\r\n      }\r\n\r\n      const controlErrors: any = this.form.controls[formControlKeys[index]].errors ? (this.form.controls[formControlKeys[index]].errors) : null;\r\n      if (controlErrors instanceof ErrorModel) {\r\n        // skip warnings that setted to form control and warnings that doesnot allow user to submit the form \r\n        if (controlErrors && controlErrors.type === ErrorTypes.Error) {\r\n          controlErrorsArr.push(controlErrors as ErrorModel);\r\n        }\r\n      }\r\n      else if (controlErrors) {\r\n        const errorKeys = Object.keys(controlErrors);\r\n        for (let index = 0; index < errorKeys.length; index++) {\r\n          const error: ErrorModel = controlErrors[errorKeys[index]] as ErrorModel;\r\n          // skip warnings that setted to form control and warnings that doesnot allow user to submit the form \r\n          if (error && error.type === ErrorTypes.Error) {\r\n            controlErrorsArr.push(error);\r\n          }\r\n        }\r\n      }\r\n\r\n      // const controlErrors: ErrorModel = this.form.controls[formControlKeys[index]].errors ? (this.form.controls[formControlKeys[index]].errors as ErrorModel) : null;\r\n      // // skip warnings that setted to form control and warnings that doesnot allow user to submit the form \r\n      // if (controlErrors && controlErrors.type === ErrorTypes.Error) {\r\n      //   controlErrorsArr.push(controlErrors as ErrorModel);\r\n      // }\r\n    }\r\n\r\n    this.allClientErrors = Array.from(new Set(this.clientErrors.concat(controlErrorsArr)));\r\n\r\n    // group the error with field, title\r\n    this.helperService.groupClientErrors(this.allClientErrors).then((groupedErrors: ViewErrorModel[]) => {\r\n      this.groupedAllClientErrors = groupedErrors;\r\n    });\r\n\r\n    this.allClientErrors = this.allClientErrors.slice();\r\n    return this.allClientErrors;\r\n  }\r\n\r\n  // property to get client side form warnings \r\n  // some warning preventing form submission means do not allow user to perform form submission\r\n  // some warnings are just informative and allow to submit form\r\n  get getClientWarnings(): ErrorModel[] {\r\n    this.allClientWarnings = [];\r\n    const controlErrorsAsWarningArr: ErrorModel[] = [];\r\n    // form control objects keys\r\n    const formControlKeys = Object.keys(this.form.controls);\r\n    // loop through the controls and \r\n    for (let index = 0; index < formControlKeys.length; index++) {\r\n      // skip required error\r\n      if (this.form.controls[formControlKeys[index]].errors?.required) // required true\r\n      {\r\n        continue;\r\n      }\r\n      // get warnings that setted to form control and warnings that doesnot allow user to submit the form \r\n      // need to show in client warnings div nstead of client errors div\r\n      // const controlErrorAsWarnings: ErrorModel = this.form.controls[formControlKeys[index]].errors ? (this.form.controls[formControlKeys[index]].errors as ErrorModel) : null;\r\n      // if (controlErrorAsWarnings && controlErrorAsWarnings.type === ErrorTypes.Warning) {\r\n      //   controlErrorsAsWarningArr.push(controlErrorAsWarnings as ErrorModel);\r\n      // }\r\n\r\n      // get warnings that setted to form control and warnings that doesnot allow user to submit the form \r\n      const controlErrorAsWarnings: any = this.form.controls[formControlKeys[index]].errors ? (this.form.controls[formControlKeys[index]].errors as ErrorModel) : null;\r\n      if (controlErrorAsWarnings instanceof ErrorModel) {\r\n        if (controlErrorAsWarnings && controlErrorAsWarnings.type === ErrorTypes.Warning) {\r\n          controlErrorsAsWarningArr.push(controlErrorAsWarnings as ErrorModel);\r\n        }\r\n      }\r\n      else if (controlErrorAsWarnings) {\r\n        const errorKeys = Object.keys(controlErrorAsWarnings);\r\n        for (let index = 0; index < errorKeys.length; index++) {\r\n          const warning: ErrorModel = controlErrorAsWarnings[errorKeys[index]] as ErrorModel;\r\n          // skip warnings that setted to form control and warnings that doesnot allow user to submit the form \r\n          if (warning && warning.type === ErrorTypes.Warning) {\r\n            controlErrorsAsWarningArr.push(warning);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    this.allClientWarnings = Array.from(new Set(this.clientWarnings.concat(controlErrorsAsWarningArr)));\r\n\r\n    // group the warnings with field, title\r\n    this.helperService.groupClientErrors(this.allClientWarnings).then((groupedErrors: ViewErrorModel[]) => {\r\n      this.groupedAllClientWarning = groupedErrors;\r\n    });\r\n\r\n\r\n    this.allClientWarnings = this.allClientWarnings.slice();\r\n    return this.allClientWarnings;\r\n  }\r\n\r\n  // calculated output result errror\r\n  checkErrorOnCalculatedResult(formControl: FormControlModel): boolean {\r\n    let isError = false;\r\n\r\n    if (formControl.sub_type !== ControlSubType.calculated_label) {\r\n      return isError;\r\n    }\r\n\r\n    const serverErrorIndex = this.serverErrors.findIndex((se: ErrorModel) => {\r\n      return se.field === formControl.key;\r\n    });\r\n\r\n    const serverWarningIndex = this.serverWarnings.findIndex((se: ErrorModel) => {\r\n      return se.field === formControl.key;\r\n    });\r\n\r\n    if (serverErrorIndex > -1 || serverWarningIndex > -1) {\r\n      isError = true;\r\n    }\r\n\r\n    return isError;\r\n  }\r\n\r\n  // helper methods\r\n  // columnWidth \r\n  // param => columnLength => accepts number of columns in a row\r\n  // returns the bootstrap col classes with equal width\r\n  columnWidth(columnLength: number, classes?: string[]): string {\r\n    let classesStr = \"\";\r\n    if (classes) {\r\n      classesStr = classes.join(' ');\r\n    }\r\n    const colWidth = this.getSizeNumber(columnLength);\r\n    return `col-12 \tcol-sm-12 \tcol-md-${colWidth} \tcol-lg-${colWidth} \tcol-xl-${colWidth} ${classesStr}`;\r\n  };\r\n\r\n  // column column size\r\n  getSizeNumber(columnLength: number): number {\r\n    return this.controlBaseService.getColumnNumber(columnLength)\r\n  }\r\n\r\n  // show client error\r\n  onShowClientError(index: number): boolean {\r\n    return this.allClientErrors[index].isDetailOpened = !this.allClientErrors[index].isDetailOpened;\r\n  }\r\n\r\n  // show grouped client error\r\n  onShowGroupedClientError(index: number): boolean {\r\n    return this.groupedAllClientErrors[index].isDetailOpened = !this.groupedAllClientErrors[index].isDetailOpened;\r\n  }\r\n\r\n  // show grouped client warning\r\n  onShowGroupedClientWarning(index: number): boolean {\r\n    return this.groupedAllClientWarning[index].isDetailOpened = !this.groupedAllClientWarning[index].isDetailOpened;\r\n  }\r\n\r\n  // show client warning\r\n  onShowClientWarning(index: number): boolean {\r\n    return this.allClientWarnings[index].isDetailOpened = !this.allClientWarnings[index].isDetailOpened;\r\n  }\r\n\r\n  // show server error\r\n  onShowServerError(index: number): boolean {\r\n    return this.serverErrors[index].isDetailOpened = !this.serverErrors[index].isDetailOpened;\r\n  }\r\n\r\n  // show grouped server Error\r\n  onShowGroupedServerError(index: number): boolean {\r\n    return this.groupedAllServerErrors[index].isDetailOpened = !this.groupedAllServerErrors[index].isDetailOpened;\r\n  }\r\n\r\n  // show server warning\r\n  onShowServerWarning(index: number): boolean {\r\n    return this.serverWarnings[index].isDetailOpened = !this.serverWarnings[index].isDetailOpened;\r\n  }\r\n\r\n  // show grouped server warning\r\n  onShowGroupedServerWarning(index: number): boolean {\r\n    return this.groupedAllServerWarning[index].isDetailOpened = !this.groupedAllServerWarning[index].isDetailOpened;\r\n  }\r\n\r\n  // get dropdownlist options\r\n  getDDLOptions(formControlKey: string, ddlType: string) {\r\n    let ddlOptions: FormControlModel[] = [];\r\n    let tempDDLItems: FormControlModel[] = [];\r\n    let isMaterialChoice: boolean = false;\r\n\r\n    switch (ddlType) {\r\n      case ControlSubType.material_choice_dropdown:\r\n        isMaterialChoice = true;\r\n        this.dropdownChooseOptionLabel = DropdownChooseOptionTitle.MaterialChoiceDropdown;\r\n        this.isAddChooseOption = true;\r\n        ddlOptions = [...this.helperService.getMaterialChoiceList(formControlKey)];\r\n        break;\r\n      case ControlSubType.arWrPumptypeDropdown:\r\n        this.dropdownChooseOptionLabel = DropdownChooseOptionTitle.DefaultDropdown;\r\n        this.isAddChooseOption = true;\r\n        tempDDLItems = this.arWrDropDownDataService.getDropdownsItemsByKey(ControlSubType.arWrPumptypeDropdown);\r\n        break;\r\n      case ControlSubType.arWrComponenttypeDropdown:\r\n        this.dropdownChooseOptionLabel = DropdownChooseOptionTitle.DefaultDropdown;\r\n        this.isAddChooseOption = true;\r\n        tempDDLItems = this.arWrDropDownDataService.getDropdownsItemsByKey(ControlSubType.arWrComponenttypeDropdown);\r\n        break;\r\n      case ControlSubType.arWrCompositetypeDropdown:\r\n        this.dropdownChooseOptionLabel = DropdownChooseOptionTitle.DefaultDropdown;\r\n        tempDDLItems = this.arWrDropDownDataService.getDropdownsItemsByKey(ControlSubType.arWrCompositetypeDropdown);\r\n        break;\r\n      case ControlSubType.arWrInterFerenceTargetPressInDropdown:\r\n        this.dropdownChooseOptionLabel = DropdownChooseOptionTitle.DefaultDropdown;\r\n        this.isAddChooseOption = true;\r\n        tempDDLItems = this.arWrDropDownDataService.getDropdownsItemsByKey(ControlSubType.arWrInterFerenceTargetPressInDropdown);\r\n        break;\r\n      case ControlSubType.arWrClearanceTargetDropdown:\r\n        this.dropdownChooseOptionLabel = DropdownChooseOptionTitle.DefaultDropdown;\r\n        this.isAddChooseOption = true;\r\n        tempDDLItems = this.arWrDropDownDataService.getDropdownsItemsByKey(ControlSubType.arWrClearanceTargetDropdown);\r\n        break;\r\n      case ControlSubType.arWrRotatingMaterial:\r\n        this.dropdownChooseOptionLabel = DropdownChooseOptionTitle.DefaultDropdown;\r\n        this.isAddChooseOption = true;\r\n        tempDDLItems = this.arWrDropDownDataService.getDropdownsItemsByKey(ControlSubType.arWrRotatingMaterial);\r\n        break;\r\n      case ControlSubType.arWrStationaryMaterial:\r\n        this.dropdownChooseOptionLabel = DropdownChooseOptionTitle.DefaultDropdown;\r\n        this.isAddChooseOption = true;\r\n        tempDDLItems = this.arWrDropDownDataService.getDropdownsItemsByKey(ControlSubType.arWrStationaryMaterial);\r\n        break;\r\n      default:\r\n        break;\r\n    };\r\n\r\n    if (!isMaterialChoice) {\r\n      ddlOptions = this.helperService.getDropdownItems(formControlKey, tempDDLItems);\r\n    }\r\n    return ddlOptions;\r\n  }\r\n\r\n  // unit change update output values handler\r\n  onUnitChangeUpdateCalculator() {\r\n    // unit switch button click/change subscription\r\n    this.unitChangeSubscription = this.unitButtonService.unit$.subscribe((x: SwitchButtonModel) => {\r\n      if (x) {\r\n        // update units of labels of inputs and labels \r\n        this.dynamicFormTwoColumnLayoutService.updateUnitOfInputControlLabels(x);\r\n        // convert form output labels\r\n        this.dynamicFormTwoColumnLayoutService.convertOutputLabel(x);\r\n      }\r\n    });\r\n  }\r\n\r\n  // temperature change update output values handler\r\n  onTemperatureChangeUpdateCalculator() {\r\n    // unit switch button click/change subscription\r\n    this.temperatureChangeSubscription = this.temperatureButtonService.temperature$.subscribe((x: SwitchButtonModel) => {\r\n      if (x) {\r\n        this.dynamicFormTwoColumnLayoutService.updateTemperatureOfInputControlLabels(x);\r\n      }\r\n    });\r\n  }\r\n\r\n  // button click handler\r\n  buttonClick(e: any, formControl: FormControlModel) {\r\n    // form control type button value work as key for action method\r\n    switch (formControl.value) {\r\n      case ButtonActionKeys.DashSizeDetail:\r\n        // get dash sizes from server\r\n        this.dashSizeDetailsService.getDashSizeDetails().subscribe((oRingSizes: ORingSizesModel) => {\r\n          if (oRingSizes) {\r\n            // send value to subject so subscribers can get the value\r\n            this.dashSizeDetailsService.sendORingSizes(oRingSizes);\r\n            // open the modal of dashSizes\r\n            const dashSizeDetailsComponentModalRef = this.helperService.openNgbModal(DashSizeDetailsComponent);\r\n            // row click event subscription\r\n            dashSizeDetailsComponentModalRef.componentInstance.dashSizeRowClick.subscribe((x: ORingSizesDetailModel) => {\r\n              if (x) {\r\n                this.bindFormControlForORingDashSizes(x);\r\n              }\r\n              dashSizeDetailsComponentModalRef.close();\r\n            });\r\n          }\r\n        });\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  // bind form controls based in the dash size selection\r\n  private bindFormControlForORingDashSizes(dashSizes: ORingSizesDetailModel) {\r\n    this.form.patchValue({\r\n      dashSize: (+dashSizes.dashSize).toFixed(this.unitButtonService.getCurrentUnitValue.id === Units.MILLI_METER ? 2 : 3),\r\n      oringCrossSectionNominal: (+dashSizes.oringCrossSectionSize).toFixed(this.unitButtonService.getCurrentUnitValue.id === Units.MILLI_METER ? 2 : 3),\r\n      oringIdNominal: (+dashSizes.oringDiameterSize).toFixed(this.unitButtonService.getCurrentUnitValue.id === Units.MILLI_METER ? 2 : 3),\r\n      glandIdNominal: (+dashSizes.glandIdSize).toFixed(this.unitButtonService.getCurrentUnitValue.id === Units.MILLI_METER ? 2 : 3),\r\n      glandIdTolerance: (+dashSizes.glandIdTolerance).toFixed(this.unitButtonService.getCurrentUnitValue.id === Units.MILLI_METER ? 2 : 3)\r\n    });\r\n  }\r\n\r\n  // dropdown selection change handler\r\n  // perform any operation on dropdown value changes\r\n  onDropdownSelectionChange(event: DropDownChangeModel) {\r\n    const controlKey = `custom${event.formControl.key.replace(event.formControl.key[0], event.formControl.key[0].toUpperCase())}`;\r\n    const fc = this.form.controls[controlKey];\r\n    if (fc) {\r\n      // when dropdown selected item value is null \r\n      // then enable the custom input with id/key 'custom+{{dropdown key}}'\r\n      if (event.value !== null && event.value && event.value.value > 0) { // standard \r\n        fc.setValue(\"\");\r\n        fc.disable();\r\n      }\r\n      else { // custom\r\n        fc.enable();\r\n      }\r\n    }\r\n    this.dropdownSelectionChange.emit(event);\r\n  }\r\n\r\n  // numeric value change handler\r\n  // perform any operation on dropdown value changes\r\n  onNumericInputValueChange(event: any) {\r\n    // event is typeof FormControl\r\n    this.numericInputValueChange.emit(event);\r\n  }\r\n\r\n  // on component destriy handler\r\n  ngOnDestroy(): void {\r\n    if (this.unitChangeSubscription) {\r\n      this.unitChangeSubscription.unsubscribe();\r\n    }\r\n    if (this.temperatureChangeSubscription) {\r\n      this.temperatureChangeSubscription.unsubscribe();\r\n    }\r\n    if (this.formValueChangesSubscription) {\r\n      this.formValueChangesSubscription.unsubscribe();\r\n    }\r\n  }\r\n}\r\n","<div class=\"sms-section\" [formGroup]=\"form\">\r\n    <div class=\"container\">\r\n        <div class=\"row\">\r\n            <div class=\"col-md-12 p-0\">\r\n                <h2 class=\"cal-heading\">{{calculatorJSON.display_calculator_title}}</h2>\r\n            </div>\r\n        </div>\r\n        <div class=\"row\">\r\n            <!-- left side / first column reactive form part -->\r\n            <div class=\"col-12 col-sm-12 col-md-6 col-lg-6 col-xl-6 no-padding\">\r\n                <div class=\"row {{row.css_classes.join(' ')}}\"\r\n                    [ngClass]=\"{'sms-section__heading': rowIndex === 0, 'sms-section__inputs':rowIndex !== 0}\"\r\n                    *ngFor=\"let row of calculatorJSON.form.left_column.form_layout_row; let rowIndex = index;\">\r\n                    <ng-container *ngFor=\"let column of row.form_layout_columns;let columnIndex = index;\">\r\n                        <ng-container *ngFor=\"let control of column.form_controls\">\r\n                            <div *ngIf=\"control.show\" [ngSwitch]=\"control.type\"\r\n                                [ngClass]=\"{'sms-section__label': (control.type === controlType.label && columnIndex === 0), 'form-group':(rowIndex !== 0 && columnIndex !== 0 && columnIndex !== row.form_layout_columns.length-1 && control.type !== controlType.button), 'sms-section__range fw-600': (columnIndex !== 0 && columnIndex !== row.form_layout_columns.length-1 && control.type !== controlType.button), 'red':checkErrorOnCalculatedResult(control) }\">\r\n                                <!-- textbox -->\r\n                                <!-- label container -->\r\n                                <ng-container *ngSwitchCase=\"controlType.label\">\r\n                                    <ng-container\r\n                                        *ngIf=\"control.sub_type !== controlSubType.calculated_label && control.label === ''\">\r\n                                        &nbsp;\r\n                                    </ng-container>\r\n                                    <ng-container\r\n                                        *ngIf=\"control.label !== '' && control.sub_type !== controlSubType.temperatureLabel && control.sub_type !== controlSubType.degreeLabel\">\r\n                                        {{control.sub_type === controlSubType.temperatureLabel ? \"\" :control.label}}\r\n                                        <!-- required star * span -->\r\n                                        <span class=\"required\"\r\n                                            *ngIf=\"control.required && rowIndex !== 0 && columnIndex === 0\">*</span>\r\n                                    </ng-container>\r\n                                    <!-- Temperature span -->\r\n                                    <span class=\"float-left\"\r\n                                        *ngIf=\"control.sub_type === controlSubType.temperatureLabel\"\r\n                                        [innerHTML]=\"control.label\"></span>\r\n                                    <!-- Degree Label -->\r\n                                    <span class=\"float-left\" *ngIf=\"control.sub_type === controlSubType.degreeLabel\"\r\n                                        [innerHTML]=\"control.label\"></span>\r\n                                </ng-container>\r\n                                <custom-textbox *ngSwitchCase=\"controlType.textbox\" [control]=\"control\" [form]=\"form\"\r\n                                    [isFormSubmitted]=\"isSubmitted\">\r\n                                </custom-textbox>\r\n                                <!-- numeric textbox -->\r\n                                <custom-numeric-textbox *ngSwitchCase=\"controlType.numerictextbox\" [control]=\"control\"\r\n                                    [form]=\"form\" [isFormSubmitted]=\"isSubmitted\"\r\n                                    [isFormatInputOnBlur]=\"(control.sub_type === controlSubType.temperature || control.sub_type === controlSubType.degree) ? false : true\"\r\n                                    [isNegetiveNumber]=\"control.sub_type === controlSubType.temperature ? true : false\"\r\n                                    [maxLength]=\"control.sub_type === controlSubType.degree ? 2 : 6\"\r\n                                    [decimalPoint]=\"control.decimal_point ? control.decimal_point : decimalPoint\"\r\n                                    [isUpdateDecimalPointOnUnitChange]=\"isUpdateDecimalPointOnUnitChange\"\r\n                                    [clientErrors]=\"allClientErrors\" [clientWarnings]=\"allClientWarnings\"\r\n                                    [serverErrors]=\"serverErrors\" [serverWarnings]=\"serverWarnings\"\r\n                                    (valueChange)=\"onNumericInputValueChange($event)\">\r\n                                </custom-numeric-textbox>\r\n                                <!-- dropdown -->\r\n                                <custom-drop-down *ngSwitchCase=\"controlType.dropdown\" [control]=\"control\" [form]=\"form\"\r\n                                    [isFormSubmitted]=\"isSubmitted\"\r\n                                    [options]=\"getDDLOptions(control.key,control.sub_type)\"\r\n                                    [isAddChooseOption]=\"isAddChooseOption\"\r\n                                    [chooseOptionLabel]=\"dropdownChooseOptionLabel\"\r\n                                    (selectionChange)=\"onDropdownSelectionChange($event)\">\r\n                                </custom-drop-down>\r\n                                <ng-container *ngSwitchCase=\"controlType.button\">\r\n                                    <!-- normal button -->\r\n                                    <button *ngIf=\"control.sub_type === controlSubType.button\" [type]=\"control.sub_type\"\r\n                                        class=\"{{control.css_classes?.join(' ')}}\"\r\n                                        (click)=\"buttonClick($event,control)\">{{control.label}}</button>\r\n                                    <!-- button type submit submit button -->\r\n                                    <button *ngIf=\"control.sub_type !== controlSubType.button\" [type]=\"control.sub_type\"\r\n                                        class=\"{{control.css_classes?.join(' ')}}\">{{control.label}}</button>\r\n                                </ng-container>\r\n                            </div>\r\n                        </ng-container>\r\n                    </ng-container>\r\n                </div>\r\n            </div>\r\n            <!-- right side / second column reactive form part -->\r\n            <div class=\"col-12 col-sm-12 col-md-6 col-lg-6 col-xl-6\">\r\n                <div class=\"row {{row.css_classes.join(' ')}}\"\r\n                    [ngClass]=\"{'sms-section__heading': rowIndex === 0, 'sms-section__inputs':rowIndex !== 0}\"\r\n                    *ngFor=\"let row of calculatorJSON.form.right_column.form_layout_row; let rowIndex = index;\">\r\n                    <ng-container class={{column?.css_classes}}\r\n                        *ngFor=\"let column of row.form_layout_columns;let columnIndex = index;\">\r\n                        <ng-container *ngFor=\"let control of column.form_controls\">\r\n                            <div *ngIf=\"control.show\" [ngSwitch]=\"control.type\"\r\n                                [ngClass]=\"{'sms-section__label': (control.type === controlType.label && columnIndex === 0 && control.sub_type !== controlSubType.temperatureLabel), 'form-group':(rowIndex !== 0 && columnIndex !== 0 && columnIndex !== row.form_layout_columns.length-1 && control.type !== controlType.button), 'sms-section__range fw-600': (columnIndex !== 0 && columnIndex !== row.form_layout_columns.length-1 && control.type !== controlType.button && control.type !== controlType.html), 'red':checkErrorOnCalculatedResult(control) }\">\r\n                                <!-- label container -->\r\n                                <ng-container *ngSwitchCase=\"controlType.label\">\r\n                                    <ng-container\r\n                                        *ngIf=\"control.sub_type !== controlSubType.calculated_label && control.label === ''\">\r\n                                        &nbsp;\r\n                                    </ng-container>\r\n                                    <ng-container\r\n                                        *ngIf=\"control.label !== '' && control.sub_type !== controlSubType.temperatureLabel && control.sub_type !== controlSubType.degreeLabel\">\r\n                                        {{control.sub_type === controlSubType.temperatureLabel ? \"\" :control.label}}\r\n                                        <!-- required star * span -->\r\n                                        <span class=\"required\"\r\n                                            *ngIf=\"control.required && rowIndex !== 0 && columnIndex === 0\">*</span>\r\n                                    </ng-container>\r\n                                    <!-- Temperature span -->\r\n                                    <span class=\"float-left\"\r\n                                        *ngIf=\"control.sub_type === controlSubType.temperatureLabel\"\r\n                                        [innerHTML]=\"control.label\"></span>\r\n                                    <!-- Degree Label -->\r\n                                    <span class=\"float-left\" *ngIf=\"control.sub_type === controlSubType.degreeLabel\"\r\n                                        [innerHTML]=\"control.label\"></span>\r\n                                </ng-container>\r\n                                <!-- custom textbox -->\r\n                                <custom-textbox *ngSwitchCase=\"controlType.textbox\" [control]=\"control\" [form]=\"form\"\r\n                                    [isFormSubmitted]=\"isSubmitted\">\r\n                                </custom-textbox>\r\n                                <!-- numeric textbox -->\r\n                                <custom-numeric-textbox *ngSwitchCase=\"controlType.numerictextbox\" [control]=\"control\"\r\n                                    [form]=\"form\" [isFormSubmitted]=\"isSubmitted\"\r\n                                    [isFormatInputOnBlur]=\"(control.sub_type === controlSubType.temperature || control.sub_type === controlSubType.degree) ? false : true\"\r\n                                    [isNegetiveNumber]=\"control.sub_type === controlSubType.temperature ? true : false\"\r\n                                    [maxLength]=\"control.sub_type === controlSubType.degree ? 2 : 6\"\r\n                                    [decimalPoint]=\"control.decimal_point ? control.decimal_point : decimalPoint\"\r\n                                    [isUpdateDecimalPointOnUnitChange]=\"isUpdateDecimalPointOnUnitChange\"\r\n                                    [clientErrors]=\"allClientErrors\" [clientWarnings]=\"allClientWarnings\"\r\n                                    [serverErrors]=\"serverErrors\" [serverWarnings]=\"serverWarnings\"\r\n                                    (valueChange)=\"onNumericInputValueChange($event)\">\r\n                                </custom-numeric-textbox>\r\n                                <!-- HTML -->                                \r\n                                <ng-container *ngSwitchCase=\"controlType.html\">\r\n                                    <span [innerHTML]=\"control.label\"></span>\r\n                                </ng-container>                                \r\n                                <!-- dropdown -->\r\n                                <custom-drop-down *ngSwitchCase=\"controlType.dropdown\" [control]=\"control\" [form]=\"form\"\r\n                                    [isFormSubmitted]=\"isSubmitted\"\r\n                                    [options]=\"getDDLOptions(control.key,control.sub_type)\"\r\n                                    [isAddChooseOption]=\"isAddChooseOption\"\r\n                                    [chooseOptionLabel]=\"dropdownChooseOptionLabel\"\r\n                                    (selectionChange)=\"onDropdownSelectionChange($event)\">\r\n                                </custom-drop-down>\r\n                                <ng-container *ngSwitchCase=\"controlType.button\">\r\n                                    <!-- normal button -->\r\n                                    <button *ngIf=\"control.sub_type === controlSubType.button\" [type]=\"control.sub_type\"\r\n                                        class=\"{{control.css_classes?.join(' ')}}\"\r\n                                        (click)=\"buttonClick($event,control)\">{{control.label}}</button>\r\n                                    <!-- button type submit submit button -->\r\n                                    <button *ngIf=\"control.sub_type !== controlSubType.button\" [type]=\"control.sub_type\"\r\n                                        class=\"{{control.css_classes?.join(' ')}}\">{{control.label}}</button>\r\n                                </ng-container>\r\n                            </div>\r\n                        </ng-container>\r\n                    </ng-container>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n<!-- Client side Errors -->\r\n<div class=\"error-message\" *ngIf=\"isSubmitted && isRequired\">\r\n    <!-- {{\"Please enter a valid value for the fields highlighted in red.\"}} -->\r\n    {{\"Please enter a value for required(*) fields.\"}}\r\n</div>\r\n<!-- client side grouped errors -->\r\n<div *ngIf=\"isSubmitted && groupedAllClientErrors.length > 0\" class=\"error-message\">\r\n    <div class=\"error-message__note\">\r\n        Click '<span>+</span>' for more details\r\n    </div>\r\n    <div *ngFor=\"let gError of groupedAllClientErrors; let gErrorIndex=index;\" class=\"error-body\">\r\n        <ng-container *ngIf=\"gError.title\">\r\n            <div (click)=\"onShowGroupedClientError(gErrorIndex)\" [ngClass]=\"{'selected': gError.isDetailOpened}\">\r\n                <strong title=\"Click for more details\">{{gError.title}}</strong>\r\n            </div>\r\n            <div *ngIf=\"gError.isDetailOpened\">\r\n                <ng-container *ngFor=\"let error of gError.errors\">\r\n                    {{error}}\r\n                </ng-container>\r\n            </div>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"!gError.title\">\r\n            <ng-container *ngFor=\"let error of gError.errors\">\r\n                <div class=\"\">\r\n                    {{error}}\r\n                </div>\r\n            </ng-container>\r\n        </ng-container>\r\n    </div>\r\n</div>\r\n<!-- client side grouped warnings -->\r\n<div *ngIf=\"isSubmitted && groupedAllClientWarning.length > 0\" class=\"warning-message\">\r\n    <div class=\"error-message__note\">\r\n        Click '<span>+</span>' for more details\r\n    </div>\r\n    <div *ngFor=\"let gWarning of groupedAllClientWarning; let gWarningIndex=index;\" class=\"warning-message__body\">\r\n        <ng-container *ngIf=\"gWarning.title\">\r\n            <div (click)=\"onShowGroupedClientWarning(gWarningIndex)\" [ngClass]=\"{'selected': gWarning.isDetailOpened}\">\r\n                <strong title=\"Click for more details\">{{gWarning.title}}</strong>\r\n            </div>\r\n            <div *ngIf=\"gWarning.isDetailOpened\">\r\n                <ng-container *ngFor=\"let warning of gWarning.errors\">\r\n                    {{warning}}\r\n                </ng-container>\r\n            </div>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"!gWarning.title\">\r\n            <ng-container *ngFor=\"let warning of gWarning.errors\">\r\n                <div class=\"\">\r\n                    {{warning}}\r\n                </div>\r\n            </ng-container>\r\n        </ng-container>\r\n    </div>\r\n</div>\r\n<!-- grouped server errors -->\r\n<div *ngIf=\"isSubmitted && groupedAllServerErrors && groupedAllServerErrors.length > 0\" class=\"error-message\">\r\n    <div class=\"error-message__note\">\r\n        Click '<span>+</span>' for more details</div>\r\n    <div *ngFor=\"let gServerError of groupedAllServerErrors; let gServerErrorIndex=index;\" class=\"error-body\">\r\n        <ng-container *ngIf=\"gServerError.title\">\r\n            <div (click)=\"onShowGroupedServerError(gServerErrorIndex)\"\r\n                [ngClass]=\"{'selected': gServerError.isDetailOpened}\">\r\n                <strong title=\"Click for more details\">{{gServerError.title}}</strong>\r\n            </div>\r\n            <div *ngIf=\"gServerError.isDetailOpened\">\r\n                <ng-container *ngFor=\"let error of gServerError.errors\">\r\n                    {{error}}\r\n                </ng-container>\r\n            </div>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"!gServerError.title\">\r\n            <ng-container *ngFor=\"let error of gServerError.errors\">\r\n                <div class=\"\">\r\n                    {{error}}\r\n                </div>\r\n            </ng-container>\r\n        </ng-container>\r\n    </div>\r\n</div>\r\n<!-- Grouped Server side warnings -->\r\n<div *ngIf=\"isSubmitted && groupedAllServerWarning && groupedAllServerWarning.length > 0\" class=\"warning-message\">\r\n    <div class=\"error-message__note\">Click '<span>+</span>' for more details</div>\r\n    <div *ngFor=\"let gServerWarning of groupedAllServerWarning; let gServerWarningIndex=index;\"\r\n        class=\"warning-message__body\">\r\n        <ng-container *ngIf=\"gServerWarning.title\">\r\n            <div *ngIf=\"gServerWarning.title\" (click)=\"onShowGroupedServerWarning(gServerWarningIndex)\"\r\n                [ngClass]=\"{'selected': gServerWarning.isDetailOpened}\">\r\n                <strong title=\"Click for more details\">{{gServerWarning.title}}</strong>\r\n            </div>\r\n            <div *ngIf=\"gServerWarning.isDetailOpened\">\r\n                <ng-container *ngFor=\"let warning of gServerWarning.errors\">\r\n                    {{warning}}\r\n                </ng-container>\r\n            </div>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"!gServerWarning.title\">\r\n            <ng-container *ngFor=\"let warning of gServerWarning.errors\">\r\n                <div class=\"\">\r\n                    {{warning}}\r\n                </div>\r\n            </ng-container>\r\n        </ng-container>\r\n    </div>\r\n</div>\r\n<!-- Form Output -->\r\n<div class=\"container\">\r\n    <div class=\"row calculation-results\">\r\n        <ng-container *ngFor=\"let output of calculatorJSON.form_output; let outputIndex=index;\">\r\n            <div *ngIf=\"output.show\" class=\"{{output?.css_classes.join(' ')}}\">\r\n                <!-- <div class=\"{{columnWidth(calculatorJSON.form_output.length)}} {{output?.css_classes.join(' ')}}\"> -->\r\n                <!-- <div class=\"row {{output?.css_classes.join(' ')}}\"> -->\r\n                <div class=\"row\">\r\n                    <div class=\"col-md-12 column\">\r\n                        <div class=\"row\">\r\n                            <div class=\"col-12 col-sm-12 col-md-12 col-lg-12 col-xl-12 p-0\">\r\n                                <h3 class=\"cal-heading\">{{output.display_title}}&nbsp;{{output?.display_output_title}}\r\n                                </h3>\r\n                            </div>\r\n                        </div>\r\n                        <ng-container *ngFor=\"let row of output.row;let rowIndex= index;\">\r\n                            <div *ngIf=\"(row.show != null || row.show != undefined ? row.show : true)\"\r\n                                class=\"row {{row.css_classes.join(' ')}}\"\r\n                                [ngClass]=\"{'calculation-results__heading': rowIndex === 0, 'calculation-results__outputs':true}\">\r\n                                <!-- 'calculation-results__outputs':rowIndex !== 0 -->\r\n                                <!-- show or hide output row -->\r\n                                <!-- <ng-container *ngIf=\"(row.show != null || row.show != undefined ? row.show : true)\"> -->\r\n                                <!-- output row columns -->\r\n                                <ng-container class={{column?.css_classes}}\r\n                                    *ngFor=\"let column of row.form_layout_columns; let columnIndex = index;\">\r\n                                    <ng-container *ngFor=\"let control of column.form_controls\">\r\n                                        <div *ngIf=\"control.show\" [ngSwitch]=\"control.type\"\r\n                                            [ngClass]=\"{'calculation-results__label': (control.type === controlType.label && columnIndex === 0), 'calculation-results__range fw-600': (columnIndex !== 0), 'red':checkErrorOnCalculatedResult(control) }\">\r\n                                            <!-- label output -->\r\n                                            <ng-container *ngSwitchCase=\"controlType.label\">\r\n                                                <!-- <ng-container\r\n                                                *ngIf=\"control.sub_type !== controlSubType.calculated_label && control.label === ''\">\r\n                                                &nbsp;\r\n                                            </ng-container> -->\r\n                                                <ng-container\r\n                                                    *ngIf=\"control.label !== '' && control.sub_type !== controlSubType.temperatureLabel && control.sub_type !== controlSubType.degreeLabel\">\r\n                                                    {{control.sub_type === controlSubType.temperatureLabel ? \"\"\r\n                                                    :control.label}}\r\n                                                    <!-- required star * span -->\r\n                                                    <span class=\"required\"\r\n                                                        *ngIf=\"control.required && rowIndex !== 0 && columnIndex === 0\">*</span>\r\n                                                </ng-container>\r\n                                                <!-- Temperature span -->\r\n                                                <span *ngIf=\"control.sub_type === controlSubType.temperatureLabel\"\r\n                                                    [innerHTML]=\"control.label\"></span>\r\n                                            </ng-container>\r\n                                        </div>\r\n                                    </ng-container>\r\n                                </ng-container>\r\n                                <!-- </ng-container> -->\r\n                            </div>\r\n                        </ng-container>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </ng-container>\r\n    </div>\r\n    <div *ngIf=\"isShowNotes\" class=\"row pt-2\">\r\n        <div class=\"col-12 col-sm-12 col-md-1 col-lg-1 col-xl-1\">\r\n            Notes:\r\n        </div>\r\n        <div class=\"col-12 col-sm-12 col-md-11 col-lg-11 col-xl-11\">\r\n            <textarea name=\"txtAreaNotes\" id=\"txtAreaNotes\" cols=\"30\" rows=\"5\"></textarea>\r\n        </div>\r\n    </div>\r\n    <div class=\"row text-right mailto-button\">\r\n        <div class=\"col-12 col-lg-12 col-md-12 col-sm-12 col-xl-12\">\r\n            <!-- last column then add the mail to div -->\r\n            <a href=\"mailto:mhitchens@gtweed.com?subject=Submit RFQ\">Submit RFQ</a>\r\n            <a href=\"mailto:{{supportEmail}}?subject=Request Engineering Support\">Request\r\n                Engineering Support</a>\r\n        </div>\r\n    </div>\r\n</div>","// core imports\r\nimport { Injectable } from '@angular/core';\r\n// thirs party imports\r\nimport { BehaviorSubject } from 'rxjs';\r\n// application imports\r\nimport { CalculatorModel } from '../../models/calculator.model';\r\nimport { FormOutputModel } from '../../models/form-output.model';\r\nimport { FormRowModel } from '../../models/form-row.model';\r\nimport { SwitchButtonModel } from '../../models/switch-button.model';\r\nimport { TwoColumnFormModel } from '../../models/two_column_form.model';\r\nimport { Units, ControlSubType, Temperature } from '../../shared/helpers/constants';\r\nimport { HelperService } from \"../../shared/services/helper.service\";\r\nimport { FormControlModel } from '../../models/form-control.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DynamicFormTwoColumnLayoutService {\r\n  private readonly calculatorSubject: BehaviorSubject<CalculatorModel> = new BehaviorSubject<CalculatorModel>(null);\r\n  readonly calculator$ = this.calculatorSubject.asObservable();\r\n\r\n  constructor(private helperService: HelperService) { }\r\n\r\n  private get calculator(): CalculatorModel {\r\n    return this.calculatorSubject.getValue();\r\n  }\r\n\r\n  private set calculator(val: CalculatorModel) {\r\n    this.calculatorSubject.next(val);\r\n  }\r\n\r\n  public get getCurrentValue() {\r\n    return this.calculator;\r\n  }\r\n\r\n  public sendCalculator(val: CalculatorModel) {\r\n    this.calculator = { ...val };\r\n  }\r\n\r\n  // show or hide controls based on options => Nominal, Tolerance and MinAndMax\r\n  showOrHideControlsBasedOnOption(selectedOption: number) {\r\n    // copy calculator data\r\n    let updateCalculator: CalculatorModel = { ...this.calculator };\r\n    // update selected option value\r\n    updateCalculator.toolbarOption.value = selectedOption.toString();\r\n    // copy calculator form data\r\n    const calculatorForm: TwoColumnFormModel = { ...this.calculator.form };\r\n    // set show flag of left column\r\n    const calculatorLeftColumnRows = this.setShowFlag(calculatorForm.left_column.form_layout_row, selectedOption);\r\n    // set show flag of right column\r\n    const calculatorRightColumnRows = this.setShowFlag(calculatorForm.right_column.form_layout_row, selectedOption);\r\n    // update updatedCalculatorForm object\r\n    const updatedCalculatorForm: TwoColumnFormModel = { ...calculatorForm, left_column: { form_layout_row: calculatorLeftColumnRows }, right_column: { form_layout_row: calculatorRightColumnRows } };\r\n    // form output \r\n    let formOutput: FormOutputModel[] = updateCalculator.form_output;\r\n    if (formOutput.length > 0) {\r\n      for (let index = 0; index < formOutput.length; index++) {\r\n        // copy form output object\r\n        let formOutputObj: FormOutputModel = { ...formOutput[index] };\r\n        // set show flag\r\n        const formOutputObjRow: FormRowModel[] = this.setShowFlag(formOutputObj.row, selectedOption);\r\n        // merge row of form output\r\n        formOutputObj = { ...formOutputObj, row: formOutputObjRow };\r\n        // update form output with updated show flag\r\n        formOutput[index] = formOutputObj;\r\n      }\r\n    }\r\n    // updated copied calculator object\r\n    updateCalculator = { ...updateCalculator, form: updatedCalculatorForm, form_output: formOutput };\r\n    this.calculator = { ...this.calculator, ...updateCalculator };\r\n  }\r\n\r\n  // update input controls units\r\n  updateUnitOfInputControlLabels(selectedUnit: SwitchButtonModel) {\r\n    // Immutable way of updating the object\r\n    let updateCalculator: CalculatorModel = { ...this.calculator };\r\n    // copy calculator form data\r\n    const calculatorForm: TwoColumnFormModel = { ...this.calculator.form };\r\n\r\n    // set unit of left column labels of input form\r\n    const calculatorLeftColumnRows = this.setUnit(calculatorForm.left_column.form_layout_row, selectedUnit);\r\n\r\n    // set unit of right column labels of input form\r\n    const calculatorRightColumnRows = this.setUnit(calculatorForm.right_column.form_layout_row, selectedUnit);\r\n\r\n    // set unit of calculated output\r\n    for (let index = 0; index < updateCalculator.form_output.length; index++) {\r\n      updateCalculator.form_output[index].row = this.setUnit(updateCalculator.form_output[index].row, selectedUnit);\r\n    }\r\n\r\n    // set pressure unit of the calculated output of pressure type output\r\n\r\n    // calculator form object\r\n    const updatedCalculatorForm: TwoColumnFormModel = { ...calculatorForm, left_column: { form_layout_row: calculatorLeftColumnRows }, right_column: { form_layout_row: calculatorRightColumnRows } };\r\n    updateCalculator = { ...updateCalculator, form: updatedCalculatorForm };\r\n    this.calculator = { ...updateCalculator };\r\n  }\r\n\r\n  // update temperature of label of temperature controls\r\n  updateTemperatureOfInputControlLabels(selectedTemperature: SwitchButtonModel) {\r\n    let updateCalculator: CalculatorModel = { ...this.calculator };\r\n    // copy calculator form data\r\n    const calculatorForm: TwoColumnFormModel = { ...this.calculator.form };\r\n    // set show flag of left column\r\n    const calculatorLeftColumnRows = this.setTemperature(calculatorForm.left_column.form_layout_row, selectedTemperature);\r\n    // set show flag of right column\r\n    const calculatorRightColumnRows = this.setTemperature(calculatorForm.right_column.form_layout_row, selectedTemperature);\r\n    // set unit of calculated output unit label update\r\n    for (let index = 0; index < updateCalculator.form_output.length; index++) {\r\n      updateCalculator.form_output[index].row = this.setTemperature(updateCalculator.form_output[index].row, selectedTemperature);\r\n    }\r\n    // calculator form object\r\n    const updatedCalculatorForm: TwoColumnFormModel = { ...calculatorForm, left_column: { form_layout_row: calculatorLeftColumnRows }, right_column: { form_layout_row: calculatorRightColumnRows } };\r\n    updateCalculator = { ...updateCalculator, form: updatedCalculatorForm };\r\n    this.calculator = { ...this.calculator, ...updateCalculator };\r\n  }\r\n\r\n  // form output label value from Inch to Millimeter and vice versa \r\n  convertOutputLabel(selectedUnit: SwitchButtonModel) {\r\n    // copy calculator data\r\n    let updateCalculator: CalculatorModel = { ...this.calculator };\r\n\r\n    // Convert left form data\r\n    // loop through each form left column row\r\n    for (let rowIndex = 0; rowIndex < updateCalculator.form.left_column.form_layout_row.length; rowIndex++) {\r\n      // loop through columns\r\n      for (let columnIndex = 0; columnIndex < updateCalculator.form.left_column.form_layout_row[rowIndex].form_layout_columns.length; columnIndex++) {\r\n        // loop through controls\r\n        for (let controlIndex = 0; controlIndex < updateCalculator.form.left_column.form_layout_row[rowIndex].form_layout_columns[columnIndex].form_controls.length; controlIndex++) {\r\n          // get form control of JSON\r\n          const formControl = updateCalculator.form.left_column.form_layout_row[rowIndex].form_layout_columns[columnIndex].form_controls[controlIndex];\r\n          // get fields key from resp data\r\n          if (formControl.sub_type === ControlSubType.calculated_label && formControl.label) {\r\n            // set JSON output label\r\n            // bind calculated result to output label\r\n            updateCalculator.form.left_column.form_layout_row[rowIndex].form_layout_columns[columnIndex].form_controls[controlIndex].label = (selectedUnit.id === Units.MILLI_METER ? this.helperService.convertToMillimeter((+formControl.label)) : this.helperService.convertToInch((+formControl.label)));\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Comvert right form data\r\n    // loop through each form right column row\r\n    for (let rowIndex = 0; rowIndex < updateCalculator.form.right_column.form_layout_row.length; rowIndex++) {\r\n      // loop through columns\r\n      for (let columnIndex = 0; columnIndex < updateCalculator.form.right_column.form_layout_row[rowIndex].form_layout_columns.length; columnIndex++) {\r\n        // loop through controls\r\n        for (let controlIndex = 0; controlIndex < updateCalculator.form.right_column.form_layout_row[rowIndex].form_layout_columns[columnIndex].form_controls.length; controlIndex++) {\r\n          // get form control of JSON\r\n          const formControl = updateCalculator.form.right_column.form_layout_row[rowIndex].form_layout_columns[columnIndex].form_controls[controlIndex];\r\n          // get fields key from resp data\r\n          // const responseDataKeys = Object.keys(resp.data);\r\n          if (formControl.sub_type === ControlSubType.calculated_label && formControl.label) {\r\n            // set JSON output label\r\n            // bind calculated result to output label\r\n            updateCalculator.form.right_column.form_layout_row[rowIndex].form_layout_columns[columnIndex].form_controls[controlIndex].label = (selectedUnit.id === Units.MILLI_METER ? this.helperService.convertToMillimeter((+formControl.label)) : this.helperService.convertToInch((+formControl.label)));\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    this.calculator = { ...this.calculator, ...updateCalculator };\r\n  }\r\n\r\n  // get default value of control\r\n  getDefaultControlValueFromCalculatorJSONConfig(formControlKey: string) {\r\n    // cpy calculator form data\r\n    const calculatorForm: TwoColumnFormModel = { ...this.calculator.form };\r\n    // left column\r\n    let fc: FormControlModel = this.getFormControl(calculatorForm.left_column.form_layout_row, formControlKey);\r\n    if (fc && fc.key && fc.defaultvalue) {\r\n      return fc.defaultvalue;\r\n    }\r\n    else {\r\n      // right column\r\n      fc = this.getFormControl(calculatorForm.right_column.form_layout_row, formControlKey);\r\n      if (fc && fc.key && fc.defaultvalue) {\r\n        return fc.defaultvalue;\r\n      }\r\n      else {\r\n        return null;\r\n      }\r\n    }\r\n  }\r\n\r\n  // set show flag of calculator config\r\n  private setShowFlag(rows: FormRowModel[], selectedOption: number) {\r\n    // iterate over left column rows\r\n    for (let row = 0; row < rows.length; row++) {\r\n      // iterate over left column columns\r\n      for (let column = 0; column < rows[row].form_layout_columns.length; column++) {\r\n        // iterate over left column controls\r\n        for (let control = 0; control < rows[row].form_layout_columns[column].form_controls.length; control++) {\r\n          if (rows[row].form_layout_columns[column].form_controls[control].hasOwnProperty('show')) {\r\n            // controlGroup is an array which holds the options(Nominal = 1, Tolerance = 2 and MinandMax = 3) values on which we need to show the controls\r\n            const controlGroup: number[] = rows[row].form_layout_columns[column].form_controls[control]?.show_control_option;\r\n            if (controlGroup && controlGroup.length) { // has control group array\r\n              if (controlGroup.includes(selectedOption)) { // check form control belong to the controlGroup\r\n                rows[row].form_layout_columns[column].form_controls[control].show = true;\r\n              }\r\n              else {\r\n                rows[row].form_layout_columns[column].form_controls[control].show = false;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return rows;\r\n  }\r\n\r\n  // set units\r\n  private setUnit(rows: FormRowModel[], selectedUnit: SwitchButtonModel) {\r\n    // iterate over left column rows\r\n    for (let row = 0; row < rows.length; row++) {\r\n      // iterate over left column columns\r\n      for (let column = 0; column < rows[row].form_layout_columns.length; column++) {\r\n        // iterate over column controls\r\n        for (let control = 0; control < rows[row].form_layout_columns[column].form_controls.length; control++) {\r\n          // check control sub-type is unitLabel and update the label and value\r\n          if (rows[row].form_layout_columns[column].form_controls[control].sub_type === ControlSubType.unitLabel) {\r\n            // set display label value\r\n            rows[row].form_layout_columns[column].form_controls[control].label = selectedUnit.display_Short_title;\r\n            if (Units.INCH === +(selectedUnit.id)) {\r\n              rows[row].form_layout_columns[column].form_controls[control].value = Units.INCH;\r\n            }\r\n            else if (Units.MILLI_METER === +(selectedUnit.id)) {\r\n              rows[row].form_layout_columns[column].form_controls[control].value = Units.MILLI_METER;\r\n            }\r\n            else {\r\n              rows[row].form_layout_columns[column].form_controls[control].value = Units.INCH;\r\n            }\r\n          }\r\n          else if (rows[row].form_layout_columns[column].form_controls[control].sub_type === ControlSubType.cteUnitLabel) {\r\n            if (Units.INCH === +(selectedUnit.id)) {\r\n              // set display label value\r\n              rows[row].form_layout_columns[column].form_controls[control].label = \"in/in/°F\";\r\n              rows[row].form_layout_columns[column].form_controls[control].value = Units.INCH;\r\n            }\r\n            else if (Units.MILLI_METER === +(selectedUnit.id)) {\r\n              // set display label value\r\n              rows[row].form_layout_columns[column].form_controls[control].label = \"mm/mm/°C\";\r\n              rows[row].form_layout_columns[column].form_controls[control].value = Units.MILLI_METER;\r\n            }\r\n            else {\r\n              // set display label value\r\n              rows[row].form_layout_columns[column].form_controls[control].label = \"in/in/°F\";\r\n              rows[row].form_layout_columns[column].form_controls[control].value = Units.INCH;\r\n            }\r\n          }\r\n\r\n          // check control sub-type is pressureLabel and update the label and value\r\n          if (rows[row].form_layout_columns[column].form_controls[control].sub_type === ControlSubType.pressureLabel) {\r\n            // set display label value              \r\n            if (Units.MILLI_METER === +(selectedUnit.id)) {\r\n              rows[row].form_layout_columns[column].form_controls[control].label = 'bar';\r\n            }\r\n            else {\r\n              rows[row].form_layout_columns[column].form_controls[control].label = 'psi';\r\n            }\r\n          }\r\n\r\n          // check control sub-type is outputHeaderUnitLabel and update the label and value\r\n          if (rows[row].form_layout_columns[column].form_controls[control].sub_type === ControlSubType.outputHeaderUnitLabel) {\r\n            // set display label value              \r\n            if (Units.MILLI_METER === +(selectedUnit.id)) {\r\n              rows[row].form_layout_columns[column].form_controls[control].label = 'mm';\r\n            }\r\n            else {\r\n              rows[row].form_layout_columns[column].form_controls[control].label = 'Inch';\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return rows;\r\n  }\r\n\r\n  // set temperature lable\r\n  private setTemperature(rows: FormRowModel[], selectedTemperature: SwitchButtonModel) {\r\n    // iterate over left column rows\r\n    for (let row = 0; row < rows.length; row++) {\r\n      // iterate over left column columns\r\n      for (let column = 0; column < rows[row].form_layout_columns.length; column++) {\r\n        // iterate over column controls\r\n        for (let control = 0; control < rows[row].form_layout_columns[column].form_controls.length; control++) {\r\n          // check control sub-type is unit and update the label and value\r\n          if (rows[row].form_layout_columns[column].form_controls[control].sub_type === ControlSubType.temperatureLabel) {\r\n            // set display label value\r\n            rows[row].form_layout_columns[column].form_controls[control].label = selectedTemperature.display_Short_title;\r\n            if (Temperature.CELCIUS === +(selectedTemperature.id)) {\r\n              rows[row].form_layout_columns[column].form_controls[control].value = Temperature.CELCIUS;\r\n            }\r\n            else if (Temperature.FAHRENHEIT === +(selectedTemperature.id)) {\r\n              rows[row].form_layout_columns[column].form_controls[control].value = Temperature.FAHRENHEIT;\r\n            }\r\n            else {\r\n              rows[row].form_layout_columns[column].form_controls[control].value = Temperature.CELCIUS;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return rows;\r\n  }\r\n\r\n  // set convert output\r\n  private convertOutputToInchOrMillimeter(rows: FormRowModel[], selectedUnit: SwitchButtonModel) {\r\n    // iterate over left column rows\r\n    for (let row = 0; row < rows.length; row++) {\r\n      // iterate over left column columns\r\n      for (let column = 0; column < rows[row].form_layout_columns.length; column++) {\r\n        // iterate over left column controls\r\n        for (let control = 0; control < rows[row].form_layout_columns[column].form_controls.length; control++) {\r\n          if (rows[row].form_layout_columns[column].form_controls[control].hasOwnProperty('sub_type')) {\r\n            // const controlKey = this.control?.key;\r\n            // temperature conversion\r\n            if (rows[row].form_layout_columns[column].form_controls[control].sub_type === ControlSubType.calculated_label) {\r\n              const currentVal = rows[row].form_layout_columns[column].form_controls[control].value;\r\n              if (currentVal) {\r\n                const convertedValue = selectedUnit.id === Units.MILLI_METER ? this.helperService.convertToMillimeter(currentVal) : this.helperService.convertToInch(currentVal);\r\n                rows[row].form_layout_columns[column].form_controls[control].value = convertedValue;\r\n                rows[row].form_layout_columns[column].form_controls[control].label = `${convertedValue} %`;\r\n              }\r\n              else {\r\n                // default value                \r\n                rows[row].form_layout_columns[column].form_controls[control].label = \" %\";\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return rows;\r\n  }\r\n\r\n  // set temperature lable\r\n  private getFormControl(rows: FormRowModel[], formControlKey: String): FormControlModel {\r\n    let fc: FormControlModel = new FormControlModel({});\r\n    // iterate over left column rows\r\n    for (let row = 0; row < rows.length; row++) {\r\n      // iterate over left column columns\r\n      for (let column = 0; column < rows[row].form_layout_columns.length; column++) {\r\n        // iterate over column controls\r\n        for (let control = 0; control < rows[row].form_layout_columns[column].form_controls.length; control++) {\r\n          // key matched\r\n          if (formControlKey === rows[row].form_layout_columns[column].form_controls[control].key) {\r\n            fc = rows[row].form_layout_columns[column].form_controls[control];\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return fc;\r\n  }\r\n}\r\n","// core imports\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\n\n// application imports\nimport { DynamicFormTwoColumnLayoutComponent } from './dynamic-form-two-column-layout/dynamic-form-two-column-layout.component';\nimport { DynamicFormTwoColumnLayoutService } from \"./dynamic-form-two-column-layout/dynamic-form-two-column-layout.service\";\nimport { SharedModule } from \"../shared/shared.module\";\n\n@NgModule({\n  declarations: [\n    DynamicFormTwoColumnLayoutComponent\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SharedModule\n  ],\n  exports: [\n    DynamicFormTwoColumnLayoutComponent\n  ],\n  providers: [DynamicFormTwoColumnLayoutService]\n})\nexport class DynamicFormModule { }\n","import { ErrorTypes } from '../shared/helpers/constants';\r\n\r\nexport class ErrorModel {\r\n    field: string;\r\n    title: string;\r\n    detail: string;\r\n    isDetailOpened: boolean;\r\n    type: number; // error = 1 and warning = 2\r\n\r\n    constructor(options: {\r\n        field?: string,\r\n        title?: string,\r\n        detail?: string,\r\n        isDetailOpened?: boolean;\r\n        type?: number;\r\n    } = {}) {\r\n        this.field = options.field;\r\n        this.title = options.title;\r\n        this.detail = options.detail;\r\n        this.isDetailOpened = options.isDetailOpened ? options.isDetailOpened : false;\r\n        this.type = options.type || ErrorTypes.Error\r\n    }\r\n}"]}