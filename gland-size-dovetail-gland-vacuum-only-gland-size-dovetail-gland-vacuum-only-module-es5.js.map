{"version":3,"sources":["webpack:///client/app/oring-and-gland-calc/rectangle-gland-calc/gland-size-dovetail-gland-vacuum-only/gland-size-dovetail-gland-vacuum-only-routing.module.ts","webpack:///client/app/oring-and-gland-calc/rectangle-gland-calc/gland-size-dovetail-gland-vacuum-only/gland-size-dovetail-gland-vacuum-only.component.ts","webpack:///client/app/oring-and-gland-calc/rectangle-gland-calc/gland-size-dovetail-gland-vacuum-only/gland-size-dovetail-gland-vacuum-only.component.html","webpack:///client/app/oring-and-gland-calc/rectangle-gland-calc/gland-size-dovetail-gland-vacuum-only/gland-size-dovetail-gland-vacuum-only.module.ts","webpack:///client/app/oring-and-gland-calc/rectangle-gland-calc/gland-size-dovetail-gland-vacuum-only/gland-size-dovetail-gland-vacuum-only.service.ts"],"names":["routes","path","component","pathMatch","GlandSizeDovetailGlandVacuumOnlyRoutingModule","forChild","imports","exports","GlandSizeDovetailGlandVacuumOnlyComponent","controlBaseService","authService","rectangleGlandCalcService","dynamicFormTwoColumnLayoutService","printService","unitButtonService","temperatureButtonService","rectangleGlandCalcValidationService","glandSizeDovetailGlandVacuumOnlyService","helperService","toastService","flattenedFormControls","controlType","isSubmitted","payLoad","bottomRadiiMaxLimit","clientErrors","clientWarnings","serverErrors","serverWarnings","rectangleJSONConfig","getCurrentGlandSizeCalcConfigValue","initializeOringConfig","glandSizeDataSubscription","glandSizeCalcConfig$","subscribe","x","onUnitChangeUpdateCalculator","onTemperatureChangeUpdateCalculator","glandSizeJsonConfig","glandSizeDovetailGlandVacuumOnly","calculators","calculatorConfig","sendCalculator","createForm","CalculatedData","fieldName","glandSizeDovetailGlandForm","controls","value","toFixed","getCurrentUnitValue","id","MILLI_METER","fieldValue","unitChangeSubscription","unit$","Object","assign","convertedForm","convertFormUnitControlValuesAndSet","form","onSubmit","leftFormControls","left_column","form_layout_row","map","row","form_layout_columns","column","formControls","index","form_controls","length","fc","get","key","show","push","rightFormControls","right_column","toolbarOption","flatten","filteredControls","filter","type","label","button","toFormGroup","validations","jsonConfigValidationsArray","form_validation","validationFuncKey","OPERATING_TEMPERATURE_VALIDATION","operatingTemperatureValidation","O_RING_CROSS_NOMINAL_AS568A_STANDARD_SECTION_VALIDATION","oringCrossSectionNominalValidation","ORING_ID_AS568A_STANDARD_WARNING","oRingIDAS568AStandardsWarning","O_RING_ID_NOMINAL_SHOULD_BE_LESS_THAN_MAX_ORING_ID_VALUE_VALIDATION","oringIDNominalLargerThanMaxOringIDValidation","setValidators","resetErroAndWarnings","resetCalculatedLabelValue","invalid","createGland","getCurrentTemperatureValue","resp","data","error","slice","warning","responseDataKeys","keys","rowIndex","columnIndex","controlIndex","formControl","keyIndex","sub_type","calculated_label","calculatedDegreeLabel","outputIndex","form_output","undefined","isNaN","parseFloat","setAuth","console","log","authenticate","pipe","r","temperatureChangeSubscription","temperature$","resetFormAndCalculation","formControlKeys","formControlDefaultValue","getDefaultControlValueFromCalculatorJSONConfig","setValue","generatePdf","formAndOutputData","calculatorType","ORingDovetailGlandVacuumOnly","localStorage","setItem","DOVETAIL_GLAND","JSON","stringify","showSucces","unsubscribe","calculatedData","val","currentUnit","unit","toString","convertToMillimeter","convertToInch","selector","templateUrl","styleUrls","GlandSizeDovetailGlandVacuumOnlyModule","declarations","providers","GlandSizeDovetailGlandVacuumOnlyService","_http","baseUrl","settings","env","api","unitTemp","body","inputOption","WithMinMax","calculationType","GLAND_SIZING","glandType","DOVETAIL","post","providedIn"],"mappings":"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","file":"gland-size-dovetail-gland-vacuum-only-gland-size-dovetail-gland-vacuum-only-module-es5.js","sourcesContent":["import { NgModule } from \"@angular/core\";\r\nimport { Routes, RouterModule } from \"@angular/router\";\r\n\r\nimport { GlandSizeDovetailGlandVacuumOnlyComponent } from \"./gland-size-dovetail-gland-vacuum-only.component\";\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '', component: GlandSizeDovetailGlandVacuumOnlyComponent, pathMatch: 'full'\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [\r\n        RouterModule.forChild(routes)\r\n    ],\r\n    exports: [RouterModule]\r\n})\r\nexport class GlandSizeDovetailGlandVacuumOnlyRoutingModule { }","// core imports\nimport { Component, OnInit, OnDestroy } from '@angular/core';\nimport { FormGroup, ValidatorFn } from '@angular/forms';\n\n// third party imports\nimport { first } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\n\n// application imports\nimport { DynamicFormTwoColumnLayoutService } from \"../../../dynamic-form/dynamic-form-two-column-layout/dynamic-form-two-column-layout.service\";\nimport { CalculatorModel } from \"../../../models/calculator.model\";\nimport { FormControlModel } from '../../../models/form-control.model';\nimport { FormColumnModel } from '../../../models/form-column.model';\nimport { SwitchButtonModel } from '../../../models/switch-button.model';\nimport { ErrorModel } from '../../../models/error.model';\nimport { BaseModel } from '../../../models/base.model';\nimport { RectangleGlandCalcService } from \"../rectangle-gland-calc.service\";\nimport { AuthService } from \"../../../shared/services/auth.service\";\nimport { ControlType, Units, ControlSubType, GlandSizeCalc_DovetailGlandVacuumOnly_Validators, CalculatorTypes, calculatedDataKeys } from '../../../shared/helpers/constants';\nimport { ControlBaseService } from \"../../../shared/services/control-base.service\";\nimport { PrintService } from \"../../../shared/services/print.service\";\nimport { UnitButtonService } from '../../../shared/components/unit-button/unit-button.service';\nimport { TemperatureButtonService } from '../../../shared/components/temperature-button/temperature-button.service';\nimport { RectangleGlandCalcValidationService } from \"../rectangle-gland-calc-validation.service\";\nimport { GlandSizeDovetailGlandVacuumOnlyService } from \"./gland-size-dovetail-gland-vacuum-only.service\";\nimport { HelperService } from \"../../../shared/services/helper.service\";\nimport { ToastService } from \"../../../shared/components/toasts-container/toast-service\";\n\n@Component({\n  selector: 'app-gland-size-dovetail-gland-vacuum-only',\n  templateUrl: './gland-size-dovetail-gland-vacuum-only.component.html',\n  styleUrls: ['./gland-size-dovetail-gland-vacuum-only.component.css']\n})\nexport class GlandSizeDovetailGlandVacuumOnlyComponent implements OnInit, OnDestroy {\n\n  calculatorConfig: CalculatorModel;\n  glandSizeDovetailGlandForm: FormGroup;\n  flattenedFormControls: FormControlModel[] = [];\n  controlType = ControlType;\n  isSubmitted: Boolean = false;\n  payLoad = '';\n  bottomRadiiMaxLimit: number = 0.035;\n  clientErrors: ErrorModel[] = [];\n  clientWarnings: ErrorModel[] = [];\n  serverErrors: ErrorModel[] = [];\n  serverWarnings: ErrorModel[] = [];\n\n  // calculated data\n  private calculatedData: any;\n\n  get CalculatedData(): any {\n    return this.calculatedData;\n  }\n\n  set CalculatedData(val: any) {\n    this.calculatedData = val;\n    const currentUnit = this.unitButtonService.getCurrentUnitValue;\n\n    if (this.calculatedData && this.calculatedData.unit && currentUnit && (+currentUnit.id) !== (+this.calculatedData.unit)) {\n      this.calculatedData.unit = currentUnit.id.toString();\n      const keys = Object.keys(this.calculatedData);\n      for (let index = 0; index < keys.length; index++) {\n        // do not convert the glandAngle calculated result\n        if (keys[index] === \"glandAngleNominal\") {\n          continue;\n        }\n\n        if ((+currentUnit.id) === Units.MILLI_METER) {\n          this.calculatedData[keys[index]] = this.helperService.convertToMillimeter((+this.calculatedData[keys[index]]));\n        }\n        else {\n          this.calculatedData[keys[index]] = this.helperService.convertToInch((+this.calculatedData[keys[index]]));\n        }\n      }\n    }\n  }\n\n  // subscription\n  glandSizeDataSubscription: Subscription;\n  unitChangeSubscription: Subscription;\n  temperatureChangeSubscription: Subscription;\n\n  constructor(\n    private controlBaseService: ControlBaseService,\n    private authService: AuthService,\n    private rectangleGlandCalcService: RectangleGlandCalcService,\n    private dynamicFormTwoColumnLayoutService: DynamicFormTwoColumnLayoutService,\n    private printService: PrintService,\n    private unitButtonService: UnitButtonService,\n    private temperatureButtonService: TemperatureButtonService,\n    private rectangleGlandCalcValidationService: RectangleGlandCalcValidationService,\n    private glandSizeDovetailGlandVacuumOnlyService: GlandSizeDovetailGlandVacuumOnlyService,\n    private helperService: HelperService,\n    private readonly toastService: ToastService\n  ) {\n\n    // get gland-size-dovetail-gland-vacuum-only config value from O-Ring JSON \n    const rectangleJSONConfig = this.rectangleGlandCalcService.getCurrentGlandSizeCalcConfigValue;\n\n    // gland-size calculator config subscription\n    if (rectangleJSONConfig) {\n      this.initializeOringConfig(rectangleJSONConfig);\n    }\n    else {\n      this.glandSizeDataSubscription = this.rectangleGlandCalcService.glandSizeCalcConfig$.subscribe((x: BaseModel) => {\n        if (x) {\n          this.initializeOringConfig(x);\n        }\n      });\n    }\n\n    // unit change update calculator values handler\n    this.onUnitChangeUpdateCalculator();\n    // temperature change perform operations\n    this.onTemperatureChangeUpdateCalculator();\n  }\n\n  // initialize gland-size-dovetail-gland-vacuum-only calculator by json config param\n  private initializeOringConfig(glandSizeJsonConfig: BaseModel) {\n    // calculator - gland-size-dovetail-gland-vacuum-only\n    const glandSizeDovetailGlandVacuumOnly = { ...glandSizeJsonConfig.calculators[1] };\n    this.calculatorConfig = glandSizeDovetailGlandVacuumOnly;\n    // send calculator to dynamic form service\n    this.dynamicFormTwoColumnLayoutService.sendCalculator(glandSizeDovetailGlandVacuumOnly);\n    // create form\n    this.createForm();\n  }\n\n  ngOnInit(): void {\n    this.CalculatedData = null;\n  }\n\n  // form control changes subcription and update the graph data\n  getControlValue(fieldName: string) {\n    if (this.glandSizeDovetailGlandForm\n      && this.glandSizeDovetailGlandForm.controls[fieldName]\n      && this.glandSizeDovetailGlandForm.controls[fieldName].value) {\n      return (+this.glandSizeDovetailGlandForm.controls[fieldName].value).toFixed(this.unitButtonService.getCurrentUnitValue.id === Units.MILLI_METER ? 2 : 3);\n    }\n  }\n\n  // get calculated field values by fieldname\n  getCalculatedControlValue(fieldName: string) {\n    if (this.CalculatedData) {\n      const fieldValue = this.CalculatedData[fieldName];\n      if (fieldValue) {\n        return (+fieldValue).toFixed(this.unitButtonService.getCurrentUnitValue.id === Units.MILLI_METER ? 2 : 3);\n      }\n    }\n  }\n\n  // unit change update output values handler\n  onUnitChangeUpdateCalculator() {\n    // unit switch button click/change subscription\n    this.unitChangeSubscription = this.unitButtonService.unit$.subscribe((x: SwitchButtonModel) => {\n      if (x) {\n        if (x.id === Units.MILLI_METER) {\n          // millimeter\n          this.bottomRadiiMaxLimit = 0.89; //0.035 * 25.40;\n        }\n        else {\n          // Inch\n          this.bottomRadiiMaxLimit = 0.035;\n        }\n\n        // calculated change detection when by changing the object\n        if (this.CalculatedData) {\n          this.CalculatedData = Object.assign({}, this.CalculatedData);\n        }\n\n        // convert the form data\n        const convertedForm = this.helperService.convertFormUnitControlValuesAndSet((this.calculatorConfig && this.calculatorConfig.form ? this.calculatorConfig.form : null), this.glandSizeDovetailGlandForm, x);\n        if (convertedForm) {\n          this.glandSizeDovetailGlandForm = convertedForm;\n        }\n\n        /// recalculate the data\n        this.onSubmit();\n      }\n    });\n  }\n\n  // create form group\n  createForm() {\n    // get form controls nested array\n    const leftFormControls = this.calculatorConfig.form.left_column.form_layout_row.map(row =>\n      row.form_layout_columns.map((column: FormColumnModel) => {\n        let formControls: FormControlModel[] = [];\n        for (let index = 0; index < column.form_controls.length; index++) {\n          // get existing inputted values of form \n          if (this.glandSizeDovetailGlandForm) {\n            const fc = this.glandSizeDovetailGlandForm.get(column.form_controls[index].key);\n            if (fc) {\n              column.form_controls[index].value = fc.value;\n            }\n          }\n          // create reactive form of only those control which are show = true\n          if (column.form_controls[index].show) {\n            formControls.push(column.form_controls[index]);\n          }\n        }\n        return formControls;\n      }));\n\n    const rightFormControls = this.calculatorConfig.form.right_column.form_layout_row.map(row =>\n      row.form_layout_columns.map((column: FormColumnModel) => {\n        let formControls: FormControlModel[] = [];\n        for (let index = 0; index < column.form_controls.length; index++) {\n          // get existing inputted values of form \n          if (this.glandSizeDovetailGlandForm) {\n            const fc = this.glandSizeDovetailGlandForm.get(column.form_controls[index].key);\n            if (fc) {\n              column.form_controls[index].value = fc.value;\n            }\n          }\n          // createreaxctive form of only those control which are show = true\n          if (column.form_controls[index].show) {\n            formControls.push(column.form_controls[index]);\n          }\n        }\n        return formControls;\n      }));\n\n    // make form control flatten array\n    this.flattenedFormControls = [];\n    // add calculator toolbar option\n    this.flattenedFormControls.push(this.calculatorConfig.toolbarOption);\n    this.flattenedFormControls = [...this.flattenedFormControls, ...this.controlBaseService.flatten(leftFormControls)];\n    this.flattenedFormControls = [...this.flattenedFormControls, ...this.controlBaseService.flatten(rightFormControls)];\n    // exclude formcontrol which is type of label\n    const filteredControls: FormControlModel[] = this.flattenedFormControls.filter(fc => {\n      // exclude labels and buttons from formgroup\n      if (fc && fc.type !== this.controlType.label && fc.type !== this.controlType.button) {\n        return fc;\n      }\n    });\n\n    this.glandSizeDovetailGlandForm = this.controlBaseService.toFormGroup(filteredControls);\n    // get and set validations\n    const validations: ValidatorFn[] = [];\n    // get validation key from json config object\n    let jsonConfigValidationsArray: string[] = this.calculatorConfig.form.form_validation;\n\n    for (let index = 0; index < jsonConfigValidationsArray.length; index++) {\n      const validationFuncKey = jsonConfigValidationsArray[index];\n      switch (validationFuncKey) {\n        case GlandSizeCalc_DovetailGlandVacuumOnly_Validators.OPERATING_TEMPERATURE_VALIDATION:\n          validations.push(this.rectangleGlandCalcValidationService.operatingTemperatureValidation());\n          break;\n        case GlandSizeCalc_DovetailGlandVacuumOnly_Validators.O_RING_CROSS_NOMINAL_AS568A_STANDARD_SECTION_VALIDATION:\n          validations.push(this.rectangleGlandCalcValidationService.oringCrossSectionNominalValidation());\n          break;\n        case GlandSizeCalc_DovetailGlandVacuumOnly_Validators.ORING_ID_AS568A_STANDARD_WARNING:\n          validations.push(this.rectangleGlandCalcValidationService.oRingIDAS568AStandardsWarning());\n          break;\n        case GlandSizeCalc_DovetailGlandVacuumOnly_Validators.O_RING_ID_NOMINAL_SHOULD_BE_LESS_THAN_MAX_ORING_ID_VALUE_VALIDATION:\n          validations.push(this.rectangleGlandCalcValidationService.oringIDNominalLargerThanMaxOringIDValidation());\n          break;\n      }\n    }\n    // set custom validations with params\n    this.glandSizeDovetailGlandForm.setValidators(validations);\n  }\n\n  // form submit event\n  onSubmit(isSubmitted = false) {\n    this.CalculatedData = null;\n    // reset error, warnings\n    this.resetErroAndWarnings();\n    // reset calculated output\n    this.resetCalculatedLabelValue();\n\n    // this.payLoad = this.glandSizeDovetailGlandForm.value;\n    this.isSubmitted = isSubmitted;\n\n    // stop here if form is invalid/Not_valid\n    if (!this.glandSizeDovetailGlandForm || this.glandSizeDovetailGlandForm.invalid) {\n      return;\n    }\n\n    // perform calculation\n    this.glandSizeDovetailGlandVacuumOnlyService.createGland(\n      this.glandSizeDovetailGlandForm,\n      this.unitButtonService.getCurrentUnitValue,\n      this.temperatureButtonService.getCurrentTemperatureValue).subscribe(\n        (resp: any) => {\n          if (resp.data) {\n            // set CalculatedData\n            // this will set the graph data also\n            this.CalculatedData = Object.assign({}, resp.data);\n            if (resp.data.error && resp.data.error.length > 0) {\n              this.serverErrors = resp.data.error.slice();\n            }\n\n            if (resp.data.warning && resp.data.warning.length > 0) {\n              this.serverWarnings = resp.data.warning;\n            }\n\n            const responseDataKeys = Object.keys(resp.data);\n\n            // when toleranc or minmax option is selected than also bind calculated labels received after calculation\n            // Bind left form data\n            // loop through each form left column row\n            for (let rowIndex = 0; rowIndex < this.calculatorConfig.form.left_column.form_layout_row.length; rowIndex++) {\n              // loop through columns\n              for (let columnIndex = 0; columnIndex < this.calculatorConfig.form.left_column.form_layout_row[rowIndex].form_layout_columns.length; columnIndex++) {\n                // loop through controls\n                for (let controlIndex = 0; controlIndex < this.calculatorConfig.form.left_column.form_layout_row[rowIndex].form_layout_columns[columnIndex].form_controls.length; controlIndex++) {\n                  // get form control of JSON\n                  const formControl = this.calculatorConfig.form.left_column.form_layout_row[rowIndex].form_layout_columns[columnIndex].form_controls[controlIndex];\n                  // get fields key from resp data\n                  // const responseDataKeys = Object.keys(resp.data);\n                  for (let keyIndex = 0; keyIndex < responseDataKeys.length; keyIndex++) {\n                    if ((formControl.sub_type === ControlSubType.calculated_label || formControl.sub_type === ControlSubType.calculatedDegreeLabel) && responseDataKeys[keyIndex] === formControl.key) {\n                      // set JSON output label\n                      // bind calculated result to output label\n                      this.calculatorConfig.form.left_column.form_layout_row[rowIndex].form_layout_columns[columnIndex].form_controls[controlIndex].label = resp.data[responseDataKeys[keyIndex]] ? (formControl.sub_type !== ControlSubType.calculatedDegreeLabel ? resp.data[responseDataKeys[keyIndex]].toFixed((this.unitButtonService.getCurrentUnitValue && this.unitButtonService.getCurrentUnitValue.id === Units.MILLI_METER ? 2 : 3)) : resp.data[responseDataKeys[keyIndex]]) : resp.data[responseDataKeys[keyIndex]];\n                    }\n                  }\n                }\n              }\n            }\n\n            // Bind right form data\n            // loop through each form left column row\n            for (let rowIndex = 0; rowIndex < this.calculatorConfig.form.right_column.form_layout_row.length; rowIndex++) {\n              // loop through columns\n              for (let columnIndex = 0; columnIndex < this.calculatorConfig.form.right_column.form_layout_row[rowIndex].form_layout_columns.length; columnIndex++) {\n                // loop through controls\n                for (let controlIndex = 0; controlIndex < this.calculatorConfig.form.right_column.form_layout_row[rowIndex].form_layout_columns[columnIndex].form_controls.length; controlIndex++) {\n                  // get form control of JSON\n                  const formControl = this.calculatorConfig.form.right_column.form_layout_row[rowIndex].form_layout_columns[columnIndex].form_controls[controlIndex];\n                  // get fields key from resp data\n                  // const responseDataKeys = Object.keys(resp.data);\n                  for (let keyIndex = 0; keyIndex < responseDataKeys.length; keyIndex++) {\n                    if ((formControl.sub_type === ControlSubType.calculated_label || formControl.sub_type === ControlSubType.calculatedDegreeLabel) && responseDataKeys[keyIndex] === formControl.key) {\n                      // set JSON output label\n                      // bind calculated result to output label\n                      this.calculatorConfig.form.right_column.form_layout_row[rowIndex].form_layout_columns[columnIndex].form_controls[controlIndex].label = resp.data[responseDataKeys[keyIndex]] ? (formControl.sub_type !== ControlSubType.calculatedDegreeLabel ? resp.data[responseDataKeys[keyIndex]].toFixed((this.unitButtonService.getCurrentUnitValue && this.unitButtonService.getCurrentUnitValue.id === Units.MILLI_METER ? 2 : 3)) : resp.data[responseDataKeys[keyIndex]]) : resp.data[responseDataKeys[keyIndex]];\n                    }\n                  }\n                }\n              }\n            }\n\n            // Bind output form data\n            // loop through each output\n            for (let outputIndex = 0; outputIndex < this.calculatorConfig.form_output.length; outputIndex++) {\n              // loop through rows\n              for (let rowIndex = 0; rowIndex < this.calculatorConfig.form_output[outputIndex].row.length; rowIndex++) {\n                // loop through columns\n                for (let columnIndex = 0; columnIndex < this.calculatorConfig.form_output[outputIndex].row[rowIndex].form_layout_columns.length; columnIndex++) {\n                  // loop through controls\n                  for (let controlIndex = 0; controlIndex < this.calculatorConfig.form_output[outputIndex].row[rowIndex].form_layout_columns[columnIndex].form_controls.length; controlIndex++) {\n                    // get form control of JSON\n                    const formControl = this.calculatorConfig.form_output[outputIndex].row[rowIndex].form_layout_columns[columnIndex].form_controls[controlIndex];\n                    // get fields key from resp data\n                    // const responseDataKeys = Object.keys(resp.data);\n                    for (let keyIndex = 0; keyIndex < responseDataKeys.length; keyIndex++) {\n                      if (formControl.sub_type === ControlSubType.calculated_label && responseDataKeys[keyIndex] === formControl.key) {\n                        // set JSON output label\n                        // bind calculated result to output label\n                        this.calculatorConfig.form_output[outputIndex].row[rowIndex].form_layout_columns[columnIndex].form_controls[controlIndex].label = `${(resp.data[responseDataKeys[keyIndex]] !== null && resp.data[responseDataKeys[keyIndex]] !== undefined && !isNaN((+resp.data[responseDataKeys[keyIndex]]))) ? parseFloat(resp.data[responseDataKeys[keyIndex]]).toFixed(1) : resp.data[responseDataKeys[keyIndex]]}%`;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n\n            // reset auth token \n            this.setAuth();\n          }\n        }, (error: any) => {\n          // reset auth token \n          this.setAuth();\n          // TODO: show error if any\n          console.log(error);\n        });\n  }\n\n  // reset auth token\n  setAuth() {\n    this.authService.authenticate().pipe(first())\n      .subscribe(r => r);\n  }\n\n  // temperature change update output values handler\n  onTemperatureChangeUpdateCalculator() {\n    // unit switch button click/change subscription\n    this.temperatureChangeSubscription = this.temperatureButtonService.temperature$.subscribe((x: SwitchButtonModel) => {\n      if (x) {\n        this.resetFormAndCalculation();\n      }\n    });\n  }\n\n  // on reset button handler\n  // on reset button handler\n  onReset() {\n    // reset dynamically created form controls\n    // get form controls key\n    const formControlKeys = Object.keys(this.glandSizeDovetailGlandForm.controls);\n    // loop through the reactive form/formgroup controls \n    for (let index = 0; index < formControlKeys.length; index++) {\n      const formControlDefaultValue = this.dynamicFormTwoColumnLayoutService.getDefaultControlValueFromCalculatorJSONConfig(formControlKeys[index]);\n      if (formControlDefaultValue) {\n        this.glandSizeDovetailGlandForm.controls[formControlKeys[index]].setValue(formControlDefaultValue);\n      }\n      else {\n        this.glandSizeDovetailGlandForm.controls[formControlKeys[index]].setValue('');\n      }\n    }\n\n    this.resetFormAndCalculation();\n  }\n\n  resetFormAndCalculation() {\n    // reset form submitted status to false \n    this.isSubmitted = false;\n\n    // reset client errors and warnings\n    this.resetErroAndWarnings();\n\n    if (!this.calculatorConfig) {\n      return;\n    }\n\n    // reset left form data\n    // loop through each form left column row\n    for (let rowIndex = 0; rowIndex < this.calculatorConfig.form.left_column.form_layout_row.length; rowIndex++) {\n      // loop through columns\n      for (let columnIndex = 0; columnIndex < this.calculatorConfig.form.left_column.form_layout_row[rowIndex].form_layout_columns.length; columnIndex++) {\n        // loop through controls\n        for (let controlIndex = 0; controlIndex < this.calculatorConfig.form.left_column.form_layout_row[rowIndex].form_layout_columns[columnIndex].form_controls.length; controlIndex++) {\n          // get form control of JSON\n          const formControl = this.calculatorConfig.form.left_column.form_layout_row[rowIndex].form_layout_columns[columnIndex].form_controls[controlIndex];\n          if ((formControl.sub_type === ControlSubType.calculated_label || formControl.sub_type === ControlSubType.calculatedDegreeLabel)) {\n            // set JSON output label\n            // bind calculated result to output label\n            this.calculatorConfig.form.left_column.form_layout_row[rowIndex].form_layout_columns[columnIndex].form_controls[controlIndex].label = '';\n          }\n        }\n      }\n    }\n\n    // reset right form data\n    // loop through each form left column row\n    for (let rowIndex = 0; rowIndex < this.calculatorConfig.form.right_column.form_layout_row.length; rowIndex++) {\n      // loop through columns\n      for (let columnIndex = 0; columnIndex < this.calculatorConfig.form.right_column.form_layout_row[rowIndex].form_layout_columns.length; columnIndex++) {\n        // loop through controls\n        for (let controlIndex = 0; controlIndex < this.calculatorConfig.form.right_column.form_layout_row[rowIndex].form_layout_columns[columnIndex].form_controls.length; controlIndex++) {\n          // get form control of JSON\n          const formControl = this.calculatorConfig.form.right_column.form_layout_row[rowIndex].form_layout_columns[columnIndex].form_controls[controlIndex];\n          // get fields key from resp data\n          // const responseDataKeys = Object.keys(resp.data);\n          if ((formControl.sub_type === ControlSubType.calculated_label || formControl.sub_type === ControlSubType.calculatedDegreeLabel)) {\n            // set JSON output label\n            // bind calculated result to output label\n            this.calculatorConfig.form.right_column.form_layout_row[rowIndex].form_layout_columns[columnIndex].form_controls[controlIndex].label = '';\n          }\n        }\n      }\n    }\n\n    // reset output form data\n    // loop through each output\n    for (let outputIndex = 0; outputIndex < this.calculatorConfig.form_output.length; outputIndex++) {\n      // loop through rows\n      for (let rowIndex = 0; rowIndex < this.calculatorConfig.form_output[outputIndex].row.length; rowIndex++) {\n        // loop through columns\n        for (let columnIndex = 0; columnIndex < this.calculatorConfig.form_output[outputIndex].row[rowIndex].form_layout_columns.length; columnIndex++) {\n          // loop through controls\n          for (let controlIndex = 0; controlIndex < this.calculatorConfig.form_output[outputIndex].row[rowIndex].form_layout_columns[columnIndex].form_controls.length; controlIndex++) {\n            // get form control of JSON\n            const formControl = this.calculatorConfig.form_output[outputIndex].row[rowIndex].form_layout_columns[columnIndex].form_controls[controlIndex];\n            // get fields key from resp data\n            // const responseDataKeys = Object.keys(resp.data);\n            if (formControl.sub_type === ControlSubType.calculated_label) {\n              // set JSON output label\n              // bind calculated result to output label\n              this.calculatorConfig.form_output[outputIndex].row[rowIndex].form_layout_columns[columnIndex].form_controls[controlIndex].label = `%`;\n            }\n          }\n        }\n      }\n    }\n\n    // reset calculated data received after calculation\n    this.CalculatedData = null;\n  }\n\n  // print button event handler\n  onPrint() {\n    this.printService.generatePdf(\"dovetailGland\");\n  }\n\n  // copy event handler of toolbar\n  onCopy() {\n    let formAndOutputData: any;\n    // save calculated data to local storage\n    if (this.CalculatedData) {\n      formAndOutputData = { ...this.glandSizeDovetailGlandForm.value, ...this.CalculatedData };\n    }\n    else {\n      formAndOutputData = { ...this.glandSizeDovetailGlandForm.value };\n    }\n\n    formAndOutputData.calculatorType = CalculatorTypes.ORingDovetailGlandVacuumOnly;\n    localStorage.setItem(calculatedDataKeys.DOVETAIL_GLAND, JSON.stringify(formAndOutputData));\n    // this.cookieService.set('lastCalculatedData', JSON.stringify(resp.data));\n    this.toastService.showSucces(\"Calculator data copied !\");\n  }\n\n  // reset error, warnings of client and server\n  resetErroAndWarnings() {\n    this.clientErrors = [];\n    this.clientWarnings = [];\n    this.serverErrors = [];\n    this.serverWarnings = [];\n  }\n\n\n  // reset calculated label or output value in JSOn config\n  resetCalculatedLabelValue() {\n    this.CalculatedData = {};\n\n    if (!this.calculatorConfig) {\n      return;\n    }\n\n    // reset left form data\n    // loop through each form left column row\n    for (let rowIndex = 0; rowIndex < this.calculatorConfig.form.left_column.form_layout_row.length; rowIndex++) {\n      // loop through columns\n      for (let columnIndex = 0; columnIndex < this.calculatorConfig.form.left_column.form_layout_row[rowIndex].form_layout_columns.length; columnIndex++) {\n        // loop through controls\n        for (let controlIndex = 0; controlIndex < this.calculatorConfig.form.left_column.form_layout_row[rowIndex].form_layout_columns[columnIndex].form_controls.length; controlIndex++) {\n          // get form control of JSON\n          const formControl = this.calculatorConfig.form.left_column.form_layout_row[rowIndex].form_layout_columns[columnIndex].form_controls[controlIndex];\n          if (formControl.sub_type === ControlSubType.calculated_label) {\n            // set JSON output label\n            // reset calculated result to output label\n            this.calculatorConfig.form.left_column.form_layout_row[rowIndex].form_layout_columns[columnIndex].form_controls[controlIndex].label = \"\";\n          }\n        }\n      }\n    }\n\n    // reset right form data\n    // loop through each form left column row\n    for (let rowIndex = 0; rowIndex < this.calculatorConfig.form.right_column.form_layout_row.length; rowIndex++) {\n      // loop through columns\n      for (let columnIndex = 0; columnIndex < this.calculatorConfig.form.right_column.form_layout_row[rowIndex].form_layout_columns.length; columnIndex++) {\n        // loop through controls\n        for (let controlIndex = 0; controlIndex < this.calculatorConfig.form.right_column.form_layout_row[rowIndex].form_layout_columns[columnIndex].form_controls.length; controlIndex++) {\n          // get form control of JSON\n          const formControl = this.calculatorConfig.form.right_column.form_layout_row[rowIndex].form_layout_columns[columnIndex].form_controls[controlIndex];\n          if (formControl.sub_type === ControlSubType.calculated_label) {\n            // set JSON output label\n            // bind calculated result to output label\n            this.calculatorConfig.form.right_column.form_layout_row[rowIndex].form_layout_columns[columnIndex].form_controls[controlIndex].label = \"\";\n          }\n        }\n      }\n    }\n\n    // reset output form data\n    // loop through each output\n    for (let outputIndex = 0; outputIndex < this.calculatorConfig.form_output.length; outputIndex++) {\n      // loop through rows\n      for (let rowIndex = 0; rowIndex < this.calculatorConfig.form_output[outputIndex].row.length; rowIndex++) {\n        // loop through columns\n        for (let columnIndex = 0; columnIndex < this.calculatorConfig.form_output[outputIndex].row[rowIndex].form_layout_columns.length; columnIndex++) {\n          // loop through controls\n          for (let controlIndex = 0; controlIndex < this.calculatorConfig.form_output[outputIndex].row[rowIndex].form_layout_columns[columnIndex].form_controls.length; controlIndex++) {\n            // get form control of JSON\n            const formControl = this.calculatorConfig.form_output[outputIndex].row[rowIndex].form_layout_columns[columnIndex].form_controls[controlIndex];\n            if (formControl.sub_type === ControlSubType.calculated_label) {\n              // set JSON output label\n              // bind calculated result to output label\n              this.calculatorConfig.form_output[outputIndex].row[rowIndex].form_layout_columns[columnIndex].form_controls[controlIndex].label = \" %\";\n            }\n          }\n        }\n      }\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.unitChangeSubscription) {\n      this.unitChangeSubscription.unsubscribe();\n    }\n    if (this.glandSizeDataSubscription) {\n      this.glandSizeDataSubscription.unsubscribe();\n    }\n    if (this.temperatureChangeSubscription) {\n      this.temperatureChangeSubscription.unsubscribe();\n    }\n  }\n}\n","<div class=\"row\">\n    <div class=\"col-12 col-sm-12 col-md-9 col-lg-9 col-xl-9\">\n        <form *ngIf=\"calculatorConfig && glandSizeDovetailGlandForm\" (ngSubmit)=\"onSubmit(true)\"\n            [formGroup]=\"glandSizeDovetailGlandForm\" novalidate\n            class=\"form-horizontal {{calculatorConfig.form.form_title_css_class}}\">\n            <div class=\"row\">\n                <div class=\"col-12 col-sm-12 col-md-12 col-lg-12 col-xl-12 p-1 ignorePdf\">\n                    <calculator-toolbar [form]=\"glandSizeDovetailGlandForm\" [control]=\"calculatorConfig.toolbarOption\"\n                        [isSubmitted]=\"isSubmitted\" (reset)=\"onReset()\" (print)=\"onPrint()\" [isShowCopyBtn]=\"true\" (copy)=\"onCopy()\">\n                    </calculator-toolbar>\n                </div>\n                <div class=\"col-12 col-sm-12 col-md-12 col-lg-12 col-xl-12 p-1\">\n                    <dynamic-form-two-column-layout [form]=\"glandSizeDovetailGlandForm\" [isSubmitted]=\"isSubmitted\"\n                        [calculatorJSON]=\"calculatorConfig\" [clientErrors]=\"clientErrors\"\n                        [clientWarnings]=\"clientWarnings\" [serverErrors]=\"serverErrors\"\n                        [serverWarnings]=\"serverWarnings\">\n                    </dynamic-form-two-column-layout>\n                </div>\n            </div>\n        </form>\n    </div>\n    <div class=\"col-12 col-sm-12 col-md-3 col-lg-3 col-xl-3 p-1\">\n        <div class=\"row\">\n            <div class=\"col-12 col-sm-12 col-md-12 col-lg-12 col-xl-12\">\n                <!-- graph -->\n                <div class=\"graph-sec\">\n                    <h3>Gland Information</h3>\n                    <div class=\"graph-bg dovtail-bg\">\n                        <div class=\"gld-id\">CL: <strong>{{getCalculatedControlValue('glandCenterlineNominal')}}</strong> <br>\n                            (to centerline)</div>\n                        <div class=\"gld-width\">GLAND WIDTH: <strong>{{getCalculatedControlValue('glandWidthNominal')}}</strong>\n                            <br>(to sharp corners)</div>\n                        <div class=\"gld-depth\">GLAND DEPTH:\n                            <br><strong>{{getCalculatedControlValue('glandDepthNominal')}}</strong></div>\n                        <div class=\"top-radii\">TOP RADII: <strong>{{getCalculatedControlValue('topRadiiNominal')}}</strong>\n                        </div>\n                        <div class=\"bottom-radii\">BOTTOM RADII:\n                            <strong>{{getCalculatedControlValue('bottomRadiiNominal')}} </strong></div>\n                        <div class=\"gld-angle\">GLAND ANGLE: <strong>{{getCalculatedControlValue('glandAngleNominal')}}</strong>\n                        </div>\n                        <div class=\"gap-full-comp\">GAP: <strong>{{getControlValue('gapNominal')}}</strong> <br>(may\n                            or may not exist)</div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"col-12 col-sm-12 col-md-12 col-lg-12 col-xl-12 ignorePdf\">\n                <user-rules></user-rules>\n            </div>\n        </div>\n    </div>\n</div>","// core improts\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\n\n// application imports\nimport { SharedModule } from \"../../../shared/shared.module\";\nimport { DynamicFormModule } from \"../../../dynamic-form/dynamic-form.module\";\nimport { GlandSizeDovetailGlandVacuumOnlyRoutingModule } from \"./gland-size-dovetail-gland-vacuum-only-routing.module\";\nimport { GlandSizeDovetailGlandVacuumOnlyComponent } from \"./gland-size-dovetail-gland-vacuum-only.component\";\nimport { GlandSizeDovetailGlandVacuumOnlyService } from \"./gland-size-dovetail-gland-vacuum-only.service\";\n\n@NgModule({\n  declarations: [GlandSizeDovetailGlandVacuumOnlyComponent],\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SharedModule,\n    DynamicFormModule,\n    GlandSizeDovetailGlandVacuumOnlyRoutingModule\n  ],\n  providers: [\n    GlandSizeDovetailGlandVacuumOnlyService\n  ]\n})\nexport class GlandSizeDovetailGlandVacuumOnlyModule { }\n","// core imports\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from \"@angular/common/http\";\n\n// application imports\nimport { AppConfig } from '../../../app.config.service';\nimport { GlandSizeRectangularGlandInternalVacuumOnlyDTO } from \"../../../models/GlandSizeRectangularGlandInternalVacuumOnlyDTO\";\nimport { SwitchButtonModel } from '../../../models/switch-button.model';\nimport { FormGroup } from '@angular/forms';\nimport { calculationType, CalculatorOption, glandType } from '../../../shared/helpers/constants';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GlandSizeDovetailGlandVacuumOnlyService {\n  private baseUrl = AppConfig.settings.env.api;\n\n  constructor(private _http: HttpClient) { }\n\n  public createGland(form: FormGroup, unit: SwitchButtonModel, unitTemp: SwitchButtonModel) {\n    let body: GlandSizeRectangularGlandInternalVacuumOnlyDTO = new GlandSizeRectangularGlandInternalVacuumOnlyDTO(form.value);\n    body.unit = unit.id.toString();\n    body.unitTemp = unitTemp.id.toString();\n    body.inputOption = CalculatorOption.WithMinMax.toString();\n    body.calculationType = calculationType.GLAND_SIZING;\n    body.glandType = glandType.DOVETAIL;\n\n    return this._http.post(`${this.baseUrl}glandsizecalc/createGland`, body);\n  }\n}\n"]}